%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.0.2
%%For: (Daniel) ()
%%Title: (DeepSea.eps)
%%CreationDate: 5/22/2017 5:23 PM
%%Canvassize: 16383
%%BoundingBox: -1 -512 1024 0
%%HiResBoundingBox: -1 -512 1024 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Passermarken])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 512.5 -256.5 512.5 -256.5
%AI3_TileBox: 224 -662.6201 800 150.6201
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1024 512
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 6
%AI8_OpenToView: -566 389 1 2157 1268 18 0 0 48 119 0 0
%AI5_OpenViewLayers: 777777
%%PageOrigin:112 -556
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MP
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Nachzeichnen) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe H\374llen-Zusatzmodul) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe-Zusatzmodul Interaktiv malen) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Kalligrafiepinsel-Zusatzmodul) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Zusammengesetzte Form) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Unnamed gradient 39)
(Unnamed gradient 39) 0 2 Bd
[
<
EDECECEBEAE9E8E7E7E6E5E4E3E2E1E0E0DFDEDEDDDCDBDADAD9D8D8D7D6D6D5D5D4D3D3D2D1D1D0
CFCFCECDCDCCCCCBCACAC9C9C8C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C2C1C0C0BFBFBEBEBDBC
BC
>
<
9A99979593918F8D8C8988868482817E7D7B7978767472716F6D6C6968666462615F5D5C5A585654
514F4E4B4A4847454442413F3D3C3A393836353332302F2D2C2A2927262422201F1C1B1917151312
10
>
<
2E2D2E2E2F2F302F2F302F3130313132313132313231323231323233323433343433343435343535
3536363737383739383839393A3A3B3B3A3C3B3D3C3D3D3E3E3D3F3E3F3F403F3E3F3E3F3F403F40
3F
>
<
090809090A090A0A090A0A0B0A0B0B0B0B0B0C0B0C0C0C0C0B0C0C0C0C0D0C0D0D0C0D0D0D0D0D0D
0D0D0C0D0C0C0C0C0B0B0B0A0A0A0909080807070606050504040303020201010101000000000000
00
>
<
0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F10101010
10101010111111111111111112121212121212121313131313131313141414141414141415151515
15
>
<
5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80818283
85868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC
AD
>
<
9394949595969697989899999A9A9B9B9C9D9D9E9E9F9FA0A1A1A2A2A3A3A4A4A5A6A6A7A7A8A8A9
AAAAABABACACADADAEAFAFB0B0B1B1B2B3B3B4B4B5B5B6B6B7B8B8B9B9BABABBBCBCBDBDBEBEBFBF
C0
>
4 %_Br
[
0.736599 0.062165 0.248539 0 0.082353 0.678431 0.752941 2 50 100 %_BS
%_0.736599 0.062165 0.248539 0 0.082353 0.678431 0.752941 2 50 100 Bs
0.930144 0.605585 0.178988 0.034089 0.043137 0.360784 0.576471 2 50 0 %_BS
%_0.930144 0.605585 0.178988 0.034089 0.043137 0.360784 0.576471 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Neonring-Vignette)
(Neonring-Vignette) 1 17 Bd
[
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
<
C6C7C9CACBCDD3D5D6DADCDDDEE2E3E4E4E7E8E8EBEAEAEAECEDEDEFF0F0F2F4F4F5F6F6F6F5F6F6
F5F5F7F7F6F7F7F6F6F6F6F5F6F5F5F5F6F5F5F6F5F5F5F6F6F5F5F6F5F4F5F5F4F3F4F4F3F4F3F2
F1F2F1F0F1F0F0EFF0EFEFEEEFEEEDEEEDEDECECECEBECEBEAEAEAE9E9E9E9E8E7E8E7E7E6E6E5E5
E5E4E4E3E3E3E2E2E1E1E0E0DFDFDFDEDEDDDDDDDCDBDCDBDADADAD9D9D9D8D8D8D7D6D6D6D5D5D5
D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCCCCCCCBCBCBCAC9C9C9C8C7C7C7C6C6C6C5C4C4
C4C3C3C2C2C1C1C0BFBFBEBDBCBCBCBBBABABAB9B9B8B7B7B6B6
>
<
BFBEC1C1BFBEC1C0BFC3C2C1BFC3C2C0BEC2BFBDC0BEBCBABDBBBABDBCBAB9BBBAB9BBBAB8B6B9B7
B5B3B5B4B2B4B3B1AFB2B0AEB0AEACABACABAAACAAA9A8AAA9A7A5A7A5A4A6A4A3A1A3A1A0A1A09E
9D9E9D9B9D9B9998999896959695939593929092908F908E8D8B8D8B898B89878687858482838281
82807F7D7E7D7B7C7A7977787776777574727371706F6F6E6C6D6C6A696968666766646263626061
5F5E5C5D5C5A5859575657555452535150504E4D4B4C4A484947464444434140403E3D3D3C3A3839
373636343331312F2E2E2D2B2A2A292726262524242322202120
>
<
97989696979796969694949494939292929091918F8F8F8F8D8D8D8B8B8B8B8A8989888787878585
85848383828180807F7E7D7D7B7B7A7A79787876767676747473737171706F6E6E6D6B6B6A696868
6766656563636262616060605E5E5D5C5B5B5A59585857565655545353515150504E4E4D4D4B4B4A
494847474645454343424240403F3E3D3D3C3B3A3A39373736353434333131302F2F2E2E2C2C2B2A
29282826262524222221201F1F1E1C1C1C19191818161515131212110F0F0E0D0B0B0A0808070705
0404020101000000000000000000000000000000000000000000
>
<
E6E5E3E2E0DFDDDBDAD8D6D4D3D0CFCDCBC9C7C5C3C1BFBDBBB9B7B5B3B2B0AEADABA9A7A5A3A19F
9D9C9998969392908E8C8A88868482807E7C7B7877767572716F6E6B6968656462615E5D5C595856
555352504E4D4B4A484746444241403E3D3C3B39383735343332302F2F2D2C2B2A28272726242323
21201F1F1D1D1C1A1A191817161615141413121111100F0F0F0D0D0D0C0C0B0B0A0A090908080807
07070706060505040404030303020202010101010101010100000000000000000000000000000000
0000000000000000000000000000000000000000000000000000
>
<
13131313131312121212121212121212121211111111111111111111111110101010101010101010
10100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C
0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A09090909090909
09090909090808080808080808080808080707070707070707070707070606060606060606060606
05050505050505050505050504040404040404040404040403030303030303030303030302020202
0202020202020202010101010101010101010101000000000000
>
<
0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728
292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F4041414243434445
4646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162
626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E
7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B
9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACAD
AEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5
D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
>
4 %_Br
<
B6B6B5B5B5B5B5B5B4B4B4B4B4B3B3B3B3B3B3B2B2B2B2B2B1B1B1B0B0B0B0B0AFAFAFAFAEAEAEAD
ADACACACABABABAAAAAAA9A9A9A8A8A7A7A7A6A6A6A5A5A5A4A4A3A3A3A2A2A1A1A09F9F9E9E9E9D
9D9C9C9B9A9A9999989797979695959594939393929190908F8F8E8D8D8C8B8A8A89888887868685
84848382828180807F7E7E7D7C7B7B7A797978777776757473737271706F6E6E6D6C6B6A69686766
656463626160605F5E5D5C5B5B5A59585756555453535251504F4E4D4C
>
<
20201E1E1E1E1C1C1D1B1B1B19191919171717151515131314151213131111110E0F0F0F0C0D0D0A
0B0C09090A0A07080805060606040406040404020202030001010000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000001000000000000010100020201010302000202010302020203030203030304040101
02020203030204040303040404050303040403030404040505040405050304040304040403040403
0404040504020203030204030304030302030303040101020201010202
>
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC
>
<
AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BA
BABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6
C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1
D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDD
DEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6
>
<
EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1
F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4
F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9
F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB
>
4 %_Br
<
4C4D4E4F50515253535455565758595A5B5B5C5D5E5F60606162636465666768696A6B6C6D6E6E6F
707172737374757677777879797A7B7B7C7D7E7E7F8080818282838484858686878888898A8A8B8C
8D8D8E8F8F9090919293939394959595969797979899999A9A9B9C9C9D9D9E9E9E9F9FA0A1A1A2A2
A3A3A3A4A4A5A5A5A6A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACACADADAEAEAEAFAFAFAFB0B0B0
B0B0B1B1B1B2B2B2B2B2B3B3B3B3B3B3B4B4B4B4B4B5B5B5B5B5B5B6B6
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000001010003020202040404060404060606050808070A0A09090C0B0A0D0D0C0F0F0F0E111111
13131215141313151515171717191919191B1B1B1D1C1C1E1E1E1E2020
>
<
02020101020201010403030302030304030304020303020204050404040304040304040403040403
05050404050504040403030404030305040404030304040203030202020101040403030302030302
02020301020200020301010202000101000000000000010000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000
>
0
<
BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A9998979695
94939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D
6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A4948474645
44434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D
1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDA
DADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCE
CECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3
C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7
B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE
>
<
FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9
F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1
F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF
>
4 %_Br
<
B6B6B7B7B8B9B9BABABABBBCBCBCBDBEBFBFC0C1C1C2C2C3C3C4C4C4C5C6C6C6C7C7C7C8C9C9C9CA
CBCBCBCCCCCCCDCECECECFCFCFD0D0D1D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D6D7D8D8D8D9D9D9DA
DADADBDCDBDCDDDDDDDEDEDFDFDFE0E0E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E8E7E8E9E9E9E9EA
EAEAEBECEBECECECEDEDEEEDEEEFEEEFEFF0EFF0F0F1F0F1F2F1F2F3F4F3F4F4F3F4F5F5F4F5F6F5
F5F6F6F5F5F5F6F5F5F6F5F5F5F6F5F6F6F6F6F7F7F6F7F7F5F5F6F6F5F6F6F6F5F4F4F2F0F0EFED
EDECEAEAEAEBE8E8E7E4E4E3E2DEDDDCDAD6D5D3CDCBCAC9C7C6
>
<
2021202223242425262627292A2A2B2D2E2E2F3131333436363739383A3C3D3D3E40404143444446
4749484A4C4B4D4E5050515352545557565759585A5C5D5C5E5F6160626362646667666869696A6C
6D6C6E6F6F7071737274757776777877797A7C7B7D7E7D7F8082818283828485878687898B898B8D
8B8D8E908F9092909293959395969596989998999B9D9B9D9E9D9EA0A1A0A1A3A1A3A4A6A4A5A7A5
A7A9AAA8A9AAACAAABACABACAEB0AEB0B2AFB1B3B4B2B4B5B3B5B7B9B6B8BABBB9BABBB9BABCBDBA
BBBDBABCBEC0BDBFC2BEC0C2C3BFC1C2C3BFC0C1BEBFC1C1BEBF
>
<
000000000000000000000000000000000000000000010102040405070708080A0B0B0D0E0F0F1112
1213151516181819191C1C1C1E1F1F20212222242526262828292A2B2C2C2E2E2F2F303131333434
35363737393A3A3B3C3D3D3E3F404042424343454546474748494A4B4B4D4D4E4E50505151535354
555656575858595A5B5B5C5D5E5E6060606162626363656566676868696A6B6B6D6E6E6F70717173
737474767676767878797A7A7B7B7D7D7E7F808081828383848585858787878889898A8B8B8B8B8D
8D8D8F8F8F8F9191909292929394949494969696979796969897
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000101010101010101020202030303040404050506060707070708080809090A0A0B0B0C0C0D0D
0D0F0F0F101111121314141516161718191A1A1C1D1D1F1F2021232324262727282A2B2C2D2F2F30
323334353738393B3C3D3E404142444647484A4B4D4E505253555658595C5D5E6162646568696B6E
6F7172757677787B7C7E80828486888A8C8E9092939698999C9D9FA1A3A5A7A9ABADAEB0B2B3B5B7
B9BBBDBFC1C3C5C7C9CBCDCFD0D3D4D6D8DADBDDDFE0E2E3E5E6
>
<
00000000000001010101010101010101010102020202020202020202020203030303030303030303
03030404040404040404040404040505050505050505050505050606060606060606060606070707
0707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A
0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D
0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101011111111
1111111111111111121212121212121212121212131313131313
>
<
AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A9998989796969594939392
9190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675
747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A5958
5857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C
3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F
1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C
>
<
EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8
C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E
>
4 %_Br
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
<
C6C3C2BFBCB9B8B5B5B2B2AEAEABABA8AAA7A8A3A4A1A19E9F9C9A9797949491918E8E8B8C898A88
888585838381817F7E7B7B79787676747472727171706F6E6E6C6C6B6B6969686866666565636362
62616160605F5F5E5E5D5D5C5B5A5A595A59595858575756565555545453535252515150504F4F4E
4E4D4D4C4C4C4B4B4A49494949484847474646454544444343424140403F3E3D3D3C3C3B3B3A3A39
3838373636353433323131302F2E2E2D2C2C2B2A292827262524232221201F1E1C1B1A1817161413
12100F0D0B0A0807050403010000000000000000
>
<
BFC0C3C3C3C4C7C8CBCCCFCCCFCFD2D1D3D3D5D2D4D4D6D6D7D8D8D8DBDCDEDFE1DFE1E1E3E3E5E5
E6E4E6E6E7E7E8E8E8E9EAEBEDEDEEEDEEEEEFEFF0F0F1EFF0F0F1F1F2F2F1F2F2F3F3F4F5F4F5F5
F6F6F6F6F5F5F5F5F6F6F6F7F6F6F6F7F7F7F7F6F6F6F7F7F7F7F6F6F6F6F7F7F7F7F6F6F6F6F6F6
F7F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F5F5F5F5F5F6F6F5F5F5F5F5F5F5F5F4F4
F4F4F4F5F5F4F4F4F4F4F4F4F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F1F1F1F0F0F0F0EFEFEFEFEFEF
EEEEEDEDEDEDEDECECECEBEBEBEBEAEAE9E9E9E8
>
<
97979594949491918F8E8C8E8B8B89898887868685858383828181807F7F7D7D7B7C7A7A79797877
7677767674747373727370716F6F6E706D6E6C6E6B6D6B6D6B6C6A6B696A6A6B696A686967696769
67686667666866676566646564666465636463656364636462636364626362626162616260615F60
5F605F605E5F5D5E5D5E5D5D5C5D5B5C5B5C5B5B5A5B595A595A5858575756575556545554555454
53545253515250514F504E4E4D4E4C4D4B4C4A4B4949474745454344424340413E3F3D3D3B3C3939
37383636333431312F302E2E2B2C2A2A28292627
>
<
E6E6E5E5E3E3E1E1DFDFDEDEDCDCDADAD8D8D6D6D4D4D2D2D0D0CECECCCBC9C9C7C7C5C5C3C3C1C1
BFBFBDBDBBBBB8B8B6B5B3B3B1B0AEADACABA9A8A6A5A4A3A1A09E9D9B9A98979695939291908E8E
8C8B898886858382807F7D7C7A797876757472716F6E6C6B696866656362605F5D5C5B5A58575554
52514F4E4C4B49484645434240403E3D3C3B3939373635343231302F2D2C2B2A2827262524232120
1F1E1D1C1A191817161514131211100F0E0E0D0C0B0B0A0A09080807060605050404040303030202
0202020101010101010100000000000000000000
>
<
131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A
3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162
636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A
8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2
B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DA
DBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE
>
<
0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101011111111111111
11121212121212121313131313131314141414141414141515151515151516161616161616171717
171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C
1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F2020202020202021212121212121222222
22222222222323232323232324242424242424252525252525252526262626262626272727272727
272828282828282828292929292929292A2A2A2A
>
<
0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121
222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F303031313232333334343535
36363737383839393A3A3B3B3C3C3D3D3E3E3F3F4040414142424343444445454646474748484949
4A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D
5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171
727273737474757576767777787879797A7A7B7B
>
4 %_Br
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000100010101020202030403040404050505050505050505050506050607060809090909
090A0A0A0B0A0B0B0B0B0C0B0E0E0E0F0E0F0F0F0F0F0F0F0E0E0F0E0F1111111212121212121212
1313131313151515151515161616
>
<
E8E8E7E7E6E5E4E4E3E2E2E1E0E0DFDFDEDDDDDCDBDADAD9D8D7D7D6D5D4D4D3D2D1D1D0CFCECECD
CCCBCAC9C9C8C7C6C5C5C4C3C2C1C0BFBEBCBBBAB9B9B8B7B6B5B4B3B2B0AFAEADACACAAA9A9A8A7
A6A4A3A2A1A09F9E9D9C9B9A9997969594939291908F8E8C8B8988878684838281807E7D7C7B7A79
787675747371706F6E6C6B6A6867
>
<
27252523212220211F1D1E1C1A1B1A18191716171516141314121112100E100E0F0D0C0D0B0A0B09
08090809070607060406040305040304030403020302000201000100010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000100000100
0001000001010001010202010202
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000
>
<
EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECEC
ECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7
E7E7E7E7E7E6E6E6E6E6E6E6E6E6
>
<
2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051
52535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F70717273747576777879
7A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1
A2A3A4A5A6A7A8A9AAABACADAEAF
>
<
7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F90919192939394
95959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADAD
AEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7
C8C8C9CACACBCCCCCDCDCECFCFD0
>
4 %_Br
<
161616151515151515131313131312121212121212121111110F0E0F0E0E0F0F0F0F0F0F0F0E0F0E
0E0E0B0C0B0B0B0B0A0B0A0A0A090909090908060706050605050505050505050505050404040304
03020202010101000100000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000
>
<
67686A6B6C6E6F70717374757678797A7B7C7D7E8081828384868788898B8C8E8F90919293949596
97999A9B9C9D9E9FA0A1A2A3A4A6A7A8A9A9AAACACADAEAFB0B2B3B4B5B6B7B8B9B9BABBBCBEBFC0
C1C2C3C4C5C5C6C7C8C9C9CACBCCCDCECECFD0D1D1D2D3D4D4D5D6D7D7D8D9DADADBDCDDDDDEDFDF
E0E0E1E2E2E3E4E4E5E6E7E7E8E8
>
<
02020102020101000101000001000001000001000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000010001000102000203020304030403
0405030406040607060709080908090B0A0B0D0C0D0F0E100E10121112141314161517161719181A
1B1A1C1E1D1F2120222123252527
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000
>
<
E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8
E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEEEEEEEEEEEEEEEEEE
>
<
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A
>
<
D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7
B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E
9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A898888878786858584
8383828181807F7F7E7E7D7C7C7B
>
4 %_Br
<
00000000000000000103040507080A0B0D0F101213141617181A1B1C1E1F20212223242526272829
2A2B2C2C2D2E2E2F303131323334353636373838393A3A3B3B3C3C3D3D3E3F404041424343444445
45464647474848494949494A4B4B4C4C4C4D4D4E4E4F4F5050515152525353545455555656575758
5859595A595A5A5B5C5D5D5E5E5F5F606061616262636365656666686869696B6B6C6C6E6E6F7071
7172727474767678797B7B7E7F81818383858588888A898C8B8E8E9191949497979A9C9F9EA1A1A4
A3A8A7AAA8ABABAEAEB2B2B5B5B8B9BCBFC2C3C6
>
<
E8E9E9E9EAEAEBEBEBEBECECECEDEDEDEDEDEEEEEFEFEFEFEFEFF0F0F0F0F1F1F1F2F2F2F2F2F2F2
F2F2F2F2F3F3F3F3F4F4F4F4F4F4F4F5F5F4F4F4F4F4F5F5F5F5F5F5F5F5F6F6F5F5F5F5F5F6F6F6
F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F7F6F6F6F6F6F6F7F7F7F7F6F6F6F6F7F7F7F7F6F6
F6F7F7F7F7F6F6F6F7F6F6F6F5F5F5F5F6F6F6F6F5F5F4F5F4F3F3F2F2F1F2F2F1F1F0F0EFF1F0F0
EFEFEEEEEDEEEDEDEBEAE9E8E8E8E7E7E6E6E4E6E5E5E3E3E1E1DFE1DFDEDCDBD8D8D8D7D6D6D4D4
D2D5D3D3D1D2CFCFCCCFCCCBC8C7C4C3C3C3C0BF
>
<
272629282A2A2C2B2E2E302F313134333636383739393C3B3D3D3F3E414043424443454547474949
4B4A4C4B4D4C4E4D4E4E504F515052515352545354545554555456555756575758585A595A595B5A
5B5B5C5B5C5B5D5C5D5D5E5D5E5D5F5E605F605F605F616062616261626263626463636264636463
65636463656466646564666567666866676668676967696769686A696B6A6A696B6A6C6B6D6B6D6B
6E6C6E6D706E6F6F717073727373747476767776777879797A7A7C7B7D7D7F7F8081818283838585
8686878889898B8B8E8C8E8F9191949494959797
>
<
0000000000000000000001010101010101020202020203030304040405050606070808090A0A0B0B
0C0D0E0E0F101112131415161718191A1C1D1E1F20212324252627282A2B2C2D2F30313234353637
39393B3C3D3E40404243454648494B4C4E4F5152545557585A5B5C5D5F606263656668696B6C6E6F
717274757678797A7C7D7F808283858688898B8C8E8E90919293959697989A9B9D9EA0A1A3A4A5A6
A8A9ABACADAEB0B1B3B3B5B6B8B8BBBBBDBDBFBFC1C1C3C3C5C5C7C7C9C9CBCCCECED0D0D2D2D4D4
D6D6D8D8DADADCDCDEDEDFDFE1E1E3E3E5E5E6E6
>
<
EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7
C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F
9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877
767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F
4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827
262524232221201F1E1D1C1B1A19181716151413
>
<
2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525
252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F
1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A
1A191919191919191818181818181818171717171717171616161616161615151515151515141414
141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F
0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C
>
<
7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868
676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A595958585757565655555454
53535252515150504F4F4E4E4D4D4C4C4B4B4A4A4949484847474646454544444343424241414040
3F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C
2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818
171716161515141413131212111110100F0F0E0E
>
4 %_Br
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
<
C6C5C6C6C4C4C6C7C6C6C8C9CAC9CDCCCDCBCECCCCCDCDCDCBCECDCDCCCFCECECDCFCFCECECFCFCE
CECFCFCDCFCECDCDCECDCCCCCDCCCBCBCCCBCBCACBCACACBCACAC9CBCACAC9CAC9C8C7C8C7C7C6C7
C7C6C5C6C5C4C5C4C3C2C3C3C2C1C1C1BFBFBFBFBDBDBEBDBCBCBCBABABAB9B8B7B8B6B6B5B5B4B3
B1B2B0AFAEAEADABABAAA9A8A8A6A5A4A4A3A2A1A1A09E9D9D9C
>
<
BFC2C2C5C5C8C8CCCBCFCED1D3D2D5D4D6D5D7D5D7D6D8DAD9DBDADDDCDEDDDFDFE1E3E1E3E2E3E1
E3E1E3E1E2E4E2E4E2E3E2E3E1E3E1E2E3E1E3E1E2E1E2E1E2E1E3E4E3E4E2E3E1E2E1E2E0E1E0E1
E1E0E1DFE0DFDFDEDFDDDEDFDDDEDDDDDCDDDBDCDADBDBD9DAD8D9D7D8D6D7D6D6D6D5D5D4D4D3D3
D2D2D1D1D1D0D0CECECDCDCBCBCACACAC9C9C8C8C7C7C6C6C4C4
>
<
97969694939192908F8E8E8C8A8A898887878585838381807F7E7D7B7B7A7A787876757573737171
70706F6E6D6C6B6A6A696867676665646363616160605E5E5D5C5B5A5A5858575655555453525250
4F4F4D4D4C4B4A494848464545434341413F3F3D3D3B3A39373735343232302F2D2C2B2929262523
221F1E1C1918161512110F0D0B0A070404010000000000000000
>
<
E6E5E3E2E0DEDDDBD9D7D6D4D1D0CDCCC9C7C5C3C1BFBCBAB8B6B4B2B0AEACAAA9A7A4A2A09E9B99
979592908D8B89878582807E7C79777572706E6C69676563605F5D5A58565452504D4C4947454341
3F3D3A39373533312F2D2B2928262422211F1E1C1B191716141312110F0E0D0C0B09080706050504
0403030302020201010101010000000000000000000000000000
>
<
1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30
313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D
4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B
6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E
>
<
0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E
1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F3030
30313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242
434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E
>
<
0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435
363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D
5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
>
4 %_Br
<
9C9B9A98979695939291908E8D8C8B89888786848382817F7E7D7B7A79787675747271706E6D6B6A
69686665646261605F5D5C5B595756545352504F4E4D4B4A484746444342403F3E3D3B3A39383735
3432302F2E2C2B2A29282625242221201F1D1C1B1A191816
>
<
C4C3C2C1C0BFBEBDBCBCBBBAB9B8B7B5B4B3B2B1B0AEADACABAAAAA9A8A7A6A5A4A3A3A2A1A09F9E
9D9C9B9B9A99989796969594939291908F8E8D8C8B8B8A89888786868584838281807F7E7D7C7D7C
7B7A797876757574737271706F6E6E6E6D6C6B6B6A696867
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000001000000
000000010001000100010002010201010001000201020102
>
0
<
7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5
A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6
>
<
4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273
747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798
999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF
>
<
9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2
B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5
C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0
>
4 %_Br
<
1618191A1B1C1D1F20212224252628292A2B2C2E2F303234353738393A3B3D3E3F40424344464748
4A4B4D4E4F505253545657595B5C5D5F60616264656668696A6B6D6E70717274757678797A7B7D7E
7F81828384868788898B8C8D8E90919293959697989A9B9C
>
<
6768696A6B6B6C6D6E6E6E6F707172737475757678797A7B7C7D7C7D7E7F80818283848586868788
898A8B8B8C8D8E8F90919293949596969798999A9B9B9C9D9E9FA0A1A2A3A3A4A5A6A7A8A9AAAAAB
ACADAEB0B1B2B3B4B5B7B8B9BABBBCBCBDBEBFC0C1C2C3C4
>
<
02010201020001000101020102000100010001000100000000000001000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000
>
0
<
E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BF
BEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D8C8B8A898887868584838281807F7E
>
<
AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A
89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666665
64636261605F5E5D5C5B5A59585756565554535251504F4E
>
<
D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBD
BDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAA
AAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F
>
4 %_Br
<
9C9D9D9EA0A1A1A2A3A4A4A5A6A8A8A9AAABABADAEAEAFB0B2B1B3B4B5B5B6B6B8B7B8B9BABABABC
BCBCBDBEBDBDBFBFBFBFC1C1C1C2C3C3C2C3C4C5C4C5C6C5C6C7C7C6C7C7C8C7C8C9CAC9CACACBC9
CACACBCACACBCACBCBCCCBCBCCCDCCCCCDCECDCDCECFCDCFCFCECECFCFCECECFCFCDCECECFCCCDCD
CECBCDCDCDCCCCCECBCDCCCDC9CAC9C8C6C6C7C6C4C4C6C6C5C6
>
<
C4C4C6C6C7C7C8C8C9C9CACACACBCBCDCDCECED0D0D1D1D1D2D2D3D3D4D4D5D5D6D6D6D7D6D8D7D9
D8DAD9DBDBDADCDBDDDCDDDDDEDDDFDEDDDFDEDFDFE0DFE1E0E1E1E0E1E0E2E1E2E1E3E2E4E3E4E3
E1E2E1E2E1E2E1E3E1E3E2E1E3E1E3E2E3E2E4E2E4E2E1E3E1E3E1E3E2E3E1E3E1DFDFDDDEDCDDDA
DBD9DAD8D6D7D5D7D5D6D4D5D2D3D1CECFCBCCC8C8C5C5C2C2BF
>
<
0000000000000000010404070A0B0D0F1112151618191C1E1F2223252629292B2C2D2F3032323435
3737393A3B3D3D3F3F414143434545464848494A4B4C4D4D4F4F50525253545555565758585A5A5B
5C5D5E5E606061616363646566676768696A6A6B6C6D6E6F70707171737375757678787A7A7B7B7D
7E7F808183838585878788898A8A8C8E8E8F9092919394969697
>
<
0000000000000000000000000000010101010102020203030304040505060708090B0C0D0E0F1112
13141617191B1C1E1F2122242628292B2D2F31333537393A3D3F41434547494C4D50525456585A5D
5F60636567696C6E70727577797C7E80828587898B8D90929597999B9EA0A2A4A7A9AAACAEB0B2B4
B6B8BABCBFC1C3C5C7C9CCCDD0D1D4D6D7D9DBDDDEE0E2E3E5E6
>
<
7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A696968676666656463636261
60605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A4948474746454444
43424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A2928282726
2525242322222120201F1E1D1D1C1B1A1A191817171615141413
>
<
4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C
3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A
2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A19191818
1717161616151514141313121211111110100F0F0E0E0D0D0C0C
>
<
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E
>
4 %_Br
0.775784
0.750057
0.593927
0.901884
0.07451
0.047059
0.054902
4 %_Br
[
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 87.8493 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 87.8493 Bs
0.71252 0.125399 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS
%_0.71252 0.125399 0 0 0 0.682353 0.937255 2 50 88.1542 Bs
0.299962 0 0.007843 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS
%_0.299962 0 0.007843 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs
0.71252 0.125399 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS
%_0.71252 0.125399 0 0 0 0.682353 0.937255 2 50 89.2704 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 89.6428 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 89.6428 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 90.8946 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 90.8946 Bs
0 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 91.2834 %_BS
%_0 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 91.2834 Bs
0.087251 0.403906 0.006775 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS
%_0.087251 0.403906 0.006775 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs
0 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 92.7625 %_BS
%_0 0.911681 0.151461 0.000122 0.933333 0.164706 0.482353 2 50 92.7625 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 93.1133 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 93.1133 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 94.3587 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 94.3587 Bs
0.613367 0.770535 0 0 0.494118 0.305882 0.623529 2 50 94.7866 %_BS
%_0.613367 0.770535 0 0 0.494118 0.305882 0.623529 2 50 94.7866 Bs
0.087251 0.403906 0.006775 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS
%_0.087251 0.403906 0.006775 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs
0.613367 0.770535 0 0 0.494118 0.305882 0.623529 2 50 96.3828 %_BS
%_0.613367 0.770535 0 0 0.494118 0.305882 0.623529 2 50 96.3828 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs
0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 99.929 %_BS
%_0.775784 0.750057 0.593927 0.901884 0.07451 0.047059 0.054902 2 50 99.929 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rosa radial)
(Rosa radial) 1 2 Bd
[
0
<
000002040507080A0C0D0F111214151718191B1C1C1D1F202123252628292A2C2D2E303031333436
37383A3B3B3C3E3F4042434444454748494B4C4C4D4E505152525455565757595A5B5C5C5E5F6061
61626465666667686A6A6B6C6D6D6F7071717273747476777778797A7A7B7D7C7E7F7F8081818283
838485858687878889898A8B8B8C8E8E8F8F9091919292939494959596989899999A9C9C9D9D9E9E
9F9FA0A1A1A1A1A2A2A3A3A4A4A5A5A5A5A6A6A7A7A8A8AAAAABABACACADADAEAEAEAFAFB0B0B1B1
B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B8B9B9B9BABABBBBBBBCBCBCBCBCBCBCBDBDBDBE
BEBEBFBFBFBFC0C0C0C0C0C0C0C1C1C1C1C2C2C2C2C3C3C3C3C3C4C4C4C4C4C5C5C5C5C5C5C6C6C6
C6C6C6C7C7C7C7C7C7C7C6C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C8
>
<
0000010102030405050607080808090A0A0B0B0C0E0E0F10100F1011111212131415161617171819
1A1B1B1A1C1C1D1D1E1E1D1E2020212121212224242324252628272829292B2A2B2B2C2E2D2D2E2F
2F2F303130313233323434353436363536383938393B3A3B3D3C3D3D3F3E3F414040424142444344
464546464647474849494A4B4B4C4B4D4E4E4F4E505151515052515354535554565556585759585A
595B5B5C5C5D5D5E5E5F5F6060616162626363646465656666676768686969686A6A6B6B6C6C6C6E
6E6F6F6E706F717170727173737274737575747575757676767877777978787A79797B7B7A7A7C7C
7C7E7D7D7F7F7E7E807F7F7F81818181828181818182828282848383838385858585858586868686
8686888787878787878789898989898989898989898A8A8A8A8A8A8A8A8A8A8A8A8A8A
>
0
1
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDA
D9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8
B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B
9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A898888878786858584848383
82828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F
6F6E6E6D6D6C6C6C6B6B6A6A6A696968686867676766666665656464646363636262626261616160
60605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A5959595959585858585858575757
5757575656565656565656555555555555555555555454545454545454545454545454
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDB
DAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBA
BAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E
9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786
868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A797978787777777676757574747473
7372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A696969686868676767666666666565
6564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C
5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959
>
4 %_Br
[
0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS
%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs
0 0.784207 0.541497 0 1 0.329412 0.34902 2 50 100 %_BS
%_0 0.784207 0.541497 0 1 0.329412 0.34902 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Schwarz\774bergang zu Kante)
(Schwarz\774bergang zu Kante) 0 3 Bd
[
0.720851
0.673426
0.586358
0.790768
0.137255
0.121569
0.12549
4 %_Br
0.720851
0.673426
0.586358
0.790768
0.137255
0.121569
0.12549
4 %_Br
[
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 100 %_BS
%_0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 100 Bs
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 50 %_BS
%_0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 50 Bs
0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 0 %_BS
%_0.720851 0.673426 0.586358 0.790768 0.137255 0.121569 0.12549 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 11)
(Unnamed gradient 11) 0 3 Bd
[
0
<
A7A7A8A7A8A8A9A9AAAAAAABABACACADADADAEAEAFAFB0B0B1B1B1B2B2B3B3B4B3B4B4B4B5B5B6B6
B7B7B7B8B8B9B9BABABABABABBBBBCBCBDBDBEBEBEBEBEBFBFC0C0C0C1C1C2C1C2C2C3C3
>
<
090B0C0E0F1112141517191A1C1D1F2022242527282A2B2D2E303233353638393B3C3E4041434649
4A4C4E4F5152545557585A5C5D5F6061636566686A6B6D6E707173757678797B7C7E7F81
>
0
1
<
7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A
69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A
>
<
ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584
838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
>
4 %_Br
0
<
8282828484848484848585858585868787878787878888888888898A8A8A8A8A8A8C8C8C8C8C8C8D
8D8D8E8E8E8F8F8F8F8F8F9191919191919393939393939495959595959696979797989898999999
9A9A9A9A9A9A9C9C9C9C9C9C9D9D9D9D9D9D9E9E9F9F9F9FA0A0A0A0A0A0A1A1A1A1A1A1A2A2A2A2
A2A2A3A3A3A3A3A3A4A4A4A4A4A4A5A5A5A5A5A5A7A7A7
>
<
E1E1E0DFDFDEDDDDDCDBDAD9D8D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C3C2C1C0BFBEBD
BCBBB9B8B6B5B4B3B2B1B0AFAEACABAAA9A7A5A4A2A1A09E9D9C9A999796949392908F8D8B8A8886
8482817F7E7C7A78777573716F6D6C6A68666362605E5D5B5957555352504D4B49474543403E3C3A
38373432302E2C2A272523211F1D1B18161412100D0B09
>
0
1
<
9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C
8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A8989898989898888888888888787878787868686868686
8585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F
7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B
>
<
1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445
464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D
6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495
969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC
>
4 %_Br
[
0 0.764614 0.505638 0 1 0.352941 0.376471 2 50 100 %_BS
%_0 0.764614 0.505638 0 1 0.352941 0.376471 2 50 100 Bs
0 0.654047 0.033753 0 1 0.482353 0.67451 2 50 61.7977 %_BS
%_0 0.654047 0.033753 0 1 0.482353 0.67451 2 50 61.7977 Bs
0 0.510887 0.883848 0 1 0.576471 0.117647 2 50 0 %_BS
%_0 0.510887 0.883848 0 1 0.576471 0.117647 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 139)
(Unnamed gradient 139) 1 2 Bd
[
0
0
0
0
1
1
1
4 %_Br
[
0 0 0 0 1 1 1 2 87 36.6667 %_BS
%_0 0 0 0 1 1 1 2 87 36.6667 Bs
0 0 0 0 1 1 1 2 50 100 %_BS
%_0 0 0 0 1 1 1 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 2 Bd
[
<
0000010304050608090B0C0D0F1011121314151718191A1B1C1E1F21222324252728292A2B2C2D2E
2F3031323435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5050515253545556
5758595A5B5C5D5D5E5F5F6061626263646565666768696A6A6B6C6E6F7070717273747475767777
78797A7A7B7C7D7E7E7F808181828383848585868687888889898A8B8B8C8D8D8E8F8F9090919292
93949495959697979899999A9B9B9C9C9D9E9E9F9FA0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABABACAD
ADAEAFB0B0B1B1B2B3B4B4B5B6B6B7B8B9B9BABBBCBDBDBEBFBFC0C1C1C2C3C4C5C6C7C8C9C9CACC
CED0D1D2D4D5D7D8DADCDEE0E3E5E7E9
>
<
00000102030405060708090A0A0B0C0C0D0E0F1011111213141516171819191A1B1B1C1D1E1F2020
2122232425262728292A2B2C2C2D2E2E2F303131323334353637373839393A3B3C3C3D3E3E3F4041
424243444546474748494A4B4B4C4D4D4E4E4F4F505152525354555657575859595A5B5B5C5C5D5D
5E5F5F60616162636364656667676869696A6A6B6C6C6D6E6E6F6F70707172727374747576767778
79797A7B7C7C7D7E7F7F80808182828384858586878888898A8A8B8C8C8D8E8E8F90919192939494
959697979898999A9B9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A7A8A9AAABACADAEAFB0B1B1B2B3
B5B6B7B8B9BABCBDBEC0C1C3C4C6C7C9
>
<
000001020304050708090A0B0C0D0E0F10111112131415161718191A1B1C1C1D1E1F202121222323
2425262728292A2B2C2D2D2E2F2F3031323233343536373738393A3B3B3C3D3D3E3F404041424243
44444546464748494A4A4B4C4D4D4E4E4F505051515253535454555657575859595A5B5B5C5C5D5D
5E5F5F606161626263636465656667676869696A6A6B6C6C6D6D6E6F6F7070717272737474757676
777778787879797A7B7B7C7D7D7E7E7F7F80808181828283838485858687878888898A8A8B8C8C8D
8D8E8E8E8F8F8F909091919293939494959596969798989999999A9A9B9B9B9B9C9C9C9C9C9D9D9D
9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000001
01010101010101020202020202030303040404050506060607070808080909090A0A0A0B0B0C0C0D
0D0E0F0F1011121213131414151616171819191A1B1B1C1D1E1E1F202122232425262728292A2B2C
2D2E2E2F3031323435363738393A3B3D3E3F40414344454647494A4B4C4E4F505253555658595B5C
5E5F6162646567686A6B6D6F7072737577787A7B7D7F8082848688898B8D8F91939496989A9C9E9F
A1A3A5A6A7A9AAACAEB0B2B3B5B7B9BBBDBFC1C3C5C7C9CACBCDCED0D1D3D5D7D9DADCDEDFE1E2E4
E5E7E8E9E9EBECEDEEF0F1F3F4F6F7F9
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
4 %_Br
[
0.912474 0.787625 0.619837 0.97467 0 0 0 2 50 100 %_BS
%_0.912474 0.787625 0.619837 0.97467 0 0 0 2 50 100 Bs
0 0 0 0 1 1 1 2 50 0 %_BS
%_0 0 0 0 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Wasser)
(Wasser) 0 5 Bd
[
<
CECECFCFD0D0D1D1D1D2D2D3D3D4D4D5D5D6D6D7D7D7D8D8D9D9DADBDB
>
<
454648494A4C4D4C4D4E4F51525354555657595A5B5A5C5D5E5F616263
>
<
3D3D3E3E3F3F3F41424243434444444647474849494B4B4C4C4D4D4E4E
>
<
0E0F0F1011111213141415161717181A1A1B1C1D1D1E1F202121222324
>
0
<
8A89888786858484838281807F7E7D7C7B7A7978777776757473727170
>
<
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C
>
4 %_Br
<
BABBBBBCBCBDBDBEBEBEBFBFC0C0C1C1C2C3C3C4C4C4C5C5C6C6C6C7C7C7C8C8C8C9C9CACACACBCB
CBCCCCCDCDCDCE
>
<
0F111212141517191A1A1C1D1F2122222426282A2B2B2C2E2F303031333435373638393A3C3D3D3E
3F414243434445
>
<
1A1B1C1D1E1E1F202022222323242527272829292A2C2C2D2F2F3132323333333536363737373939
3A3A3A3B3C3D3D
>
<
0000000000000000000000000001010101010202020203030404040405050606070708080909090A
0B0B0C0C0D0E0E
>
0
<
B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A999897969695949392919190
8F8E8D8C8C8B8A
>
<
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9
>
4 %_Br
<
828384858586878888898A8B8B8C8D8E8E8F9090919192939394949595969697979899999A9A9B9B
9C9C9D9D9E9E9F9FA0A0A1A1A1A2A3A3A3A4A4A5A5A5A6A7A7A8A8A9A9AAAAABABACACACACADAEAE
AEAFAFB0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B4B5B5B5B5B5B6B6B6B6B6B7B7B7B7B8B8B8B8B9B9B9
B9BABABABABABA
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000010101010303020204040403050505050606060608080808090909090B0B0B0A0C0C0C
0C0E0E0D0D0F0F
>
<
171716161819181818181718191A1919191918191A1B1A1A1A1A191A1B1B1B1B1B1B1A1A1C1C1B1B
1B1B1A1B1C1C1B1B1C1C1B1B1C1D1B1C1C1C1B1B1D1D1C1C1C1B1B1D1D1C1C1C1C1B1B1D1D1C1C1C
1C1C1C1D1D1C1C1D1D1C1C1D1D1C1C1C1C1B1B1D1D1C1C1C1C1B1B1C1C1B1B1B1B1A1A1C1C1B1B1B
1B1A1A1B1B1A1A
>
0
<
7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958
57565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F
2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807
06050403020100
>
<
D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6
C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBC
BCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2
B2B1B1B1B1B0B0
>
<
E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3
E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDE
DEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9
D9D9D9D8D8D8D8
>
4 %_Br
<
0000010304050708090A0C0D0E10111314151718191B1C1D1E1F2021222324262728292A2B2C2D2E
2F30323334353637393A3B3C3D3F40414243444546474849494A4B4D4D4E4F505152535455565758
585A5A5B5C5D5E5F606162636465666768696A6B6C6C6D6E6F7071727373747576777878797A7A7B
7C7D7E7F8080818282
>
0
<
000000010101010101030303030305040405040507060607060607080807080909090909090A0A0A
0A0A0C0B0B0A0B0B0C0C0D0C0C0E0E0E0D0E0E0F0F0F0E0F0F10100F0F1010111110101011121111
12121213121211131313131314141314141315151414141515141515141616151516151716161615
171716171616181717
>
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F
>
<
FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1
F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2
E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3
D3D3D2D2D1D1D1D0D0
>
<
FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8
F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1
F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEA
E9E9E9E9E9E9E8E8E8
>
4 %_Br
[
0.85977 0.390143 0.306096 0.14078 0 0.439216 0.54902 2 50 98.8764 %_BS
%_0.85977 0.390143 0.306096 0.14078 0 0.439216 0.54902 2 50 98.8764 Bs
0.807156 0.271885 0.239567 0.055909 0 0.541176 0.662745 2 50 77.5281 %_BS
%_0.807156 0.271885 0.239567 0.055909 0 0.541176 0.662745 2 50 77.5281 Bs
0.730861 0.059144 0.103548 0 0 0.690196 0.847059 2 50 52.2472 %_BS
%_0.730861 0.059144 0.103548 0 0 0.690196 0.847059 2 50 52.2472 Bs
0.511192 0 0.090242 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS
%_0.511192 0 0.090242 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs
0 0 0 0 1 1 1 2 50 0 %_BS
%_0 0 0 0 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Rautenw\774rfel)
(Rautenw\774rfel) 6.5605 11.3652 85.3018 79.5596 [
%AI3_Tile
(0 O 0 R 0.198489 0.180606 0.292912 0.019104 0.827451 0.792157 0.717647 Xa
 0.198489 0.180606 0.292912 0.019104 0.827451 0.792157 0.717647 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
45.9316 56.8281 m
39.3691 45.4609 L
26.2471 45.4609 L
32.8066 56.8281 L
45.9316 56.8281 L
f
45.9316 34.0957 m
39.3691 22.7305 L
26.2471 22.7305 L
32.8066 34.0957 L
45.9316 34.0957 L
f
65.6162 22.7305 m
59.0537 11.3652 L
45.9316 11.3652 L
52.4932 22.7305 L
65.6162 22.7305 L
f
65.6162 45.4609 m
59.0537 34.0977 L
45.9316 34.0977 L
52.4932 45.4609 L
65.6162 45.4609 L
f
26.2471 22.7305 m
19.6846 11.3652 L
6.5605 11.3652 L
13.123 22.7305 L
26.2471 22.7305 L
f
26.2471 45.4609 m
19.6846 34.0977 L
6.5605 34.0977 L
13.123 45.4609 L
26.2471 45.4609 L
f
45.9316 79.5586 m
39.3691 68.1924 L
26.2471 68.1924 L
32.8066 79.5586 L
45.9316 79.5586 L
f
65.6162 68.1934 m
59.0537 56.8281 L
45.9316 56.8281 L
52.4932 68.1924 L
65.6162 68.1934 L
f
85.3018 56.8281 m
78.7402 45.4609 L
65.6162 45.4609 L
72.1777 56.8281 L
85.3018 56.8281 L
f
85.3018 34.0957 m
78.7402 22.7305 L
65.6162 22.7305 L
72.1777 34.0957 L
85.3018 34.0957 L
f
85.3018 79.5586 m
78.7402 68.1924 L
65.6162 68.1924 L
72.1777 79.5586 L
85.3018 79.5586 L
f
26.2471 68.1924 m
19.6846 56.8281 L
6.5605 56.8281 L
13.123 68.1924 L
26.2471 68.1924 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.500023 0.363867 0.214908 0.047211 0.54902 0.584314 0.67451 Xa
 0.500023 0.363867 0.214908 0.047211 0.54902 0.584314 0.67451 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
26.2471 68.1924 m
19.6846 56.8281 L
26.2471 45.4609 L
32.8066 56.8281 L
26.2471 68.1924 L
f
26.2471 45.4609 m
19.6846 34.0957 L
26.2471 22.7305 L
32.8066 34.0957 L
26.2471 45.4609 L
f
26.2471 22.7305 m
19.6846 11.3652 L
26.2471 0 L
32.8066 11.3652 L
26.2471 22.7305 L
f
45.9316 34.0957 m
39.3691 22.7305 L
45.9316 11.3652 L
52.4932 22.7305 L
45.9316 34.0957 L
f
45.9316 56.8281 m
39.3691 45.4609 L
45.9316 34.0977 L
52.4932 45.4609 L
45.9316 56.8281 L
f
6.5605 34.0957 m
0 22.7305 L
6.5605 11.3652 L
13.123 22.7305 L
6.5605 34.0957 L
f
6.5605 56.8281 m
0 45.4609 L
6.5605 34.0977 L
13.123 45.4609 L
6.5605 56.8281 L
f
26.2471 90.9238 m
19.6846 79.5586 L
26.2471 68.1924 L
32.8066 79.5586 L
26.2471 90.9238 L
f
45.9316 79.5586 m
39.3691 68.1924 L
45.9316 56.8281 L
52.4932 68.1924 L
45.9316 79.5586 L
f
65.6162 68.1924 m
59.0537 56.8281 L
65.6162 45.4609 L
72.1777 56.8281 L
65.6162 68.1924 L
f
65.6162 45.4609 m
59.0537 34.0957 L
65.6162 22.7305 L
72.1777 34.0957 L
65.6162 45.4609 L
f
65.6162 22.7305 m
59.0537 11.3652 L
65.6162 0 L
72.1777 11.3652 L
65.6162 22.7305 L
f
85.3018 34.0957 m
78.7402 22.7305 L
85.3018 11.3652 L
91.8643 22.7305 L
85.3018 34.0957 L
f
85.3018 56.8281 m
78.7402 45.4609 L
85.3018 34.0977 L
91.8643 45.4609 L
85.3018 56.8281 L
f
65.6162 90.9238 m
59.0537 79.5586 L
65.6162 68.1924 L
72.1777 79.5586 L
65.6162 90.9238 L
f
85.3018 79.5586 m
78.7402 68.1924 L
85.3018 56.8281 L
91.8643 68.1924 L
85.3018 79.5586 L
f
6.5605 79.5576 m
0 68.1924 L
6.5605 56.8281 L
13.123 68.1924 L
6.5605 79.5576 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat 1)0 A
u
0 J 0 j 1 w 10 M []0 d0 XR
-7679 7933.3335 m
-7621 7933.3335 L
-7621 7929 L
-7679 7929 L
-7679 7933.3335 L
n
1 Ap
0 O
1 0.994446 0.359533 0.344518 0.137255 0.109804 0.309804 Xa
-7621 7931.1675 m
-7621 7932.3633 -7633.9839 7933.3335 -7650 7933.3335 c
-7657.2285 7933.3335 -7663.8394 7933.1357 -7668.9175 7932.8086 c
-7675.0913 7932.4111 -7679 7935 -7679 7931.1675 c
-7679 7927.25 -7675.0928 7929.9219 -7668.9209 7929.5244 c
-7663.8423 7929.1973 -7657.23 7929 -7650 7929 c
-7633.9839 7929 -7621 7929.9697 -7621 7931.1675 c
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ Flach - 5 Pt./ Adobe ArtOnPath) -
( Brush Tool/ Bildpinsel 1/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(Flach - 5 Pt.)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Bildpinsel 1)
(1 / Unnamed Brush Pat 1/ / / / / 5 0.137255 0.109804 0.309804 ) -
(/  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.912474 0.787625 0.619837 0.97467 ([Passermarken]) 0 Xs
([Passermarken])
Pc
0 0 0 0 1 1 1 Xa
(Wei\737)
Pc
0.912474 0.787625 0.619837 0.97467 0 0 0 Xa
(Schwarz)
Pc
0 0.94641 0.916289 0 1 0 0 Xa
(RGB Rot)
Pc
0.096254 0 0.951965 0 1 1 0 Xa
(RGB Gelb)
Pc
0.647547 0 1 0 0 1 0 Xa
(RGB Gr\774n)
Pc
0.570733 0 0.153567 0 0 1 1 Xa
(RGB Cyan)
Pc
0.934081 0.745846 0 0 0 0 1 Xa
(RGB Blau)
Pc
0.409979 0.77676 0 0 1 0 1 Xa
(RGB Magenta)
Pc
0.168978 0.950286 0.823636 0.068666 0.756863 0.152941 0.176471 Xa
(R=193 G=39 B=45)
Pc
0 0.946624 0.85211 0 0.929412 0.109804 0.141176 Xa
(R=237 G=28 B=36)
Pc
0 0.752956 0.887388 0 0.945098 0.352941 0.141176 Xa
(R=241 G=90 B=36)
Pc
0 0.501823 0.907988 0 0.968627 0.576471 0.117647 Xa
(R=247 G=147 B=30)
Pc
0 0.365637 0.819852 0 0.984314 0.690196 0.231373 Xa
(R=251 G=176 B=59)
Pc
0.065736 0 0.852628 0 0.988235 0.933333 0.129412 Xa
(R=252 G=238 B=33)
Pc
0.231907 0 0.892332 0 0.85098 0.878431 0.129412 Xa
(R=217 G=224 B=33)
Pc
0.524254 0 0.880919 0 0.54902 0.776471 0.247059 Xa
(R=140 G=198 B=63)
Pc
0.718288 0 0.876951 0 0.223529 0.709804 0.290196 Xa
(R=57 G=181 B=74)
Pc
0.842954 0.14374 0.926757 0.021576 0 0.572549 0.270588 Xa
(R=0 G=146 B=69)
Pc
0.899077 0.322972 0.925994 0.247654 0 0.407843 0.215686 Xa
(R=0 G=104 B=55)
Pc
0.735958 0 0.689784 0 0.133333 0.709804 0.45098 Xa
(R=34 G=181 B=115)
Pc
0.766171 0.045533 0.450782 0 0 0.662745 0.615686 Xa
(R=0 G=169 B=157)
Pc
0.709987 0.132143 0.001953 0 0.160784 0.670588 0.886275 Xa
(R=41 G=171 B=226)
Pc
0.866178 0.492958 0 0 0 0.443137 0.737255 Xa
(R=0 G=113 B=188)
Pc
0.975586 0.89572 0 0.000824 0.180392 0.192157 0.572549 Xa
(R=46 G=49 B=146)
Pc
1 0.96997 0.322484 0.218753 0.105882 0.078431 0.392157 Xa
(R=27 G=20 B=100)
Pc
0.755703 0.923125 0 0.000031 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
0.5393 0.930297 0 0 0.576471 0.152941 0.560784 Xa
(R=147 G=39 B=143)
Pc
0.323583 1 0.236301 0.1673 0.619608 0 0.364706 Xa
(R=158 G=0 B=93)
Pc
0.097993 0.983551 0.407263 0.020691 0.831373 0.078431 0.352941 Xa
(R=212 G=20 B=90)
Pc
0 0.935058 0.142763 0 0.929412 0.117647 0.47451 Xa
(R=237 G=30 B=121)
Pc
0.220859 0.272648 0.389227 0.061189 0.780392 0.698039 0.6 Xa
(R=199 G=178 B=153)
Pc
0.354864 0.386694 0.466072 0.211734 0.6 0.52549 0.458824 Xa
(R=153 G=134 B=117)
Pc
0.446387 0.47068 0.52636 0.380346 0.45098 0.388235 0.341176 Xa
(R=115 G=99 B=87)
Pc
0.535302 0.542443 0.552728 0.542199 0.32549 0.278431 0.254902 Xa
(R=83 G=71 B=65)
Pc
0.204685 0.376715 0.593042 0.084871 0.776471 0.611765 0.427451 Xa
(R=198 G=156 B=109)
Pc
0.280308 0.462287 0.671046 0.207126 0.65098 0.486275 0.321569 Xa
(R=166 G=124 B=82)
Pc
0.324376 0.536675 0.760494 0.329229 0.54902 0.384314 0.223529 Xa
(R=140 G=98 B=57)
Pc
0.359228 0.605188 0.857359 0.451545 0.458824 0.298039 0.141176 Xa
(R=117 G=76 B=36)
Pc
0.391424 0.683131 0.943023 0.57116 0.376471 0.219608 0.07451 Xa
(R=96 G=56 B=19)
Pc
0.474617 0.7467 0.825315 0.730831 0.258824 0.129412 0.043137 Xa
(R=66 G=33 B=11)
Pc
Bb
2 (Schwarz\774bergang zu Kante) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Schwarz\774bergang zu Kante)
Pc
Bb
0 0 0 0 Bh
2 (Neonring-Vignette) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Neonring-Vignette)
Pc
Bb
2 (Wasser) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Wasser)
Pc
Bb
0 0 0 0 Bh
2 (Rosa radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Rosa radial)
Pc
(Rautenw\774rfel) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Rautenw\774rfel)
Pc
0.912474 0.787625 0.619837 0.97467 0 0 0 Xa
(R=0 G=0 B=0)
Pc
0.762295 0.667414 0.60705 0.828763 0.101961 0.101961 0.101961 Xa
(R=26 G=26 B=26)
Pc
0.690578 0.595209 0.559747 0.655817 0.2 0.2 0.2 Xa
(R=51 G=51 B=51)
Pc
0.620386 0.5234 0.503532 0.47776 0.301961 0.301961 0.301961 Xa
(R=77 G=77 B=77)
Pc
0.559442 0.453803 0.448554 0.326848 0.4 0.4 0.4 Xa
(R=102 G=102 B=102)
Pc
0.492378 0.386633 0.38529 0.202182 0.501961 0.501961 0.501961 Xa
(R=128 G=128 B=128)
Pc
0.410864 0.319738 0.323857 0.110109 0.6 0.6 0.6 Xa
(R=153 G=153 B=153)
Pc
0.32575 0.244968 0.255344 0.043549 0.701961 0.701961 0.701961 Xa
(R=179 G=179 B=179)
Pc
0.231479 0.170962 0.180972 0.008301 0.8 0.8 0.8 Xa
(R=204 G=204 B=204)
Pc
0.11664 0.082246 0.092653 0 0.901961 0.901961 0.901961 Xa
(R=230 G=230 B=230)
Pc
0.062196 0.043153 0.05127 0 0.94902 0.94902 0.94902 Xa
(R=242 G=242 B=242)
Pc
0.663355 0.223545 0 0 0.247059 0.662745 0.960784 Xa
(R=63 G=169 B=245)
Pc
0.570642 0 0.870939 0 0.478431 0.788235 0.262745 Xa
(R=122 G=201 B=67)
Pc
0 0.510887 0.883848 0 1 0.576471 0.117647 Xa
(R=255 G=147 B=30)
Pc
0 0.917174 0.796658 0 1 0.113725 0.145098 Xa
(R=255 G=29 B=37)
Pc
0 0.654047 0.033753 0 1 0.482353 0.67451 Xa
(R=255 G=123 B=172)
Pc
0.305303 0.140902 0.144472 0.002777 0.741176 0.8 0.831373 Xa
(R=189 G=204 B=212)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 4 255 255 79 0 50 Lb
(layer0) Ln
0 A
0 O
0 J 0 j 1 w 10 M []0 d0 XR
1024 -512 m
0 -512 L
0 0 L
1024 0 L
1024 -512 L
Bb
1 (Unnamed gradient 39) 512.0005 -512 90 511.9995 1 0 0 1 0 0 Bg
-0.000022 511.9995 1028 0.000045 -2 -512 Xm
-0.000358 8194.001 1028 0.000045 -1.99951 -8706 Bc
-0.000022 511.9995 1028 0.000045 -2 -512 Bm
-0.000358 8194.001 1028 0.000045 -2 -0.000488 Bc
f
0 BB
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 3 79 79 255 0 50 Lb
(layer1) Ln
0 A
0 Ap
0 O
0.931975 0.60647 0.195651 0.046113 0.039216 0.356863 0.564706 Xa
0 J 0 j 1 w 10 M []0 d0 XR
979.6445 -406.2129 m
952.1279 -405.3008 949.0391 -400.5947 921.4717 -400.4443 c
902.4287 -400.3398 879.3848 -401.0742 846.9941 -401.0742 c
814.5723 -401.0742 791.8486 -406.3291 772.7871 -406.8447 c
772.4561 -406.8535 772.1396 -406.8477 771.8115 -406.8545 C
766.334 -391.667 L
733.334 -394 L
718.5928 -401.9844 L
711.9609 -401.3447 705.0869 -400.9609 697.6621 -401.1611 c
678.6016 -401.6768 656.0752 -411.9502 623.6543 -411.9502 c
591.2344 -411.9502 568.6133 -402.6953 549.5527 -402.1797 c
522.0234 -401.4355 502.5195 -402.623 474.9902 -401.8789 c
455.9297 -401.3633 432.7451 -406.7168 400.3262 -406.7168 c
369.7119 -406.7168 347.6855 -405.6807 329.2769 -405.998 C
323.1362 -402.9795 314.5879 -398.877 310.9453 -397.5996 C
309.5996 -398.8623 307.584 -400.4102 305.3872 -401.9795 C
300.1318 -397.0498 294.1362 -391.127 291 -387 C
284.5229 -388.9189 267.5151 -396.5352 258.4883 -400.6553 C
256.0283 -400.6035 253.5322 -400.5879 250.9531 -400.6572 c
231.8926 -401.1738 209.4141 -406.9316 176.9951 -406.9316 c
144.5684 -406.9316 111.1152 -401.3604 91.9902 -400.4346 c
64.4521 -399.1006 0 -404.9521 Y
0 -512 L
1024 -512 L
1024 -404.9521 L
998.6523 -406.8418 979.6445 -406.2129 v
f
407.5 -401.167 m
428.3335 -409.833 l
430.3335 -406.667 l
408.5 -397 l
407.5 -401.167 l
f
416.4463 -396.3398 m
434.394 -410.0156 l
437.1328 -407.4609 l
418.4722 -392.5635 l
416.4463 -396.3398 l
f
*u
1 D
608.5703 -318.458 m
603.1455 -314.7256 L
617.001 -297.1836 L
620.668 -290.75 L
615.332 -295.168 L
614.918 -292.25 L
611.3242 -294.0479 L
596.5498 -312.0381 L
593.5439 -310.8438 592.627 -312.0381 v
591.71 -313.2324 595.0469 -314.6504 Y
584.8623 -330.5508 582.4424 -329.1328 v
580.0225 -327.7148 579.2715 -330.5508 579.9395 -331.2227 c
580.6064 -331.8945 584.8623 -336.0752 583.2773 -334.7314 c
581.6914 -333.3877 578.334 -334.166 Y
547.5508 -330.9248 L
531.6064 -336.374 L
526.4326 -336.8213 L
517.666 -339.957 L
517.166 -348.9141 L
511.4893 -357.0508 L
512.2412 -357.7979 L
513.3262 -356.9023 L
513.5771 -358.6182 L
511.0723 -360.2617 L
512.0752 -362.6494 L
515.0801 -361.9033 L
515.9141 -366.3818 L
517.583 -366.6807 L
516.4141 -361.3057 L
520.9229 -363.5449 L
530.4385 -364.1426 L
527.0986 -368.0244 L
528.7695 -369.3682 L
527.4326 -370.8613 L
529.9385 -371.6074 L
526.4326 -377.8779 L
507.0859 -390.0859 L
502.4121 -386.2051 L
498.4043 -387.9961 L
496.0674 -380.9795 L
492.8955 -378.8887 L
468.835 -403.1094 L
589.6221 -406.6182 L
595.3809 -392.4355 598.6377 -370.4131 597.9688 -363.3965 c
597.3008 -356.3799 591.542 -339.5088 Y
594.9639 -340.1807 L
596.3008 -338.2393 L
594.6299 -337.1201 L
605.5654 -322.6377 L
608.8213 -322.9365 L
609.4883 -321.4434 L
608.2363 -320.25 L
608.5703 -318.458 L
f
0 D
530.5215 -337.9033 m
534.1123 -337.2695 L
546.7988 -333.0889 L
550.1387 -336.8594 L
529.1865 -343.9873 L
524.6787 -338.9492 L
530.5215 -337.9033 L
f
514.9121 -357.6855 m
513.4922 -356.3428 L
518.376 -349.5488 L
518.585 -341.002 L
522.9668 -339.583 L
527.6846 -345.1074 L
520.5049 -347.6826 L
517.5 -354.5137 L
518.5029 -354.625 L
521.4229 -348.4668 L
527.9766 -346.0771 L
530.7725 -349.1387 L
514.9121 -357.6855 L
f
532.2754 -348.4287 m
529.6045 -345.5176 L
551.0146 -337.6055 L
553.6025 -340.2188 L
532.2754 -348.4287 L
f
554.6465 -339.3965 m
552.8926 -337.2695 L
562.7422 -338.0156 L
554.6465 -339.3965 L
f
565.4141 -337.0459 m
551.5996 -335.8877 L
548.0918 -332.5293 L
551.5996 -332.4541 L
573.6777 -334.9922 L
565.4141 -337.0459 L
f
*U
562.5 -416.5 m
583.25 -395.25 l
603 -400.5 l
610.5 -392 l
620.25 -393.75 l
630.25 -404.25 l
644.5 -406.75 l
662.25 -423.75 l
562.5 -416.5 l
f
393.5659 -391.4961 m
390.5474 -389.2832 L
396.02 -386.3916 L
389.9878 -381.9473 L
399.04 -372.6133 L
355.8267 -366.7959 L
351.8706 -320.0293 L
350.1489 -318.1279 L
349.3477 -320.1934 L
348.144 -319.5898 L
351.957 -366.2754 L
310.6855 -360.7197 L
293.3462 -353.6465 L
292.9258 -357.3408 L
308.9761 -368.6865 L
310.1245 -375.5117 318.2041 -395.4189 v
326.2847 -415.3252 363.4214 -414.2246 Y
387.7163 -415.3594 L
388.6104 -411.2217 L
381.0459 -408.1563 L
392.7861 -407.4336 L
388.5513 -405.3262 L
388.2646 -401.6865 L
394.3286 -401.209 L
396.1357 -398.3193 L
390.4043 -397.8516 L
393.5659 -391.4961 L
f
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 5 255 79 255 0 50 Lb
(layer2) Ln
0 A
0 O
1 0.80322 0.332799 0.215671 0.05098 0.219608 0.4 Xa
0 J 0 j 1 w 10 M []0 d0 XR
0 -424.9521 m
25.3477 -426.8418 44.3555 -426.2129 v
71.8721 -425.3008 74.9609 -420.5947 102.5283 -420.4443 c
121.5713 -420.3398 144.6152 -421.0742 177.0059 -421.0742 c
209.4277 -421.0742 232.1514 -426.3291 251.2129 -426.8447 c
278.7432 -427.5889 298.8076 -420.417 326.3379 -421.1611 c
345.3984 -421.6768 367.9248 -431.9502 400.3457 -431.9502 c
432.7656 -431.9502 455.3867 -422.6953 474.4473 -422.1797 c
501.9766 -421.4355 521.4805 -422.623 549.0098 -421.8789 c
568.0703 -421.3633 591.2549 -426.7168 623.6738 -426.7168 c
656.0947 -426.7168 678.8896 -425.5527 697.9502 -426.0674 c
725.4795 -426.8125 745.5176 -419.9131 773.0469 -420.6572 c
792.1074 -421.1738 814.5859 -426.9316 847.0049 -426.9316 c
879.4316 -426.9316 912.8848 -421.3604 932.0098 -420.4346 c
959.5479 -419.1006 1024 -424.9521 Y
1024 -511.9893 L
1018.1768 -510.9775 8.18262 -512.1191 0 -511.9893 C
0 -424.9521 L
f
*u
531.4219 -425.2256 m
531.5791 -424.4941 531.2686 -425.9502 531.4219 -425.2256 C
531.4219 -425.2256 L
f
1 D
539.9395 -411.4229 m
539.167 -409.0449 538.8506 -406.4238 538.9951 -403.9463 c
539.1035 -402.3955 540.9629 -398.4561 537.8789 -398.7539 c
535.2148 -399.0107 536.9512 -401.9502 536.5039 -403.6348 c
535.7676 -406.4072 535.9434 -409.5566 536.7695 -412.291 c
537.6563 -415.2236 538.6055 -417.9463 538.6309 -421.0381 c
538.6367 -421.75 538.2227 -427.6553 539.7217 -427.5146 c
539.9521 -427.4941 540.1172 -427.0674 540.2715 -426.3428 c
541.4297 -420.9297 541.6738 -416.7598 539.9395 -411.4229 c
f
534.3047 -422.2773 m
534.2529 -422.4443 534.208 -422.5996 534.1621 -422.7578 C
534.2881 -422.3799 534.498 -421.7275 534.3047 -422.2773 c
f
537.8789 -425.167 m
537.8447 -425.3359 537.8154 -425.4961 537.7871 -425.6533 c
537.8369 -425.4248 537.9902 -424.6699 537.8789 -425.167 c
f
535.6455 -415.0537 m
535.0791 -413.1484 535.373 -411.7041 535.3105 -409.8223 c
535.2813 -408.4941 532.3809 -409.0166 532.0664 -409.8555 c
531.8184 -410.5205 532.5176 -412.5791 532.4746 -413.4355 c
532.3926 -415.085 532.7031 -416.8193 533.3604 -418.3496 c
533.9443 -419.7109 536.1328 -428.1377 537.0391 -427.9551 c
537.46 -427.8721 537.5527 -426.959 537.7871 -425.6533 c
537.7588 -425.7861 537.7637 -425.7422 537.8789 -425.167 c
538.7285 -421.3838 536.6719 -418.5215 535.6455 -415.0537 c
f
559.1572 -418.8955 m
559.1582 -416.8613 561.1504 -412.4063 558.5049 -412.3926 c
555.998 -412.3584 557.0078 -414.1074 556.4375 -416.0439 c
556 -417.5254 555.8359 -418.8301 555.8984 -420.3887 C
555.9023 -421.751 555.1836 -428.0254 556.0732 -428.1475 c
556.5488 -428.2109 557 -427.3525 557.7939 -426.2939 c
557.8223 -426.2529 557.8271 -426.2471 557.8164 -426.2598 C
559.4346 -423.9688 559.1563 -421.5 559.1572 -418.8955 c
f
550.4229 -409.3271 m
547.1895 -408.957 547.5469 -429.3711 546.7998 -429.2773 c
547.0332 -429.3105 547.2617 -428.3516 547.8975 -426.96 C
547.7783 -427.1973 547.7344 -427.2773 548.082 -426.5625 c
549.7998 -423.2666 549.1553 -420.376 549.3477 -416.9033 c
549.4141 -415.6973 551.6865 -409.4766 550.4229 -409.3271 c
f
545.6367 -425.708 m
545.5684 -425.8486 545.5039 -425.9834 545.4414 -426.1162 c
545.5381 -425.9268 545.8555 -425.291 545.6367 -425.708 c
f
544.0273 -410.6689 m
543.1328 -410.8691 542.6621 -416.7314 542.7373 -417.8555 c
542.8115 -419.1875 543.3398 -427.998 544.1826 -428.0088 c
544.6113 -428.0137 544.9219 -427.2168 545.4414 -426.1162 c
545.3857 -426.2256 545.4023 -426.1865 545.6367 -425.708 c
547.0703 -422.9619 546.3662 -420.416 545.9844 -417.5791 c
545.6367 -415.085 548.4316 -409.6875 544.0273 -410.6689 c
f
540.6309 -424.8867 m
540.5625 -425.0254 540.5049 -425.1543 540.4453 -425.2842 C
540.5947 -424.9883 540.8613 -424.4443 540.6309 -424.8867 c
f
554.8242 -399.4502 m
552.9336 -399.375 552.1836 -411.1768 552.4189 -412.7939 c
552.877 -415.9541 553.3838 -418.9043 552.7617 -422.0938 c
552.6602 -422.623 551.1777 -428.5703 552.1416 -428.6123 c
552.2588 -428.6172 552.3789 -428.208 552.5469 -427.4805 c
552.5977 -427.2607 552.6016 -427.2412 552.5898 -427.2998 c
553.8242 -422.0371 554.9063 -418.0566 554.0527 -412.5791 c
553.6992 -410.3018 553.7949 -407.8701 554.2715 -405.6143 c
554.4434 -404.7969 556.7197 -399.5254 554.8242 -399.4502 c
f
530.9551 -411.7012 m
530.9775 -409.1631 531.4082 -406.8965 532.4053 -404.5371 c
533.1191 -402.8496 532.4121 -401.5625 530.165 -402.1943 c
529.3281 -402.4297 528.8701 -406.6631 528.5781 -407.498 c
527.6865 -410.0391 527.502 -412.8193 527.9688 -415.4502 c
528.2227 -416.8779 526.957 -428.209 527.9473 -428.2822 c
528.4395 -428.3232 528.8271 -426.833 529.8184 -424.7891 c
529.8652 -424.6914 529.8594 -424.7031 529.8252 -424.7734 c
531.9844 -420.2656 530.9121 -416.3926 530.9551 -411.7012 c
f
524.9707 -415.3135 m
524.8037 -413.9053 526.2461 -405.5449 525.1357 -405.5449 c
523.1016 -405.542 523.3535 -416.1553 523.7676 -417.7461 c
524.0684 -418.8926 523.8926 -429.5908 524.0117 -429.5918 c
524.2549 -429.5977 524.334 -428.4258 524.8467 -426.667 C
524.7422 -426.9824 524.6963 -427.1074 524.9902 -426.1865 c
526.3535 -422.3057 525.4004 -419.1836 524.9707 -415.3135 c
f
*U
*u
0 D
808.2607 -428.043 m
808.3984 -427.3564 808.126 -428.7227 808.2607 -428.043 C
808.2607 -428.043 L
f
1 D
807.5313 -416.8662 m
806.8955 -415.041 806.6357 -413.0283 806.7549 -411.127 c
806.8438 -409.9365 808.373 -406.9121 805.8359 -407.1416 c
803.6455 -407.3389 805.0742 -409.5947 804.7061 -410.8877 c
804.1006 -413.0156 804.2451 -415.4336 804.9248 -417.5322 c
805.6533 -419.7832 806.4346 -421.873 806.4551 -424.2471 c
806.459 -424.792 806.1201 -429.3252 807.3525 -429.2178 c
807.542 -429.2012 807.6777 -428.874 807.8037 -428.3184 c
808.7559 -424.1631 808.958 -420.9619 807.5313 -416.8662 c
f
810.791 -425.2773 m
810.7451 -425.4346 810.7061 -425.5801 810.665 -425.7285 C
810.7764 -425.374 810.9609 -424.7617 810.791 -425.2773 c
f
806.1602 -426.9404 m
806.1309 -427.0986 806.1055 -427.249 806.0801 -427.3965 c
806.124 -427.1816 806.2588 -426.4736 806.1602 -426.9404 c
f
804 -419.6523 m
803.5342 -418.1895 803.7764 -417.0811 803.7246 -415.6367 c
803.7012 -414.6182 801.3154 -415.0186 801.0566 -415.6631 c
800.8535 -416.1729 801.4277 -417.7529 801.3926 -418.4111 c
801.3242 -419.6758 801.5811 -421.0068 802.1211 -422.1826 c
802.6016 -423.2275 804.4004 -429.6953 805.1465 -429.5557 c
805.4922 -429.4912 805.5684 -428.791 805.7617 -427.7881 c
805.7373 -427.8906 805.7422 -427.8564 805.8359 -427.416 c
806.5352 -424.5117 804.8438 -422.3145 804 -419.6523 c
f
840.4473 -422.6299 m
840.4473 -420.7217 842.1963 -416.543 839.875 -416.5313 c
837.6738 -416.498 838.5596 -418.1387 838.0596 -419.9551 c
837.6768 -421.3447 837.5322 -422.5684 837.5869 -424.0303 C
837.5908 -425.3086 836.96 -431.1924 837.7402 -431.3066 c
838.1582 -431.3662 838.5547 -430.5615 839.25 -429.5684 c
839.2754 -429.5303 839.2793 -429.5244 839.2695 -429.5371 C
840.6904 -427.3877 840.4463 -425.0723 840.4473 -422.6299 c
f
820.9209 -422.5049 m
820.7168 -420.6074 822.0068 -416.2656 819.6973 -416.5039 c
817.5068 -416.7061 818.5625 -418.2422 818.2607 -420.1016 c
818.0283 -421.5244 818.0166 -422.7559 818.2285 -424.2041 C
818.3691 -425.4746 818.373 -431.3926 819.1611 -431.4219 c
819.584 -431.4365 819.8916 -430.5938 820.4766 -429.5322 c
820.498 -429.4912 820.5 -429.4854 820.4922 -429.498 C
821.6738 -427.209 821.1826 -424.9326 820.9209 -422.5049 c
f
/BBAccumRotation (0.107538) XT
833.5869 -411.5615 m
830.748 -411.2129 831.0615 -430.3594 830.4063 -430.2715 c
830.6104 -430.3018 830.8125 -429.4033 831.3701 -428.0977 C
831.2656 -428.3203 831.2266 -428.3965 831.5322 -427.7256 c
833.0391 -424.6348 832.4736 -421.9229 832.6426 -418.666 c
832.7021 -417.5352 834.6953 -411.7012 833.5869 -411.5615 c
f
820.7363 -428.4951 m
820.6758 -428.627 820.6201 -428.7539 820.5645 -428.8779 c
820.6494 -428.7012 820.9277 -428.1035 820.7363 -428.4951 c
f
834.5137 -414.3906 m
833.7285 -414.5771 833.3154 -420.0762 833.3809 -421.1309 c
833.4463 -422.3799 833.9092 -430.6426 834.6494 -430.6523 c
835.0264 -430.6582 835.2988 -429.9102 835.7549 -428.8779 c
835.7051 -428.9805 835.7197 -428.9443 835.9268 -428.4951 c
837.1836 -425.9199 836.5664 -423.5322 836.2314 -420.8711 c
835.9268 -418.5313 838.3789 -413.4697 834.5137 -414.3906 c
f
816.3428 -427.7256 m
816.2832 -427.8545 816.2324 -427.9756 816.1797 -428.0977 C
816.3105 -427.8203 816.5449 -427.3105 816.3428 -427.7256 c
f
824.5967 -406.4873 m
822.9385 -406.417 822.2793 -417.4854 822.4863 -419.002 c
822.8877 -421.9658 823.333 -424.7324 822.7871 -427.7246 c
822.6963 -428.2207 821.3965 -433.7979 822.2422 -433.8379 c
822.3457 -433.8428 822.4502 -433.459 822.5977 -432.7773 c
822.6436 -432.5703 822.6475 -432.5518 822.6348 -432.6074 c
823.7188 -427.6709 824.6689 -423.9385 823.9199 -418.7998 c
823.6094 -416.665 823.6934 -414.3838 824.1113 -412.2686 c
824.2627 -411.502 826.2607 -406.5586 824.5967 -406.4873 c
f
829.9893 -414.3115 m
830.0088 -411.9307 830.3877 -409.8047 831.2627 -407.5918 c
831.8887 -406.0088 831.2686 -404.8018 829.2969 -405.3936 c
828.5615 -405.6152 828.1592 -409.5859 827.9023 -410.3691 c
827.1211 -412.752 826.959 -415.3594 827.3691 -417.8271 c
827.5908 -419.166 826.4814 -429.793 827.3496 -429.8623 c
827.7813 -429.8994 828.1221 -428.5039 828.9912 -426.5859 c
829.0332 -426.4941 829.0273 -426.5049 828.998 -426.5703 c
830.8926 -422.3438 829.9521 -418.7109 829.9893 -414.3115 c
f
810.1582 -417.709 m
810.0225 -416.6279 811.208 -410.21 810.2949 -410.21 c
808.6221 -410.208 808.8291 -418.3555 809.1699 -419.5752 c
809.417 -420.4561 809.2734 -428.668 809.3711 -428.6689 c
809.5703 -428.6729 809.6357 -427.7734 810.0576 -426.4238 C
809.9717 -426.666 809.9326 -426.7607 810.1758 -426.0547 c
811.2969 -423.0762 810.5127 -420.6797 810.1582 -417.709 c
f
*U
*u
0 D
187.9624 -426.6064 m
188.0879 -425.9775 187.8384 -427.2295 187.9624 -426.6064 C
187.9624 -426.6064 L
f
1 D
214.77 -414.8623 m
214.1479 -412.8184 213.8936 -410.5635 214.0107 -408.4336 c
214.0972 -407.1016 215.5933 -403.7129 213.1113 -403.9697 c
210.9688 -404.1904 212.3652 -406.7188 212.0059 -408.167 c
211.4131 -410.5498 211.5552 -413.2578 212.2197 -415.6084 c
212.9326 -418.1299 213.6973 -420.4707 213.7168 -423.1289 c
213.7217 -423.7402 213.3896 -428.8174 214.5942 -428.6973 c
214.7798 -428.6797 214.9131 -428.3125 215.0371 -427.6895 c
215.9683 -423.0352 216.1655 -419.4502 214.77 -414.8623 c
f
190.2822 -424.0713 m
190.2393 -424.2158 190.2036 -424.3486 190.167 -424.4854 C
190.2686 -424.1602 190.4375 -423.5986 190.2822 -424.0713 c
f
186.0371 -425.5967 m
186.0098 -425.7402 185.9863 -425.8789 185.9634 -426.0137 c
186.0034 -425.8174 186.127 -425.167 186.0371 -425.5967 c
f
210.2324 -416.9004 m
209.7769 -415.2627 210.0127 -414.0215 209.9624 -412.4033 c
209.9395 -411.2617 207.6055 -411.71 207.353 -412.4326 c
207.1533 -413.0039 207.7158 -414.7725 207.6812 -415.5088 c
207.6147 -416.9268 207.8647 -418.418 208.394 -419.7344 c
208.8638 -420.9053 210.624 -428.1494 211.354 -427.9932 c
211.6924 -427.9209 211.7661 -427.1367 211.9551 -426.0137 c
211.9316 -426.1279 211.937 -426.0908 212.0283 -425.5967 c
212.7124 -422.3438 211.0576 -419.8828 210.2324 -416.9004 c
f
206.9043 -421.1641 m
206.9048 -419.415 208.5083 -415.584 206.3799 -415.5732 c
204.3623 -415.543 205.1743 -417.0469 204.7158 -418.7129 c
204.3647 -419.9863 204.2324 -421.1074 204.2827 -422.4482 C
204.2856 -423.6201 203.7075 -429.0137 204.4229 -429.1182 c
204.8066 -429.1738 205.1699 -428.4355 205.8076 -427.5244 c
205.8311 -427.4893 205.834 -427.4844 205.8257 -427.4961 C
207.1274 -425.5254 206.9038 -423.4033 206.9043 -421.1641 c
f
197.2544 -411.498 m
194.6528 -411.1787 194.9399 -428.7305 194.3384 -428.6504 c
194.5264 -428.6777 194.7109 -427.8535 195.2222 -426.6572 C
195.1265 -426.8613 195.0903 -426.9307 195.3706 -426.3154 c
196.7529 -423.4824 196.2339 -420.9961 196.3892 -418.0107 c
196.4434 -416.9736 198.2705 -411.626 197.2544 -411.498 c
f
199.3984 -427.0215 m
199.3433 -427.1426 199.292 -427.2578 199.2417 -427.3721 c
199.3198 -427.2109 199.5742 -426.6631 199.3984 -427.0215 c
f
198.104 -414.0908 m
197.3843 -414.2637 197.0063 -419.3037 197.0659 -420.2705 c
197.126 -421.416 197.5503 -428.9902 198.229 -428.999 c
198.5742 -429.0039 198.8242 -428.3193 199.2417 -427.3721 c
199.1968 -427.4658 199.21 -427.4326 199.3984 -427.0215 c
200.5518 -424.6602 199.9858 -422.4717 199.6787 -420.0313 c
199.3994 -417.8877 201.647 -413.2471 198.104 -414.0908 c
f
195.3706 -426.3154 m
195.3169 -426.4346 195.2705 -426.5449 195.2222 -426.6572 C
195.3423 -426.4023 195.5562 -425.9346 195.3706 -426.3154 c
f
203.418 -404.4453 m
201.8979 -404.3809 201.2939 -414.5273 201.4824 -415.9189 c
201.8516 -418.6357 202.2593 -421.1719 201.7593 -423.9141 c
201.6763 -424.3691 200.4844 -429.4814 201.2603 -429.5186 c
201.354 -429.5225 201.4502 -429.1709 201.5859 -428.5449 c
201.627 -428.3555 201.6309 -428.3389 201.6201 -428.3896 c
202.6133 -423.8643 203.4844 -420.4443 202.7979 -415.7334 c
202.5127 -413.7754 202.5894 -411.6836 202.9731 -409.7451 c
203.1123 -409.043 204.9438 -404.5098 203.418 -404.4453 c
f
225.3633 -419.4336 m
225.3818 -417.251 225.7285 -415.3018 226.5303 -413.2734 c
227.1045 -411.8223 226.5356 -410.7158 224.728 -411.2588 c
224.0542 -411.4619 223.686 -415.1016 223.4507 -415.8203 c
222.7344 -418.0039 222.585 -420.3945 222.9609 -422.6563 c
223.1646 -423.8848 222.147 -433.626 222.9429 -433.6895 c
223.3389 -433.7246 223.6514 -432.4434 224.4487 -430.6855 c
224.4868 -430.6016 224.4819 -430.6113 224.4541 -430.6719 c
226.1914 -426.7969 225.3296 -423.4668 225.3633 -419.4336 c
f
217.3403 -417.9727 m
217.2065 -416.7617 218.3672 -409.5732 217.4736 -409.5732 c
215.8369 -409.5723 216.0396 -418.6973 216.373 -420.0635 c
216.6147 -421.0498 216.4741 -430.248 216.5693 -430.248 c
216.7646 -430.2529 216.8286 -429.2451 217.2417 -427.7344 C
217.1567 -428.0049 217.1196 -428.1113 217.3569 -427.3203 c
218.4536 -423.9834 217.686 -421.3008 217.3403 -417.9727 c
f
220.5894 -413.6406 m
220.4556 -412.4297 221.6162 -405.2412 220.7227 -405.2412 c
219.0859 -405.2402 219.2886 -414.3652 219.6221 -415.7314 c
219.8638 -416.7178 219.7231 -425.916 219.8184 -425.916 c
220.0137 -425.9209 220.0776 -424.9131 220.4902 -423.4023 C
220.4058 -423.6729 220.3687 -423.7793 220.6055 -422.9883 c
221.7026 -419.6514 220.9351 -416.9688 220.5894 -413.6406 c
f
*U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(layer3) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Background) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Foreground) Ln
0 A
0 D
0 O
1 0.938262 0.439155 0.550408 0.035294 0.070588 0.235294 Xa
0 J 0 j 1 w 10 M []0 d0 XR
1023 -512 m
1023 -447.9629 L
997.6523 -449.8525 978.6445 -449.2236 v
951.1279 -448.3115 948.0391 -443.6055 920.4717 -443.4551 c
901.4287 -443.3506 878.3848 -444.085 845.9941 -444.085 c
813.5723 -444.085 790.8486 -449.3398 771.7871 -449.8555 c
744.2568 -450.5996 724.1924 -443.4277 696.6621 -444.1719 c
677.6016 -444.6875 655.0752 -454.9609 622.6543 -454.9609 c
590.2344 -454.9609 567.6133 -445.7061 548.5527 -445.1904 c
521.0234 -444.4463 501.5195 -445.6338 473.9897 -444.8896 c
454.9297 -444.374 431.7451 -449.7275 399.3257 -449.7275 c
366.9048 -449.7275 344.1099 -448.5635 325.0493 -449.0781 c
297.52 -449.8232 277.4824 -442.9238 249.9526 -443.668 c
230.8921 -444.1846 208.4141 -449.9424 175.9946 -449.9424 c
143.5679 -449.9424 110.1147 -444.3711 90.9902 -443.4453 c
63.4517 -442.1113 -1 -447.9629 Y
-1 -512 L
1023 -512 L
f
*u
33.6357 -449.7744 m
33.8979 -448.4629 33.3784 -451.0723 33.6357 -449.7744 C
33.6357 -449.7744 L
f
1 D
33.0796 -423.0596 m
31.7847 -418.8027 31.2549 -414.1074 31.498 -409.6719 c
31.6792 -406.8955 34.7944 -399.8398 29.6265 -400.374 c
25.1636 -400.835 28.0728 -406.0977 27.3232 -409.1152 c
26.0894 -414.0781 26.3853 -419.7178 27.77 -424.6133 c
29.2544 -429.8643 30.8462 -434.7393 30.8877 -440.2764 c
30.897 -441.5498 30.2051 -452.123 32.7148 -451.873 c
33.1011 -451.835 33.3784 -451.0723 33.6357 -449.7744 c
35.5757 -440.0811 35.9868 -432.6143 33.0796 -423.0596 c
f
38.4678 -444.4941 m
38.3784 -444.7939 38.3047 -445.0723 38.2271 -445.3555 C
38.4385 -444.6787 38.7915 -443.5088 38.4678 -444.4941 c
f
29.626 -447.6699 m
29.5698 -447.9707 29.521 -448.2578 29.4736 -448.5391 c
29.5571 -448.1299 29.8135 -446.7773 29.626 -447.6699 c
f
25.8853 -429.5596 m
24.9365 -426.1484 25.4287 -423.5625 25.3232 -420.1924 c
25.2754 -417.8154 20.415 -418.75 19.8887 -420.2539 c
19.4731 -421.4434 20.6445 -425.1279 20.5728 -426.6631 c
20.4336 -429.6143 20.9551 -432.7197 22.0566 -435.4619 c
23.0352 -437.8994 26.7012 -452.9873 28.2207 -452.6611 c
28.9263 -452.5117 29.0806 -450.877 29.4736 -448.5391 c
29.4253 -448.7773 29.4355 -448.6982 29.626 -447.6699 c
31.0503 -440.8945 27.6045 -435.7695 25.8853 -429.5596 c
f
73.0859 -438.4395 m
73.0869 -434.7969 76.4258 -426.8184 71.9932 -426.7969 c
67.792 -426.7334 69.4829 -429.8652 68.5273 -433.333 c
67.7964 -435.9854 67.521 -438.3213 67.626 -441.1133 C
67.6323 -443.5537 66.4272 -454.7871 67.9175 -455.0049 c
68.7168 -455.1191 69.4731 -453.582 70.8013 -451.6865 c
70.8501 -451.6133 70.8564 -451.6025 70.8389 -451.626 C
73.5503 -447.5234 73.0845 -443.1025 73.0859 -438.4395 c
f
52.9883 -418.3076 m
47.5693 -417.6426 48.168 -454.1973 46.9155 -454.0293 c
47.3062 -454.0869 47.6909 -452.3711 48.7559 -449.8789 C
48.5562 -450.3047 48.4814 -450.4482 49.0659 -449.168 c
51.9438 -443.2666 50.8628 -438.0898 51.186 -431.8711 c
51.2983 -429.7129 55.1055 -418.5742 52.9883 -418.3076 c
f
57.4546 -450.6377 m
57.3389 -450.8896 57.2319 -451.1318 57.127 -451.3691 c
57.2896 -451.0313 57.8198 -449.8906 57.4546 -450.6377 c
f
54.7578 -423.709 m
53.2593 -424.0664 52.4712 -434.5645 52.5962 -436.5771 c
52.7212 -438.9629 53.6045 -454.7383 55.0181 -454.7568 c
55.7373 -454.7676 56.2578 -453.3398 57.127 -451.3691 c
57.0332 -451.5635 57.0605 -451.4951 57.4546 -450.6377 c
59.856 -445.7207 58.6768 -441.1621 58.0376 -436.0811 c
57.4551 -431.6152 62.1367 -421.9512 54.7578 -423.709 c
f
49.0659 -449.168 m
48.9531 -449.415 48.856 -449.6465 48.7559 -449.8789 C
49.0059 -449.3486 49.4521 -448.375 49.0659 -449.168 c
f
65.8247 -403.6211 m
62.6587 -403.4863 61.4009 -424.6172 61.7944 -427.5137 c
62.563 -433.1719 63.4116 -438.4541 62.3701 -444.166 c
62.1973 -445.1143 59.7153 -455.7617 61.3301 -455.8379 c
61.5269 -455.8477 61.7266 -455.1143 62.0088 -453.8125 c
62.0952 -453.418 62.1025 -453.3828 62.0801 -453.4883 c
64.1489 -444.0635 65.9624 -436.9385 64.5337 -427.1279 c
63.9399 -423.0518 64.0996 -418.6963 64.8984 -414.6582 c
65.188 -413.1953 69.002 -403.7559 65.8247 -403.6211 c
f
46.1201 -423.5576 m
46.1587 -419.0127 46.8813 -414.9541 48.5513 -410.7295 c
49.7466 -407.707 48.562 -405.4033 44.7979 -406.5332 c
43.3936 -406.9551 42.6274 -414.5371 42.1372 -416.0313 c
40.6445 -420.5811 40.3345 -425.5586 41.1177 -430.2705 c
41.541 -432.8262 39.4229 -453.1152 41.0801 -453.2471 c
41.9048 -453.3193 42.5552 -450.6533 44.2148 -446.9922 c
44.2944 -446.8164 44.2842 -446.8369 44.2275 -446.9629 c
47.8447 -438.8936 46.0498 -431.957 46.1201 -423.5576 c
f
38.4331 -425.0254 m
38.1548 -422.5039 40.5723 -407.5322 38.7114 -407.5322 c
35.3027 -407.5293 35.7241 -426.5342 36.4189 -429.3809 c
36.9224 -431.4346 36.6294 -450.5908 36.8281 -450.5918 c
37.2339 -450.6016 37.3677 -448.5039 38.2271 -445.3555 C
38.0518 -445.9189 37.9741 -446.1426 38.4678 -444.4941 c
40.7515 -437.5449 39.1538 -431.9561 38.4331 -425.0254 c
f
*U
*u
0 D
588.5293 -456.2178 m
588.8662 -454.6455 588.2002 -457.7744 588.5293 -456.2178 C
588.5293 -456.2178 L
f
1 D
606.8174 -426.582 m
605.1582 -421.4775 604.4785 -415.8477 604.79 -410.5293 c
605.0225 -407.1992 609.0146 -398.7393 602.3926 -399.3799 c
596.6738 -399.9326 600.4004 -406.2432 599.4404 -409.8613 c
597.8604 -415.8125 598.2383 -422.5752 600.0127 -428.4453 c
601.9141 -434.7422 603.9541 -440.5869 604.0078 -447.2266 c
604.0195 -448.7539 603.1328 -461.4326 606.3496 -461.1328 c
606.8447 -461.0869 607.2002 -460.1729 607.5293 -458.6162 c
610.0156 -446.9932 610.541 -438.0391 606.8174 -426.582 c
f
594.7207 -449.8867 m
594.6074 -450.2461 594.5117 -450.5791 594.4121 -450.9189 C
594.6836 -450.1074 595.1348 -448.7051 594.7207 -449.8867 c
f
602.3916 -456.0928 m
602.3203 -456.4531 602.2568 -456.7979 602.1963 -457.1348 c
602.3027 -456.6445 602.6318 -455.0225 602.3916 -456.0928 c
f
597.5977 -434.376 m
596.3818 -430.2861 597.0127 -427.1855 596.8779 -423.1445 c
596.8164 -420.2939 590.5879 -421.4141 589.9141 -423.2178 c
589.3809 -424.6445 590.8828 -429.0625 590.79 -430.9033 c
590.6123 -434.4424 591.2803 -438.166 592.6914 -441.4541 c
593.9453 -444.377 598.6436 -462.4688 600.5908 -462.0771 c
601.4941 -461.8984 601.6914 -459.9385 602.1963 -457.1348 c
602.1348 -457.4209 602.1475 -457.3262 602.3916 -456.0928 c
604.2168 -447.9678 599.8008 -441.8223 597.5977 -434.376 c
f
648.0801 -442.626 m
648.082 -438.2578 652.3604 -428.6914 646.6797 -428.665 c
641.2969 -428.5889 643.4629 -432.3447 642.2393 -436.5029 c
641.3027 -439.6836 640.9502 -442.4844 641.084 -445.832 C
641.0928 -448.7588 639.5488 -462.2285 641.458 -462.4902 c
642.4814 -462.627 643.4502 -460.7832 645.1523 -458.5107 c
645.2148 -458.4229 645.2236 -458.4102 645.2012 -458.4385 C
648.6758 -453.5186 648.0781 -448.2178 648.0801 -442.626 c
f
629.3271 -422.083 m
622.3838 -421.2861 623.1504 -465.1191 621.5469 -464.917 c
622.0469 -464.9863 622.54 -462.9287 623.9043 -459.9404 C
623.6484 -460.4512 623.5527 -460.623 624.3018 -459.0879 c
627.9883 -452.0117 626.6045 -445.8037 627.0176 -438.3477 c
627.1621 -435.7598 632.04 -422.4023 629.3271 -422.083 c
f
619.0508 -457.2529 m
618.9023 -457.5547 618.7656 -457.8457 618.6309 -458.1299 c
618.8379 -457.7246 619.5195 -456.3574 619.0508 -457.2529 c
f
615.5947 -424.9629 m
613.6748 -425.3916 612.6641 -437.9795 612.8242 -440.3926 c
612.9844 -443.2539 614.1172 -462.1699 615.9277 -462.1924 c
616.8496 -462.2051 617.5166 -460.4932 618.6309 -458.1299 c
618.5107 -458.3633 618.5459 -458.2813 619.0508 -457.2529 c
622.127 -451.3574 620.6162 -445.8906 619.7969 -439.7979 c
619.0508 -434.4434 625.0498 -422.8545 615.5947 -424.9629 c
f
608.3018 -455.4902 m
608.1563 -455.7871 608.0313 -456.0645 607.9043 -456.3428 C
608.2246 -455.707 608.7959 -454.54 608.3018 -455.4902 c
f
638.7754 -400.875 m
634.7188 -400.7139 633.1064 -426.0518 633.6123 -429.5244 c
634.5957 -436.3096 635.6846 -442.6436 634.3496 -449.4932 c
634.1279 -450.6299 630.9463 -463.3975 633.0166 -463.4883 c
633.2695 -463.5 633.5244 -462.6211 633.8857 -461.0596 c
633.9971 -460.5869 634.0059 -460.5449 633.9775 -460.6709 c
636.6279 -449.3701 638.9531 -440.8262 637.1211 -429.0625 c
636.3604 -424.1748 636.5654 -418.9521 637.5889 -414.1094 c
637.959 -412.3555 642.8467 -401.0371 638.7754 -400.875 c
f
587.5264 -427.1797 m
587.5752 -421.7295 588.501 -416.8633 590.6416 -411.7969 c
592.1729 -408.1729 590.6563 -405.4102 585.832 -406.7656 c
584.0332 -407.2715 583.0508 -416.3633 582.4219 -418.1543 c
580.5098 -423.6104 580.1123 -429.5791 581.1162 -435.2285 c
581.6592 -438.293 578.9443 -462.6221 581.0684 -462.7803 c
582.124 -462.8672 582.958 -459.6699 585.085 -455.2803 c
585.1875 -455.0693 585.1738 -455.0938 585.1016 -455.2451 c
589.7363 -445.5684 587.4365 -437.251 587.5264 -427.1797 c
f
574.6768 -434.9346 m
574.3193 -431.9111 577.418 -413.959 575.0322 -413.959 c
570.665 -413.9551 571.2061 -436.7441 572.0957 -440.1572 c
572.7402 -442.6201 572.3643 -465.5908 572.6201 -465.5918 c
573.1406 -465.6035 573.3105 -463.0879 574.4121 -459.3125 C
574.1875 -459.9883 574.0889 -460.2568 574.7207 -458.2803 c
577.6475 -449.9473 575.6006 -443.2451 574.6768 -434.9346 c
f
*U
*u
0 D
311.6357 -453.7744 m
311.8979 -452.4629 311.3784 -455.0723 311.6357 -453.7744 C
311.6357 -453.7744 L
f
1 D
310.2437 -432.4355 m
309.0303 -428.9512 308.5332 -425.1084 308.7612 -421.4785 c
308.9312 -419.2061 311.8506 -413.4316 307.0073 -413.8691 c
302.8252 -414.2461 305.5522 -418.5527 304.8491 -421.0225 c
303.6934 -425.085 303.9702 -429.7002 305.2681 -433.707 c
306.6587 -438.0049 308.1509 -441.9941 308.189 -446.5264 c
308.1978 -447.5684 307.5498 -456.2217 309.9019 -456.0176 c
310.2637 -455.9863 310.5229 -455.3613 310.7642 -454.2998 c
312.582 -446.3662 312.9673 -440.2549 310.2437 -432.4355 c
f
316.4678 -448.4941 m
316.3784 -448.7939 316.3047 -449.0723 316.2271 -449.3555 C
316.4385 -448.6787 316.7915 -447.5088 316.4678 -448.4941 c
f
307.626 -451.6699 m
307.5698 -451.9707 307.521 -452.2578 307.4736 -452.5391 c
307.5571 -452.1299 307.8135 -450.7773 307.626 -451.6699 c
f
303.502 -437.7549 m
302.6128 -434.9629 303.0742 -432.8467 302.9756 -430.0889 c
302.9307 -428.1436 298.3765 -428.9082 297.8833 -430.1387 c
297.4937 -431.1123 298.5913 -434.1279 298.5244 -435.3848 c
298.3936 -437.7998 298.8823 -440.3418 299.9141 -442.5859 c
300.8311 -444.5811 304.2666 -456.9287 305.6904 -456.6621 c
306.3516 -456.54 306.4961 -455.2021 306.8647 -453.2881 c
306.8193 -453.4834 306.8286 -453.4189 307.0073 -452.5771 c
308.3418 -447.0322 305.1133 -442.8379 303.502 -437.7549 c
f
373.0859 -443.4395 m
373.0869 -439.7969 376.4258 -431.8184 371.9932 -431.7969 c
367.792 -431.7334 369.4829 -434.8652 368.5273 -438.333 c
367.7964 -440.9854 367.521 -443.3213 367.626 -446.1133 C
367.6323 -448.5537 366.4272 -459.7871 367.9175 -460.0049 c
368.7168 -460.1191 369.4731 -458.582 370.8013 -456.6865 c
370.8501 -456.6133 370.8564 -456.6025 370.8389 -456.626 C
373.5503 -452.5234 373.0845 -448.1025 373.0859 -443.4395 c
f
335.8076 -443.2012 m
335.418 -439.5791 337.8813 -431.2891 333.4717 -431.7432 c
329.2881 -432.1309 331.3052 -435.0635 330.7275 -438.6133 c
330.2856 -441.3291 330.2622 -443.6807 330.6665 -446.4453 C
330.9346 -448.8711 330.9424 -460.1689 332.4473 -460.2256 c
333.2544 -460.2529 333.8413 -458.6436 334.958 -456.6172 c
334.999 -456.5391 335.0039 -456.5273 334.9893 -456.5527 C
337.2446 -452.1826 336.3071 -447.8369 335.8076 -443.2012 c
f
/BBAccumRotation (0.107538) XT
359.9883 -422.3076 m
354.5693 -421.6426 355.168 -458.1973 353.9155 -458.0293 c
354.3062 -458.0869 354.6909 -456.3711 355.7559 -453.8789 C
355.5562 -454.3047 355.4814 -454.4482 356.0659 -453.168 c
358.9438 -447.2666 357.8628 -442.0898 358.186 -435.8711 c
358.2983 -433.7129 362.1055 -422.5742 359.9883 -422.3076 c
f
335.4546 -454.6377 m
335.3389 -454.8896 335.2319 -455.1318 335.127 -455.3691 c
335.2896 -455.0313 335.8198 -453.8906 335.4546 -454.6377 c
f
361.7578 -427.709 m
360.2593 -428.0664 359.4712 -438.5645 359.5962 -440.5771 c
359.7212 -442.9629 360.6045 -458.7383 362.0181 -458.7568 c
362.7373 -458.7676 363.2578 -457.3398 364.127 -455.3691 c
364.0332 -455.5635 364.0605 -455.4951 364.4546 -454.6377 c
366.856 -449.7207 365.6768 -445.1621 365.0376 -440.0811 c
364.4551 -435.6152 369.1367 -425.9512 361.7578 -427.709 c
f
327.0659 -453.168 m
326.9531 -453.415 326.856 -453.6465 326.7559 -453.8789 C
327.0059 -453.3486 327.4521 -452.375 327.0659 -453.168 c
f
342.8247 -412.6211 m
339.6587 -412.4863 338.4009 -433.6172 338.7944 -436.5137 c
339.563 -442.1719 340.4116 -447.4541 339.3701 -453.166 c
339.1973 -454.1143 336.7153 -464.7617 338.3301 -464.8379 c
338.5269 -464.8477 338.7266 -464.1143 339.0088 -462.8125 c
339.0952 -462.418 339.1025 -462.3828 339.0801 -462.4883 c
341.1489 -453.0635 342.9624 -445.9385 341.5337 -436.1279 c
340.9399 -432.0518 341.0996 -427.6963 341.8984 -423.6582 c
342.188 -422.1953 346.002 -412.7559 342.8247 -412.6211 c
f
353.1201 -427.5576 m
353.1587 -423.0127 353.8813 -418.9541 355.5513 -414.7295 c
356.7466 -411.707 355.562 -409.4033 351.7979 -410.5332 c
350.3936 -410.9551 349.6274 -418.5371 349.1372 -420.0313 c
347.6445 -424.5811 347.3345 -429.5586 348.1177 -434.2705 c
348.541 -436.8262 346.4229 -457.1152 348.0801 -457.2471 c
348.9048 -457.3193 349.5552 -454.6533 351.2148 -450.9922 c
351.2944 -450.8164 351.2842 -450.8369 351.2275 -450.9629 c
354.8447 -442.8936 353.0498 -435.957 353.1201 -427.5576 c
f
315.2593 -434.0439 m
314.999 -431.9805 317.2642 -419.7275 315.5205 -419.7275 c
312.3262 -419.7246 312.7212 -435.2793 313.3726 -437.6084 c
313.8438 -439.29 313.5698 -454.9678 313.7559 -454.9688 c
314.1357 -454.9766 314.2617 -453.2598 315.0669 -450.6826 C
314.9019 -451.1445 314.8291 -451.3271 315.2925 -449.9775 c
317.4326 -444.291 315.9351 -439.7168 315.2593 -434.0439 c
f
*U
816.4551 -453.6377 m
816.3389 -453.8896 816.2324 -454.1318 816.127 -454.3691 c
816.2891 -454.0313 816.8203 -452.8906 816.4551 -453.6377 c
f
808.0664 -452.168 m
807.9531 -452.415 807.8555 -452.6465 807.7559 -452.8789 C
808.0059 -452.3486 808.4521 -451.375 808.0664 -452.168 c
f
u
947.0303 -441.4395 m
947.0313 -437.7969 950.5225 -429.8184 945.8887 -429.7969 c
941.4951 -429.7334 943.2627 -432.8652 942.2646 -436.333 c
941.501 -438.9854 941.2129 -441.3213 941.3223 -444.1133 C
941.3291 -446.5537 940.0693 -457.7871 941.6279 -458.0049 c
942.4629 -458.1191 943.252 -456.582 944.6416 -454.6865 c
944.6934 -454.6133 944.6992 -454.6025 944.6816 -454.626 C
947.5166 -450.5234 947.0293 -446.1025 947.0303 -441.4395 c
f
912.0537 -438.2012 m
911.6475 -434.5791 914.2227 -426.2891 909.6123 -426.7432 c
905.2393 -427.1309 907.3467 -430.0635 906.7432 -433.6133 c
906.2813 -436.3291 906.2568 -438.6807 906.6787 -441.4453 C
906.96 -443.8711 906.9678 -455.1689 908.541 -455.2256 c
909.3848 -455.2529 910 -453.6436 911.166 -451.6172 c
911.209 -451.5391 911.2148 -451.5273 911.1982 -451.5527 C
913.5566 -447.1826 912.5762 -442.8369 912.0537 -438.2012 c
f
/BBAccumRotation (0.107538) XT
933.3359 -421.3076 m
927.6709 -420.6426 928.2969 -457.1973 926.9883 -457.0293 c
927.3965 -457.0869 927.7988 -455.3711 928.9121 -452.8789 C
928.7031 -453.3047 928.625 -453.4482 929.2363 -452.168 c
932.2441 -446.2666 931.1152 -441.0898 931.4521 -434.8711 c
931.5703 -432.7129 935.5498 -421.5742 933.3359 -421.3076 c
f
878.5674 -420.083 m
872.8672 -420.2939 879.085 -456.3213 877.7656 -456.3555 c
878.1777 -456.3506 878.3125 -454.5928 879.0313 -451.96 C
878.8896 -452.4121 878.835 -452.5664 879.2432 -451.208 c
881.3115 -444.915 879.4023 -439.9727 878.7832 -433.7754 c
878.5693 -431.625 880.7959 -420.0078 878.5674 -420.083 c
f
/BBAccumRotation (0.153773) XT
937.1865 -424.709 m
935.6201 -425.0664 934.7959 -435.5645 934.9268 -437.5771 c
935.0566 -439.9629 935.9805 -455.7383 937.459 -455.7568 c
938.2109 -455.7676 938.7549 -454.3398 939.6641 -452.3691 c
939.5664 -452.5635 939.5947 -452.4951 940.0059 -451.6377 c
942.5166 -446.7207 941.2842 -442.1621 940.6152 -437.0811 c
940.0059 -432.6152 944.9014 -422.9512 937.1865 -424.709 c
f
915.3916 -407.6211 m
912.0811 -407.4863 910.7646 -428.6172 911.1777 -431.5137 c
911.9805 -437.1719 912.8682 -442.4541 911.7803 -448.166 c
911.5996 -449.1143 909.0039 -459.7617 910.6924 -459.8379 c
910.8984 -459.8477 911.1074 -459.1143 911.4014 -457.8125 c
911.4932 -457.418 911.5 -457.3828 911.4756 -457.4883 c
913.6387 -448.0635 915.5361 -440.9385 914.041 -431.1279 c
913.4199 -427.0518 913.5879 -422.6963 914.4229 -418.6582 c
914.7246 -417.1953 918.7139 -407.7559 915.3916 -407.6211 c
f
926.1563 -424.5576 m
926.1953 -420.0127 926.9512 -415.9541 928.6963 -411.7295 c
929.9473 -408.707 928.709 -406.4033 924.7734 -407.5332 c
923.3047 -407.9551 922.5039 -415.5371 921.9912 -417.0313 c
920.4297 -421.5811 920.1064 -426.5586 920.9248 -431.2705 c
921.3682 -433.8262 919.1533 -454.1152 920.8867 -454.2471 c
921.7471 -454.3193 922.4277 -451.6533 924.1631 -447.9922 c
924.2471 -447.8164 924.2363 -447.8369 924.1768 -447.9629 c
927.959 -439.8936 926.082 -432.957 926.1563 -424.5576 c
f
904.3359 -419.3076 m
898.6709 -418.6426 899.2969 -455.1973 897.9883 -455.0293 c
898.3965 -455.0869 898.7988 -453.3711 899.9121 -450.8789 C
899.7031 -451.3047 899.625 -451.4482 900.2363 -450.168 c
903.2441 -444.2666 902.1152 -439.0898 902.4521 -432.8711 c
902.5703 -430.7129 906.5498 -419.5742 904.3359 -419.3076 c
f
889.3916 -402.6211 m
886.0811 -402.4863 884.7646 -423.6172 885.1777 -426.5137 c
885.9805 -432.1719 886.8682 -437.4541 885.7803 -443.166 c
885.5996 -444.1143 883.0039 -454.7617 884.6924 -454.8379 c
884.8984 -454.8477 885.1074 -454.1143 885.4014 -452.8125 c
885.4932 -452.418 885.5 -452.3828 885.4756 -452.4883 c
887.6387 -443.0635 889.5361 -435.9385 888.041 -426.1279 c
887.4199 -422.0518 887.5879 -417.6963 888.4229 -413.6582 c
888.7246 -412.1953 892.7139 -402.7559 889.3916 -402.6211 c
f
896.1563 -426.5576 m
896.1953 -422.0127 896.9512 -417.9541 898.6963 -413.7295 c
899.9473 -410.707 898.709 -408.4033 894.7734 -409.5332 c
893.3047 -409.9551 892.5039 -417.5371 891.9912 -419.0313 c
890.4297 -423.5811 890.1064 -428.5586 890.9248 -433.2705 c
891.3682 -435.8262 889.1533 -456.1152 890.8867 -456.2471 c
891.7471 -456.3193 892.4277 -453.6533 894.1631 -449.9922 c
894.2471 -449.8164 894.2363 -449.8369 894.1768 -449.9629 c
897.959 -441.8936 896.082 -434.957 896.1563 -426.5576 c
f
U
0 D
152.7734 -432.9941 m
152.7246 -432.4814 152.5591 -431.8975 152.2305 -431.3457 c
151.9033 -430.793 151.4106 -430.2979 150.8306 -429.9316 c
149.6597 -429.1924 148.2207 -428.917 146.7051 -428.8779 c
144.1968 -428.8223 141.3818 -429.7012 138.8418 -431.4277 c
136.293 -433.1465 134.0601 -435.7393 132.5259 -438.8086 c
130.8149 -442.2158 130.0708 -445.7871 129.8047 -448.9941 c
129.5415 -452.2148 129.7466 -455.1064 130.0659 -457.4932 c
130.3931 -459.8828 130.8462 -461.7754 131.2251 -463.0625 c
131.6084 -464.3496 131.9194 -465.0322 132.0654 -465 c
132.1577 -464.9795 132.1841 -464.6963 132.1655 -464.1895 C
132.377 -463.7383 132.5854 -462.79 132.834 -461.501 c
133.1855 -459.666 133.6816 -457.207 134.5547 -454.5488 c
135.335 -452.1455 136.1792 -449.9297 136.7246 -448.1797 c
137.3994 -446.0576 139.2104 -445.2861 137.3594 -444.5098 c
135.5498 -443.75 136.2271 -445.5557 135.1733 -447.5293 c
134.3174 -449.1553 133.2705 -451.3193 132.4414 -453.8691 c
132.0713 -454.9941 131.8066 -456.1025 131.6201 -457.1533 C
131.5146 -454.8584 131.4917 -452.1465 131.8398 -449.1973 c
132.1987 -446.1777 132.959 -442.8887 134.5088 -439.8066 c
135.8994 -437.0273 137.8428 -434.7119 140.0356 -433.127 c
142.2178 -431.5361 144.6328 -430.6641 146.7236 -430.5605 c
147.9907 -430.4912 149.1318 -430.8477 149.7896 -431.4082 c
150.4634 -431.9717 150.5972 -432.6143 150.6021 -433.1504 c
150.604 -433.6973 150.4932 -434.1729 150.5293 -434.5566 c
150.5615 -434.9404 150.7324 -435.249 151.1914 -435.459 c
151.6338 -435.6621 152.001 -435.5732 152.3081 -435.167 c
152.6016 -434.7646 152.8657 -434.0303 152.7734 -432.9941 c
f
578.7734 -427.9941 m
578.7246 -427.4814 578.5586 -426.8975 578.2305 -426.3457 c
577.9033 -425.793 577.4102 -425.2979 576.8301 -424.9316 c
575.6602 -424.1924 574.2207 -423.917 572.7051 -423.8779 c
570.1973 -423.8223 567.3818 -424.7012 564.8418 -426.4277 c
562.293 -428.1465 560.0605 -430.7393 558.5254 -433.8086 c
556.8145 -437.2158 556.0703 -440.7871 555.8047 -443.9941 c
555.541 -447.2148 555.7461 -450.1064 556.0664 -452.4932 c
556.3926 -454.8828 556.8457 -456.7754 557.2246 -458.0625 c
557.6084 -459.3496 557.9199 -460.0322 558.0654 -460 c
558.1582 -459.9795 558.1836 -459.6963 558.166 -459.1895 C
558.377 -458.7383 558.5859 -457.79 558.834 -456.501 c
559.1855 -454.666 559.6816 -452.207 560.5547 -449.5488 c
561.335 -447.1455 562.1797 -444.9297 562.7246 -443.1797 c
563.3994 -441.0576 565.2109 -440.2861 563.3594 -439.5098 c
561.5498 -438.75 562.2266 -440.5557 561.1738 -442.5293 c
560.3174 -444.1553 559.2705 -446.3193 558.4414 -448.8691 c
558.0713 -449.9941 557.8066 -451.1025 557.6201 -452.1533 C
557.5146 -449.8584 557.4922 -447.1465 557.8398 -444.1973 c
558.1992 -441.1777 558.959 -437.8887 560.5088 -434.8066 c
561.8994 -432.0273 563.8428 -429.7119 566.0352 -428.127 c
568.2178 -426.5361 570.6328 -425.6641 572.7236 -425.5605 c
573.9902 -425.4912 575.1318 -425.8477 575.7891 -426.4082 c
576.4629 -426.9717 576.5977 -427.6143 576.6016 -428.1504 c
576.6035 -428.6973 576.4932 -429.1729 576.5293 -429.5566 c
576.5615 -429.9404 576.7324 -430.249 577.1914 -430.459 c
577.6338 -430.6621 578.001 -430.5732 578.3086 -430.167 c
578.6016 -429.7646 578.8652 -429.0303 578.7734 -427.9941 c
f
127.0439 -425.207 m
125.8696 -425.0742 125.6069 -425.5762 125.6187 -426.5107 c
125.6279 -427.4473 125.9131 -428.7783 125.8242 -430.3936 c
125.6758 -433.0566 125.8818 -436.541 126.5947 -440.2529 c
126.5962 -440.2568 126.5967 -440.2607 126.5977 -440.2646 C
125.749 -438.9336 124.7949 -437.6016 123.7314 -436.3018 c
119.9912 -431.7031 115.5566 -428.373 111.7769 -426.5869 c
109.4961 -425.4951 107.6382 -424.4775 106.1982 -424.0381 c
104.7612 -423.6035 103.8643 -423.7373 103.748 -424.9355 c
103.6304 -426.1289 104.2964 -426.3613 105.561 -426.5957 c
106.8169 -426.8281 108.7729 -427.1396 110.813 -428.3809 c
114.1509 -430.3936 118.1294 -433.6748 121.6519 -438.0029 c
125.5825 -442.7832 128.1182 -447.8525 129.5732 -451.6553 c
131.0356 -455.4658 131.5908 -457.9932 131.9868 -457.9365 C
132.2275 -457.9111 132.3535 -456.5371 132.0215 -454.2412 C
132.0576 -454.25 132.0903 -454.2539 132.1182 -454.2422 c
132.8252 -453.9463 130.7295 -447.6689 129.2344 -439.75 c
128.5483 -436.1777 128.1157 -432.8896 127.8594 -430.3457 c
127.7046 -428.7949 128.1094 -427.542 128.248 -426.6904 c
128.3843 -425.8359 128.2563 -425.3438 127.0439 -425.207 c
f
388.0439 -437.207 m
386.8696 -437.0742 386.6069 -437.5762 386.6187 -438.5107 c
386.6279 -439.4473 386.9131 -440.7783 386.8242 -442.3936 c
386.6758 -445.0566 386.8818 -448.541 387.5947 -452.2529 c
387.5962 -452.2568 387.5967 -452.2607 387.5977 -452.2646 C
386.749 -450.9336 385.7949 -449.6016 384.7314 -448.3018 c
380.9912 -443.7031 376.5566 -440.373 372.7769 -438.5869 c
370.4961 -437.4951 368.6382 -436.4775 367.1982 -436.0381 c
365.7612 -435.6035 364.8643 -435.7373 364.748 -436.9355 c
364.6304 -438.1289 365.2964 -438.3613 366.561 -438.5957 c
367.8169 -438.8281 369.7729 -439.1396 371.813 -440.3809 c
375.1509 -442.3936 379.1294 -445.6748 382.6519 -450.0029 c
386.5825 -454.7832 389.1182 -459.8525 390.5732 -463.6553 c
392.0356 -467.4658 392.5908 -469.9932 392.9868 -469.9365 C
393.2275 -469.9111 393.3535 -468.5371 393.0215 -466.2412 C
393.0576 -466.25 393.0903 -466.2539 393.1182 -466.2422 c
393.8252 -465.9463 391.7295 -459.6689 390.2344 -451.75 c
389.5483 -448.1777 389.1157 -444.8896 388.8594 -442.3457 c
388.7046 -440.7949 389.1094 -439.542 389.248 -438.6904 c
389.3843 -437.8359 389.2563 -437.3438 388.0439 -437.207 c
f
807.0439 -432.207 m
805.8691 -432.0742 805.6074 -432.5762 805.6191 -433.5107 c
805.6279 -434.4473 805.9131 -435.7783 805.8242 -437.3936 c
805.6758 -440.0566 805.8818 -443.541 806.5947 -447.2529 c
806.5957 -447.2568 806.5967 -447.2607 806.5977 -447.2646 C
805.749 -445.9336 804.7949 -444.6016 803.7314 -443.3018 c
799.9912 -438.7031 795.5566 -435.373 791.7773 -433.5869 c
789.4961 -432.4951 787.6387 -431.4775 786.1982 -431.0381 c
784.7617 -430.6035 783.8643 -430.7373 783.748 -431.9355 c
783.6309 -433.1289 784.2969 -433.3613 785.5605 -433.5957 c
786.8164 -433.8281 788.7734 -434.1396 790.8125 -435.3809 c
794.1504 -437.3936 798.1289 -440.6748 801.6523 -445.0029 c
805.582 -449.7832 808.1182 -454.8525 809.5732 -458.6553 c
811.0352 -462.4658 811.5908 -464.9932 811.9863 -464.9365 C
812.2275 -464.9111 812.3535 -463.5371 812.0215 -461.2412 C
812.0576 -461.25 812.0898 -461.2539 812.1182 -461.2422 c
812.8252 -460.9463 810.7295 -454.6689 809.2344 -446.75 c
808.5488 -443.1777 808.1152 -439.8896 807.8594 -437.3457 c
807.7051 -435.7949 808.1094 -434.542 808.248 -433.6904 c
808.3848 -432.8359 808.2559 -432.3438 807.0439 -432.207 c
f
183.4346 -429.165 m
182.9644 -428.9004 181.978 -429.7178 180.6841 -431.1299 c
179.8809 -431.9932 178.9614 -433.1064 177.9302 -434.2607 C
177.8794 -434.207 177.835 -434.1484 177.8013 -434.0742 c
177.3931 -433.166 177.3315 -432.7041 177.4897 -431.9512 c
177.7002 -430.9395 178.2744 -429.5449 178.4873 -428.5088 c
178.7256 -427.4492 178.688 -426.6348 178.2383 -426.3438 c
177.7925 -426.0566 177.0239 -426.3389 176.1523 -427.0957 c
175.7183 -427.4785 175.2583 -427.9805 174.8169 -428.6289 c
174.3848 -429.2861 173.9419 -430.083 173.7065 -431.1875 c
173.6045 -431.6768 173.5645 -432.2637 173.6294 -432.7969 c
173.6919 -433.333 173.8486 -433.8379 174.0732 -434.2793 c
174.5415 -435.1924 175.1372 -435.7031 175.6489 -436.0547 c
175.772 -436.1367 175.8691 -436.2324 175.9551 -436.333 C
175.9326 -436.3555 175.9116 -436.377 175.8892 -436.3984 c
174.1685 -438.0605 172.5537 -438.9355 171.0049 -439.2695 c
170.376 -439.4121 169.8276 -439.1895 169.3745 -438.958 C
169.354 -438.6592 169.3027 -438.4463 169.2319 -438.2949 C
169.1606 -437.7793 168.8545 -437.0166 168.6362 -435.8555 c
168.3179 -434.3496 168.0806 -432.1982 168.0889 -429.7842 C
168.439 -429.5156 168.8252 -429.2041 169.3262 -429.0527 c
170.7041 -428.6523 172.1636 -427.5195 173.209 -426.0889 c
174.3828 -424.499 174.9775 -422.8945 175.2158 -421.6758 c
175.4453 -420.4521 175.3042 -419.5928 174.8242 -419.3672 c
173.8306 -418.8887 171.957 -421.2305 170.1143 -423.7832 c
169.4189 -424.7236 168.8057 -425.4883 168.2686 -426.0996 C
168.3721 -424.9609 168.5034 -423.9072 168.6279 -422.9951 c
168.771 -421.9443 169.5703 -421.3447 169.9048 -420.8828 c
170.2432 -420.416 170.1411 -420.0186 168.5884 -419.2188 c
167.0732 -418.4375 166.6426 -418.6563 166.4546 -419.3252 c
166.2671 -419.999 166.3525 -421.0615 165.8359 -422.1211 c
164.9761 -423.875 164.2749 -426.3838 164.2324 -429.1914 c
164.1743 -432.2959 164.9448 -435.1416 166.1396 -436.959 c
166.7192 -437.8545 167.4038 -438.4854 167.9927 -438.7803 C
167.8257 -438.9746 167.668 -439.3262 167.5107 -439.8857 C
166.3911 -441.9902 164.896 -445.7461 163.3257 -450.2559 C
162.4316 -449.626 161.3091 -448.7891 160.2461 -447.5635 c
159.0088 -446.1465 157.9497 -444.1855 157.4229 -441.7412 c
156.8804 -439.3037 156.8428 -436.4336 157.1836 -433.4082 c
157.8203 -427.9277 159.356 -422.9268 160.5298 -419.1025 c
161.2588 -416.7676 162.5513 -415.1592 163.2422 -413.9814 c
163.9375 -412.7949 164.0386 -412.0283 162.5015 -411.2021 c
160.9985 -410.3926 160.3535 -411.0049 159.8276 -412.3457 c
159.2993 -413.6943 158.8931 -415.7578 157.8066 -418.0332 c
157.1123 -419.5098 156.3872 -421.207 155.7158 -423.082 C
155.3086 -423.0469 154.8271 -422.9502 154.5728 -422.4873 c
154.2988 -421.9561 154.125 -421.3623 154.0713 -420.6074 c
154.0156 -419.8564 154.0952 -418.9414 154.2847 -417.9375 c
154.7188 -415.7002 155.478 -413.5283 155.8896 -411.8887 c
156.3169 -410.2422 156.4385 -409.0908 155.9702 -408.8262 c
155.5112 -408.5664 154.5454 -409.2461 153.4424 -410.6797 c
152.3638 -412.1211 151.0737 -414.3008 150.4912 -417.2266 c
150.2441 -418.5459 150.1997 -419.9316 150.5171 -421.2432 c
150.8174 -422.5547 151.5483 -423.7285 152.3877 -424.4326 c
153.355 -425.2539 153.9985 -426.1172 154.6143 -426.5479 C
154.0654 -428.543 153.6162 -430.6953 153.3472 -432.9814 c
152.9717 -436.332 153.1035 -439.6826 153.9829 -442.6426 c
154.832 -445.6074 156.5303 -448.0566 158.3535 -449.5293 c
159.9956 -450.876 161.5938 -451.5273 162.7808 -451.8438 C
162.6118 -452.3438 162.4414 -452.8496 162.2715 -453.3633 c
160.9756 -457.2842 159.8877 -460.9023 159.1777 -463.7383 c
158.7461 -465.4639 157.7764 -466.6504 157.3325 -467.582 c
156.8867 -468.5107 156.9702 -469.1953 158.6426 -469.6924 c
160.2793 -470.1797 160.6841 -469.7881 160.9087 -468.8242 c
161.1313 -467.8604 161.165 -466.335 161.9316 -464.7246 c
163.1934 -462.0762 164.627 -458.5342 165.9355 -454.5762 c
167.5356 -449.7412 168.6182 -445.3193 169.1006 -442.2686 C
169.6875 -442.1982 170.3652 -442.1201 171.1436 -442.1914 c
172.2334 -442.2939 173.5913 -442.1426 174.9102 -441.6074 c
176.2329 -441.0801 177.4761 -440.2178 178.5459 -439.1973 c
180.9063 -436.9092 182.2251 -434.4277 182.9966 -432.5801 c
183.749 -430.7139 183.8926 -429.4238 183.4346 -429.165 c
f
867.0449 -422.2031 m
866.5459 -421.999 865.6689 -422.9326 864.5596 -424.4941 c
863.8701 -425.4512 863.0957 -426.6699 862.2148 -427.9434 C
862.1582 -427.8955 862.1074 -427.8428 862.0645 -427.7734 c
861.5469 -426.9229 861.4287 -426.4727 861.4922 -425.7061 c
861.5752 -424.6758 861.9717 -423.2207 862.0547 -422.166 c
862.1592 -421.085 862.0205 -420.2822 861.5391 -420.0488 c
861.0615 -419.8193 860.333 -420.1943 859.5625 -421.0537 c
859.1797 -421.4873 858.7842 -422.043 858.4268 -422.7412 c
858.0801 -423.4463 857.7393 -424.292 857.6436 -425.417 c
857.6025 -425.916 857.6357 -426.5029 857.7656 -427.0244 c
857.8945 -427.5479 858.1133 -428.0293 858.3906 -428.4395 c
858.9688 -429.2881 859.623 -429.7207 860.1738 -430.0059 c
860.3066 -430.0723 860.415 -430.1553 860.5127 -430.2441 C
860.4932 -430.2695 860.4756 -430.293 860.4551 -430.3174 c
858.9541 -432.1797 857.4609 -433.249 855.9658 -433.7725 c
855.3594 -433.9922 854.7881 -433.8389 854.3096 -433.665 C
854.251 -433.3721 854.1738 -433.167 854.0859 -433.0254 C
853.9502 -432.5225 853.5518 -431.8037 853.1924 -430.6787 c
852.6895 -429.2236 852.1855 -427.1191 851.8945 -424.7227 C
852.209 -424.4121 852.5537 -424.0547 853.0322 -423.8428 c
854.3496 -423.2744 855.6572 -421.9697 856.5166 -420.4199 c
857.4844 -418.6973 857.875 -417.0313 857.9609 -415.792 c
858.0361 -414.5488 857.79 -413.7139 857.2852 -413.5498 c
856.2393 -413.1982 854.6719 -415.7549 853.1602 -418.5166 c
852.5869 -419.5361 852.0732 -420.3701 851.6162 -421.0439 C
851.5771 -419.9014 851.5771 -418.8389 851.5869 -417.9189 c
851.5996 -416.8584 852.3174 -416.1641 852.5918 -415.6641 c
852.8701 -415.1592 852.7188 -414.7773 851.0791 -414.1768 c
849.4785 -413.5889 849.0791 -413.8594 848.9756 -414.5469 c
848.873 -415.2383 849.0898 -416.2822 848.708 -417.3975 c
848.0732 -419.2451 847.6885 -421.8213 847.9951 -424.6123 c
848.3223 -427.7002 849.4404 -430.4287 850.8516 -432.083 c
851.5371 -432.9004 852.2949 -433.4414 852.915 -433.6611 C
852.7744 -433.874 852.6611 -434.2422 852.5752 -434.8174 C
851.7246 -437.0449 850.708 -440.957 849.71 -445.627 C
848.7441 -445.1123 847.5254 -444.4219 846.3193 -443.3369 c
844.916 -442.085 843.6211 -440.2705 842.7949 -437.9102 c
841.9551 -435.5586 841.5605 -432.7158 841.5234 -429.6719 c
841.4756 -424.1543 842.3779 -419.002 843.0684 -415.0615 c
843.502 -412.6533 844.585 -410.8975 845.125 -409.6426 c
845.667 -408.3799 845.6729 -407.6064 844.0449 -406.9775 c
842.4521 -406.3604 841.8887 -407.0479 841.5342 -408.4434 c
841.1758 -409.8477 841.0293 -411.9453 840.2334 -414.3379 c
839.7285 -415.8896 839.2188 -417.6631 838.7861 -419.6074 C
838.377 -419.623 837.8877 -419.5869 837.5771 -419.1592 c
837.2402 -418.666 836.9941 -418.0986 836.8467 -417.3555 c
836.6982 -416.6172 836.6641 -415.7002 836.7275 -414.6797 c
836.8799 -412.4063 837.3643 -410.1572 837.5693 -408.4785 c
837.7881 -406.792 837.7666 -405.6348 837.2695 -405.4297 c
836.7822 -405.2295 835.9072 -406.0234 834.9912 -407.583 c
834.0986 -409.1475 833.0898 -411.4697 832.875 -414.4453 c
832.793 -415.7852 832.9209 -417.166 833.3994 -418.4277 c
833.8594 -419.6924 834.7314 -420.7656 835.6514 -421.3604 c
836.7129 -422.0557 837.458 -422.832 838.123 -423.1826 C
837.8262 -425.2305 837.6475 -427.4219 837.6641 -429.7236 c
837.707 -433.0957 838.2539 -436.4033 839.4932 -439.2314 c
840.7041 -442.0684 842.6934 -444.2881 844.6855 -445.5225 c
846.4824 -446.6553 848.1484 -447.1035 849.3662 -447.2695 C
849.2598 -447.7871 849.1533 -448.3105 849.0488 -448.8408 c
848.249 -452.8926 847.6191 -456.6172 847.2666 -459.5195 c
847.0518 -461.2852 846.2373 -462.583 845.9121 -463.5625 c
845.585 -464.5391 845.7539 -465.208 847.4746 -465.4941 c
849.1592 -465.7744 849.5117 -465.3359 849.6143 -464.3516 c
849.7158 -463.3672 849.5605 -461.8496 850.1211 -460.1563 c
851.0449 -457.3721 852.0273 -453.6797 852.835 -449.5898 c
853.8223 -444.5938 854.3477 -440.0713 854.4482 -436.9844 C
855.0215 -436.8418 855.6846 -436.6807 856.4658 -436.6543 c
857.5596 -436.6211 858.8887 -436.3018 860.1309 -435.6074 c
861.377 -434.9199 862.5049 -433.9102 863.4395 -432.7646 c
865.4971 -430.2012 866.498 -427.5752 867.0342 -425.6465 c
867.5498 -423.7012 867.5313 -422.4033 867.0449 -422.2031 c
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
