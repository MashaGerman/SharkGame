%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Barrels.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Daniel
%%CreationDate: 5/2/2015
%%BoundingBox: 0 0 188 62
%%HiResBoundingBox: 0 0 187.6700 61.9029
%%CropBox: 0 0 187.6700 61.9029
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2015-05-02T11:38:18+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-05-02T11:38:18+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-05-02T11:38:18+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>84</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAVAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9K+ZfM2j+WtIm1bV5/Qt&#xA;IqAUBZ3dtljjUbszHoP4Yq8K8zfnv5y1G4Nvo8a6Hbsf3Uaxrd6gy9ufKsMfIb8QrEeOSEUWxK5t&#xA;/PmtfFfS390GNT9fvZeP0RK8Sr8guS4UWoDyFqhFTZafU7nlyJ38SQcPCttx+T/Mdo3OztI0ZTy5&#xA;2U8kDV8QVdP1Y8K2mth+YX5j+XZlDapexRgj9xqi/Xrdqfs+o4EwH+q+RMVt675A/Oey1+8h0fW7&#xA;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&#xA;H0Y/Q4+hxHpcKcOFPh402pTpme6Z/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:052928EAAEF0E4119CFCC5E12360082C</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:052928EAAEF0E4119CFCC5E12360082C</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:c72fab06-01ab-438d-a15d-b817a2016f04</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3b400f0b-a4f2-4824-81b2-055a19cc599d</stRef:instanceID>
            <stRef:documentID>xmp.did:34F7A303BCEFE4119C32B31826743B7C</stRef:documentID>
            <stRef:originalDocumentID>uuid:c72fab06-01ab-438d-a15d-b817a2016f04</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EABA9D3C41CAE31183D9F8B2C8518B35</stEvt:instanceID>
                  <stEvt:when>2014-04-22T19:22:03+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:34F7A303BCEFE4119C32B31826743B7C</stEvt:instanceID>
                  <stEvt:when>2015-05-01T07:11:11+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:052928EAAEF0E4119CFCC5E12360082C</stEvt:instanceID>
                  <stEvt:when>2015-05-02T11:38:18+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">barrel</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>192.000000</stDim:w>
            <stDim:h>72.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -61.9028 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 61.9028 li
187.67 61.9028 li
187.67 0 li
cp
clp
[1 0 0 1 0 0 ]ct
117.936 1 mo
108.41 1 100.32 4.18066 99.9883 8.10693 cv
99.6133 13.5273 99.3711 18.9575 99.2627 24.3901 cv
99.0664 34.2378 99.3096 44.0942 99.9902 53.9194 cv
100.594 57.7476 108.568 60.8237 117.936 60.8237 cv
127.303 60.8237 135.281 57.7476 135.888 53.9194 cv
136.577 44.0942 136.822 34.2378 136.624 24.3901 cv
136.515 18.9575 136.27 13.5273 135.891 8.10693 cv
135.555 4.18066 127.461 1 117.936 1 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.192157 .694118 .909804 rgb
f
117.956 0 mo
108.978 -.00585938 99.4355 2.98877 99.0078 8.00977 cv
98.6279 13.4424 98.3789 18.9365 98.2666 24.3569 cv
98.0645 34.1909 98.3037 44.1567 98.9766 53.9761 cv
98.9795 54.0044 98.9824 54.0337 98.9863 54.062 cv
99.6807 58.481 107.817 61.8169 117.915 61.8237 cv
128.013 61.8306 136.157 58.5044 136.859 54.0884 cv
136.864 54.0601 136.867 54.0308 136.869 54.0024 cv
137.564 44.1938 137.82 34.229 137.628 24.3833 cv
137.522 18.9688 137.279 13.4731 136.904 8.0498 cv
136.476 3.0127 126.935 .00585938 117.956 0 cv
117.956 0 li
cp
117.955 1 mo
127.48 1.00635 135.572 4.19238 135.906 8.11914 cv
136.281 13.5396 136.522 18.9697 136.628 24.4028 cv
136.82 34.2505 136.568 44.1069 135.872 53.9312 cv
135.264 57.7593 127.283 60.8296 117.916 60.8237 cv
108.549 60.8179 100.576 57.7358 99.9746 53.9077 cv
99.3008 44.0815 99.0645 34.2251 99.2666 24.3774 cv
99.3789 18.9453 99.625 13.5151 100.004 8.09473 cv
100.338 4.16895 108.43 .993652 117.955 1 cv
117.955 1 li
cp
.309804 .164706 .0509804 rgb
f
133.267 7.49072 mo
133.488 10.5811 126.499 13.0903 117.718 13.0903 cv
108.935 13.0903 101.946 10.5811 102.171 7.49072 cv
102.404 4.3999 109.396 1.89844 117.723 1.89844 cv
126.048 1.89844 133.035 4.3999 133.267 7.49072 cv
cp
.160784 .580392 .760784 rgb
f
117.722 3.71387 mo
125.29 3.71387 131.704 5.7417 133.099 8.3999 cv
133.216 8.10352 133.286 7.80127 133.267 7.49072 cv
133.035 4.3999 126.048 1.89844 117.723 1.89844 cv
109.396 1.89844 102.404 4.3999 102.171 7.49072 cv
102.151 7.80127 102.221 8.10352 102.338 8.3999 cv
103.736 5.7417 110.15 3.71387 117.722 3.71387 cv
cp
.117647 .384314 .568627 rgb
f
128.418 7.58301 mo
128.469 8.71045 126.591 9.62402 124.23 9.62402 cv
121.865 9.62402 119.949 8.71045 119.943 7.58301 cv
119.938 6.4541 121.808 5.54004 124.128 5.54004 cv
126.442 5.54004 128.367 6.4541 128.418 7.58301 cv
cp
.192157 .694118 .909804 rgb
f
131.793 58.2212 mo
129.488 59.3159 126.449 60.1372 123.019 60.5405 cv
122.891 60.021 122.834 59.394 122.86 58.2749 cv
122.928 55.4409 121.949 55.4409 121.993 52.603 cv
122.032 49.7651 123.281 49.7651 123.326 46.9233 cv
123.364 44.0845 123.648 44.0845 123.679 41.2417 cv
123.706 38.3979 121.657 38.3979 121.666 35.5522 cv
121.673 32.7095 121.784 32.7095 121.784 29.8667 cv
121.78 27.0195 122.386 27.0195 122.373 24.1743 cv
122.357 21.3276 123.143 21.3276 123.113 18.4814 cv
123.099 17.1719 122.986 16.4678 122.947 15.8232 cv
126.869 15.4331 130.257 14.5459 132.636 13.3491 cv
132.281 13.9678 131.977 14.6787 132.015 15.7368 cv
132.109 18.5747 132.634 18.5747 132.706 21.4136 cv
132.765 24.2534 134.262 24.2534 134.298 27.0952 cv
134.321 29.936 133.949 29.936 133.942 32.7769 cv
133.923 35.6167 133.167 35.6167 133.121 38.4595 cv
133.062 41.2974 133.058 41.2974 132.972 44.1353 cv
132.871 46.9741 131.623 46.9741 131.509 49.813 cv
131.382 52.6519 132.071 52.6519 131.909 55.4888 cv
131.829 56.8394 131.81 57.5444 131.793 58.2212 cv
cp
.270588 .780392 1 rgb
f
110.385 17.5547 mo
110.34 20.4438 110.752 20.4438 110.724 23.335 cv
110.701 26.2271 109.898 26.2275 109.889 29.1187 cv
109.885 32.0112 108.753 32.0112 108.767 34.9028 cv
108.787 37.7954 110.52 37.7954 110.548 40.688 cv
110.585 43.5796 110.588 43.5806 110.638 46.4663 cv
110.692 49.355 109.515 49.355 109.599 52.2456 cv
109.687 55.1343 110.144 55.0972 110.589 57.9634 cv
110.739 58.9399 110.864 59.6128 110.923 60.1782 cv
108.3 59.689 105.995 58.9458 104.191 58.0269 cv
104.269 57.4175 104.368 56.7173 104.3 55.5132 cv
104.145 52.6206 102.73 52.6196 102.584 49.7271 cv
102.45 46.8315 104.049 46.8315 103.959 43.9351 cv
103.881 41.0396 102.33 41.0396 102.271 38.1401 cv
102.224 35.2407 103.352 35.2397 103.336 32.3413 cv
103.333 29.4443 102.965 29.4443 102.989 26.5454 cv
103.027 23.646 104.054 23.646 104.113 20.7456 cv
104.185 17.8457 102.58 17.8457 102.692 14.9463 cv
102.735 13.8853 102.867 13.2407 103.064 12.7124 cv
104.838 13.8491 107.45 14.7676 110.576 15.3496 cv
110.493 15.9209 110.401 16.5923 110.385 17.5547 cv
cp
f
127.967 8.09375 mo
128.008 9.06445 126.388 9.85156 124.354 9.85156 cv
122.316 9.85156 120.664 9.06445 120.656 8.09375 cv
120.647 7.12207 122.261 6.33447 124.266 6.33447 cv
126.267 6.33447 127.926 7.12207 127.967 8.09375 cv
cp
.309804 .164706 .0509804 rgb
f
118.12 14.5884 mo
108.999 14.5889 101.488 11.8623 99.9795 8.23389 cv
99.9385 8.83984 99.8984 9.4458 99.8594 10.0522 cv
101.403 13.6826 108.961 16.4092 118.121 16.4092 cv
126.777 16.4092 134.005 13.9707 136.058 10.6372 cv
136.02 10.0308 135.98 9.42432 135.939 8.81836 cv
133.922 12.1504 126.737 14.5889 118.12 14.5884 cv
cp
.117647 .384314 .568627 rgb
f
117.867 29.9946 mo
126.033 29.9863 132.876 28.4731 136.654 26.125 cv
136.646 25.5469 136.636 24.9688 136.624 24.3906 cv
136.604 23.3945 136.579 22.3984 136.55 21.4023 cv
135.184 24.0225 127.846 26.6489 117.952 26.6587 cv
108.048 26.6694 100.696 24.0508 99.334 21.4844 cv
99.3057 22.4531 99.2822 23.4219 99.2627 24.3906 cv
99.251 25.0215 99.2393 25.6523 99.2305 26.2832 cv
103.064 28.5542 109.828 30.0024 117.867 29.9946 cv
cp
f
136.399 14.8623 mo
136.466 16.1592 136.525 17.4565 136.577 18.7544 cv
136.478 21.6338 128.759 24.8501 117.953 24.8608 cv
117.935 24.8608 117.915 24.8608 117.893 24.8608 cv
107.116 24.8608 99.416 21.6655 99.3105 18.8643 cv
99.3574 17.5454 99.4121 16.2271 99.4746 14.9092 cv
98.8457 15.5532 98.2148 16.1978 97.584 16.8418 cv
96.6621 17.7822 96.1475 18.8306 96.1074 19.8726 cv
95.9082 24.6357 105.314 28.2222 117.805 28.2217 cv
117.825 28.2217 117.848 28.2217 117.869 28.2217 cv
130.363 28.21 139.773 24.6001 139.561 19.8281 cv
139.521 18.8789 139.101 17.9272 138.347 17.0737 cv
137.696 16.3364 137.047 15.5991 136.399 14.8623 cv
136.399 14.8623 li
cp
98.3887 17.3477 mo
98.3672 17.8535 98.3477 18.3594 98.3281 18.8652 cv
98.3271 18.8882 98.3271 18.9106 98.3291 18.9336 cv
98.4727 22.7075 107.302 25.7798 117.894 25.7793 cv
117.913 25.7793 117.934 25.7793 117.954 25.7793 cv
128.577 25.7681 137.427 22.646 137.559 18.8213 cv
137.56 18.7988 137.56 18.7754 137.559 18.7524 cv
137.542 18.3442 137.523 17.9365 137.505 17.5283 cv
137.537 17.5654 137.57 17.6021 137.603 17.6387 cv
138.21 18.3291 138.547 19.0869 138.576 19.8291 cv
138.652 21.7412 136.708 23.5645 133.089 24.9614 cv
129.195 26.4658 123.778 27.2979 117.868 27.3037 cv
117.847 27.3037 117.825 27.3037 117.805 27.3037 cv
106.084 27.3037 96.9229 24.0381 97.0918 19.8716 cv
97.1221 19.0552 97.54 18.2163 98.293 17.4453 cv
98.3252 17.4126 98.3564 17.3804 98.3887 17.3477 cv
98.3887 17.3477 li
cp
.309804 .164706 .0509804 rgb
f
137.603 17.6387 mo
137.57 17.6021 137.537 17.5654 137.505 17.5283 cv
137.523 17.9365 137.542 18.3442 137.559 18.7524 cv
137.56 18.7754 137.56 18.7988 137.559 18.8213 cv
137.427 22.646 128.577 25.7681 117.954 25.7793 cv
117.934 25.7793 117.913 25.7793 117.894 25.7793 cv
107.303 25.7798 98.4727 22.7075 98.3291 18.9336 cv
98.3271 18.9106 98.3271 18.8882 98.3281 18.8652 cv
98.3477 18.3594 98.3672 17.8535 98.3887 17.3477 cv
98.3564 17.3804 98.3252 17.4126 98.293 17.4453 cv
97.54 18.2163 97.1221 19.0552 97.0918 19.8716 cv
96.9229 24.0381 106.084 27.3037 117.805 27.3037 cv
117.825 27.3037 117.847 27.3037 117.868 27.3037 cv
123.778 27.2979 129.195 26.4658 133.089 24.9614 cv
136.708 23.5645 138.652 21.7412 138.576 19.8291 cv
138.547 19.0869 138.21 18.3291 137.603 17.6387 cv
cp
.192157 .694118 .909804 rgb
f
108.959 24.9971 mo
102.753 23.8516 98.4355 21.5654 98.3291 18.9336 cv
98.3271 18.9106 98.3271 18.8882 98.3281 18.8652 cv
98.3477 18.3594 98.3672 17.8535 98.3887 17.3477 cv
98.3564 17.3804 98.3252 17.4126 98.293 17.4453 cv
97.54 18.2163 97.1221 19.0552 97.0918 19.8716 cv
96.9609 23.1885 102.741 25.9287 111.023 26.9102 cv
110.271 26.3228 109.58 25.6836 108.959 24.9971 cv
cp
.160784 .580392 .760784 rgb
f
137.603 17.6387 mo
137.57 17.6021 137.537 17.5654 137.505 17.5283 cv
137.523 17.9365 137.542 18.3442 137.559 18.7524 cv
137.56 18.7754 137.56 18.7988 137.559 18.8213 cv
137.504 20.2183 136.289 21.5195 134.253 22.6118 cv
133.132 23.8647 131.78 24.9673 130.231 25.8682 cv
131.25 25.5991 132.213 25.3003 133.089 24.9614 cv
136.708 23.5645 138.652 21.7412 138.576 19.8291 cv
138.547 19.0869 138.21 18.3291 137.603 17.6387 cv
cp
.580392 .87451 1 rgb
f
136.324 48.5757 mo
136.257 49.8726 136.182 51.1685 136.099 52.4634 cv
135.646 55.3403 128.045 58.5454 117.946 58.5562 cv
117.929 58.5562 117.91 58.5562 117.89 58.5562 cv
107.817 58.5562 100.24 55.3716 99.7939 52.5737 cv
99.7061 51.2573 99.626 49.9399 99.5537 48.6216 cv
98.9932 49.2661 98.4375 49.9106 97.8877 50.5542 cv
97.084 51.4937 96.71 52.5405 96.7949 53.5806 cv
97.2646 58.3345 106.375 61.9028 117.807 61.9028 cv
117.826 61.9028 117.847 61.9028 117.866 61.9028 cv
129.301 61.8911 138.421 58.2993 138.879 53.5356 cv
138.954 52.5874 138.658 51.6382 138.013 50.7847 cv
137.457 50.0483 136.894 49.312 136.324 48.5757 cv
136.324 48.5757 li
cp
98.7344 51.0591 mo
98.7676 51.5649 98.8018 52.0708 98.8379 52.5757 cv
98.8398 52.5981 98.8418 52.6196 98.8457 52.6431 cv
99.4629 56.4106 108.047 59.4712 117.89 59.4712 cv
117.908 59.4712 117.928 59.4712 117.946 59.4712 cv
127.818 59.4604 136.431 56.3501 137.048 52.5308 cv
137.052 52.5083 137.055 52.4849 137.056 52.4614 cv
137.083 52.0542 137.109 51.647 137.136 51.2397 cv
137.163 51.2769 137.191 51.313 137.22 51.3501 cv
137.739 52.0396 137.981 52.7954 137.926 53.5356 cv
137.78 55.4458 135.701 57.2642 132.185 58.6558 cv
128.393 60.1558 123.347 60.9839 117.865 60.9888 cv
117.846 60.9888 117.826 60.9888 117.807 60.9888 cv
107.015 60.9888 98.1406 57.7388 97.748 53.5786 cv
97.6836 52.7642 97.9941 51.9282 98.6514 51.1577 cv
98.6787 51.1245 98.707 51.0923 98.7344 51.0591 cv
98.7344 51.0591 li
cp
.309804 .164706 .0509804 rgb
f
137.22 51.3501 mo
137.191 51.313 137.163 51.2769 137.136 51.2397 cv
137.109 51.647 137.083 52.0542 137.056 52.4614 cv
137.055 52.4849 137.052 52.5083 137.048 52.5308 cv
136.431 56.3501 127.818 59.4604 117.946 59.4712 cv
117.928 59.4712 117.908 59.4712 117.89 59.4712 cv
108.047 59.4712 99.4629 56.4106 98.8457 52.6431 cv
98.8418 52.6196 98.8389 52.5981 98.8379 52.5757 cv
98.8018 52.0708 98.7676 51.5649 98.7344 51.0591 cv
98.707 51.0923 98.6787 51.1245 98.6514 51.1577 cv
97.9941 51.9282 97.6836 52.7642 97.748 53.5786 cv
98.1406 57.7388 107.015 60.9888 117.807 60.9888 cv
117.826 60.9888 117.846 60.9888 117.865 60.9888 cv
123.347 60.9839 128.393 60.1558 132.185 58.6558 cv
135.701 57.2642 137.78 55.4458 137.926 53.5356 cv
137.981 52.7954 137.739 52.0396 137.22 51.3501 cv
cp
.192157 .694118 .909804 rgb
f
109.486 58.6909 mo
103.612 57.5503 99.2471 55.27 98.8457 52.6431 cv
98.8418 52.6196 98.8389 52.5981 98.8379 52.5757 cv
98.8018 52.0708 98.7676 51.5649 98.7344 51.0591 cv
98.707 51.0923 98.6787 51.1245 98.6514 51.1577 cv
97.9941 51.9282 97.6836 52.7642 97.748 53.5786 cv
98.0303 56.8911 103.793 59.6206 111.499 60.5972 cv
110.776 60.0112 110.104 59.3755 109.486 58.6909 cv
cp
.160784 .580392 .760784 rgb
f
137.22 51.3501 mo
137.191 51.313 137.163 51.2769 137.136 51.2397 cv
137.109 51.647 137.083 52.0542 137.056 52.4614 cv
137.055 52.4849 137.052 52.5083 137.048 52.5308 cv
136.844 53.9253 135.526 55.2241 133.489 56.313 cv
132.309 57.562 130.945 58.6626 129.436 59.5591 cv
130.407 59.2915 131.332 58.9946 132.185 58.6558 cv
135.701 57.2642 137.78 55.4458 137.926 53.5356 cv
137.981 52.7954 137.739 52.0396 137.22 51.3501 cv
cp
.580392 .87451 1 rgb
f
117.866 49.1245 mo
125.807 49.1167 132.51 47.6069 136.38 45.2603 cv
136.405 44.6831 136.429 44.106 136.451 43.5278 cv
136.489 42.5317 136.522 41.5356 136.552 40.5396 cv
135.007 43.1587 127.654 45.7847 117.95 45.7935 cv
108.235 45.8042 100.873 43.188 99.3369 40.6216 cv
99.3652 41.5913 99.3975 42.5591 99.4346 43.5278 cv
99.458 44.1577 99.4834 44.7876 99.5107 45.4175 cv
103.427 47.688 110.05 49.1333 117.866 49.1245 cv
cp
.117647 .384314 .568627 rgb
f
136.785 34.0024 mo
136.775 35.3003 136.759 36.5981 136.734 37.896 cv
136.43 40.7778 128.601 43.9917 117.952 44.0034 cv
117.934 44.0034 117.914 44.0034 117.893 44.0034 cv
107.271 44.0034 99.4658 40.8091 99.1621 38.0063 cv
99.1318 36.687 99.1104 35.3677 99.0957 34.0483 cv
98.4922 34.6929 97.8906 35.3374 97.292 35.9829 cv
96.417 36.9243 95.9717 37.9722 96.002 39.0161 cv
96.1826 43.7798 105.634 47.3599 117.805 47.3599 cv
117.825 47.3599 117.848 47.3599 117.868 47.3599 cv
130.043 47.3472 139.502 43.7446 139.669 38.9712 cv
139.695 38.02 139.336 37.0679 138.628 36.2144 cv
138.017 35.4771 137.402 34.7397 136.785 34.0024 cv
136.785 34.0024 li
cp
98.1396 36.4878 mo
98.1484 36.9946 98.1592 37.5015 98.1719 38.0083 cv
98.1719 38.0298 98.1738 38.0522 98.1768 38.0757 cv
98.5957 41.8501 107.486 44.9204 117.893 44.9204 cv
117.912 44.9204 117.933 44.9204 117.953 44.9204 cv
128.389 44.9087 137.306 41.7896 137.72 37.9634 cv
137.723 37.9399 137.724 37.9175 137.725 37.894 cv
137.732 37.4858 137.739 37.0776 137.746 36.6694 cv
137.776 36.7065 137.808 36.7427 137.838 36.7798 cv
138.409 37.4712 138.699 38.229 138.68 38.9712 cv
138.631 40.8843 136.564 42.7075 132.921 44.103 cv
128.996 45.6069 123.668 46.437 117.867 46.4429 cv
117.847 46.4429 117.825 46.4429 117.805 46.4429 cv
106.347 46.4429 97.1416 43.1821 96.9912 39.0142 cv
96.9678 38.1978 97.333 37.3579 98.0479 36.5864 cv
98.0781 36.5542 98.1084 36.521 98.1396 36.4878 cv
98.1396 36.4878 li
cp
.309804 .164706 .0509804 rgb
f
137.838 36.7798 mo
137.808 36.7427 137.776 36.7065 137.746 36.6694 cv
137.739 37.0776 137.732 37.4858 137.725 37.894 cv
137.724 37.9175 137.723 37.9399 137.72 37.9634 cv
137.305 41.7896 128.389 44.9087 117.953 44.9204 cv
117.933 44.9204 117.912 44.9204 117.893 44.9204 cv
107.486 44.9204 98.5957 41.8501 98.1768 38.0757 cv
98.1738 38.0522 98.1719 38.0298 98.1719 38.0083 cv
98.1592 37.5015 98.1484 36.9946 98.1396 36.4878 cv
98.1084 36.521 98.0781 36.5542 98.0479 36.5864 cv
97.333 37.3579 96.9678 38.1978 96.9912 39.0142 cv
97.1416 43.1821 106.347 46.4429 117.805 46.4429 cv
117.825 46.4429 117.847 46.4429 117.867 46.4429 cv
123.668 46.437 128.996 45.6069 132.921 44.103 cv
136.564 42.7075 138.631 40.8843 138.68 38.9712 cv
138.699 38.229 138.409 37.4712 137.838 36.7798 cv
cp
.192157 .694118 .909804 rgb
f
109.058 44.1382 mo
102.899 42.9946 98.4561 40.7085 98.1768 38.0757 cv
98.1738 38.0522 98.1719 38.0298 98.1719 38.0083 cv
98.1592 37.5015 98.1484 36.9946 98.1396 36.4878 cv
98.1084 36.521 98.0781 36.5542 98.0479 36.5864 cv
97.333 37.3579 96.9678 38.1978 96.9912 39.0142 cv
97.0947 42.3325 102.997 45.0698 111.14 46.0503 cv
110.387 45.4634 109.69 44.8237 109.058 44.1382 cv
cp
.160784 .580392 .760784 rgb
f
137.838 36.7798 mo
137.808 36.7427 137.776 36.7065 137.746 36.6694 cv
137.739 37.0776 137.732 37.4858 137.725 37.894 cv
137.724 37.9175 137.723 37.9399 137.72 37.9634 cv
137.577 39.3608 136.276 40.6626 134.192 41.7544 cv
133.011 43.0063 131.622 44.1089 130.061 45.0093 cv
131.075 44.7407 132.038 44.4419 132.921 44.103 cv
136.564 42.7075 138.631 40.8843 138.68 38.9712 cv
138.699 38.229 138.409 37.4712 137.838 36.7798 cv
cp
.580392 .87451 1 rgb
f
118.368 24.4253 mo
111.969 24.4253 106.78 29.6123 106.78 36.0132 cv
106.78 42.4126 111.969 47.603 118.368 47.603 cv
124.771 47.603 129.958 42.4126 129.958 36.0132 cv
129.958 29.6123 124.771 24.4253 118.368 24.4253 cv
cp
.878431 .701961 .133333 rgb
f
118.368 23.5562 mo
111.501 23.5562 105.911 29.1436 105.911 36.0132 cv
105.911 42.8833 111.501 48.4731 118.368 48.4731 cv
125.237 48.4731 130.827 42.8833 130.827 36.0132 cv
130.827 29.1436 125.237 23.5562 118.368 23.5562 cv
118.368 23.5562 li
cp
118.368 24.4253 mo
124.771 24.4253 129.958 29.6123 129.958 36.0132 cv
129.958 42.4126 124.771 47.603 118.368 47.603 cv
111.969 47.603 106.78 42.4126 106.78 36.0132 cv
106.78 29.6123 111.969 24.4253 118.368 24.4253 cv
118.368 24.4253 li
cp
.309804 .164706 .0509804 rgb
f
118.368 27.5156 mo
124.244 27.5156 129.085 31.8911 129.844 37.5571 cv
129.909 37.0522 129.958 36.5396 129.958 36.0132 cv
129.958 29.6123 124.771 24.4253 118.368 24.4253 cv
111.969 24.4253 106.78 29.6123 106.78 36.0132 cv
106.78 36.5396 106.825 37.0522 106.896 37.5571 cv
107.651 31.8911 112.493 27.5156 118.368 27.5156 cv
cp
.960784 .913725 .470588 rgb
f
122.673 36.064 mo
128.173 36.062 li
128.167 32.6841 126.412 29.3984 123.274 27.5869 cv
120.508 32.3804 li
121.79 33.1177 122.664 34.4839 122.673 36.064 cv
cp
.309804 .164706 .0509804 rgb
f
116.227 32.3823 mo
113.461 27.5918 li
112.024 28.4233 110.776 29.6309 109.887 31.1733 cv
108.992 32.7231 108.568 34.4146 108.571 36.0825 cv
114.068 36.0854 li
114.069 34.4995 114.944 33.1265 116.227 32.3823 cv
cp
f
118.37 40.4019 mo
117.584 40.4019 116.857 40.1743 116.223 39.8062 cv
113.478 44.563 li
116.611 46.3706 120.327 46.2534 123.254 44.5747 cv
120.507 39.814 li
119.876 40.1792 119.151 40.4019 118.37 40.4019 cv
cp
f
120.955 36.0933 mo
120.955 37.5229 119.799 38.6802 118.371 38.6802 cv
116.942 38.6802 115.787 37.5229 115.787 36.0933 cv
115.787 34.6694 116.942 33.5112 118.371 33.5112 cv
119.799 33.5112 120.955 34.6694 120.955 36.0933 cv
cp
f
117.866 49.1245 mo
115.93 49.1265 114.066 49.0396 112.299 48.8726 cv
114.065 49.9624 116.14 50.603 118.368 50.603 cv
120.701 50.603 122.869 49.9077 124.688 48.7212 cv
122.556 48.98 120.269 49.1226 117.866 49.1245 cv
cp
.117647 .384314 .568627 rgb
f
165.935 1 mo
156.409 1 148.319 4.18066 147.987 8.10693 cv
147.612 13.5273 147.37 18.9575 147.263 24.3901 cv
147.065 34.2378 147.31 44.0942 147.989 53.9194 cv
148.593 57.7476 156.567 60.8237 165.935 60.8237 cv
175.302 60.8237 183.28 57.7476 183.888 53.9194 cv
184.577 44.0942 184.821 34.2378 184.624 24.3901 cv
184.515 18.9575 184.269 13.5273 183.89 8.10693 cv
183.554 4.18066 175.46 1 165.935 1 cv
cp
.839216 .290196 .219608 rgb
f
165.956 0 mo
156.978 -.00585938 147.435 2.98877 147.007 8.00977 cv
146.628 13.4424 146.378 18.9365 146.267 24.3569 cv
146.063 34.1909 146.304 44.1567 146.976 53.9761 cv
146.979 54.0044 146.981 54.0337 146.985 54.062 cv
147.681 58.481 155.817 61.8169 165.915 61.8237 cv
176.013 61.8306 184.157 58.5044 184.858 54.0884 cv
184.864 54.0601 184.866 54.0308 184.868 54.0024 cv
185.563 44.1938 185.819 34.229 185.628 24.3833 cv
185.522 18.9688 185.278 13.4731 184.903 8.0498 cv
184.476 3.0127 174.935 .00585938 165.956 0 cv
165.956 0 li
cp
165.954 1 mo
175.479 1.00635 183.571 4.19238 183.905 8.11914 cv
184.28 13.5396 184.522 18.9697 184.628 24.4028 cv
184.819 34.2505 184.567 44.1069 183.872 53.9312 cv
183.263 57.7593 175.282 60.8296 165.915 60.8237 cv
156.548 60.8179 148.575 57.7358 147.974 53.9077 cv
147.3 44.0815 147.063 34.2251 147.267 24.3774 cv
147.378 18.9453 147.624 13.5151 148.003 8.09473 cv
148.337 4.16895 156.429 .993652 165.954 1 cv
165.954 1 li
cp
.309804 .164706 .0509804 rgb
f
181.267 7.49072 mo
181.487 10.5811 174.499 13.0903 165.718 13.0903 cv
156.935 13.0903 149.946 10.5811 150.171 7.49072 cv
150.403 4.3999 157.396 1.89844 165.722 1.89844 cv
174.048 1.89844 181.034 4.3999 181.267 7.49072 cv
cp
.670588 .227451 .176471 rgb
f
165.722 3.71387 mo
173.29 3.71387 179.704 5.7417 181.099 8.3999 cv
181.216 8.10352 181.286 7.80127 181.267 7.49072 cv
181.034 4.3999 174.048 1.89844 165.722 1.89844 cv
157.396 1.89844 150.403 4.3999 150.171 7.49072 cv
150.151 7.80127 150.22 8.10352 150.337 8.3999 cv
151.735 5.7417 158.149 3.71387 165.722 3.71387 cv
cp
.478431 .164706 .129412 rgb
f
176.417 7.58301 mo
176.468 8.71045 174.591 9.62402 172.229 9.62402 cv
169.864 9.62402 167.948 8.71045 167.942 7.58301 cv
167.937 6.4541 169.808 5.54004 172.128 5.54004 cv
174.442 5.54004 176.366 6.4541 176.417 7.58301 cv
cp
.839216 .290196 .219608 rgb
f
179.792 58.2212 mo
177.487 59.3159 174.448 60.1372 171.019 60.5405 cv
170.89 60.021 170.833 59.394 170.86 58.2749 cv
170.927 55.4409 169.948 55.4409 169.993 52.603 cv
170.032 49.7651 171.28 49.7651 171.325 46.9233 cv
171.364 44.0845 171.647 44.0845 171.679 41.2417 cv
171.706 38.3979 169.657 38.3979 169.665 35.5522 cv
169.673 32.7095 169.784 32.7095 169.784 29.8667 cv
169.78 27.0195 170.386 27.0195 170.372 24.1743 cv
170.356 21.3276 171.142 21.3276 171.112 18.4814 cv
171.099 17.1719 170.985 16.4678 170.946 15.8232 cv
174.868 15.4331 178.257 14.5459 180.636 13.3491 cv
180.28 13.9678 179.976 14.6787 180.015 15.7368 cv
180.108 18.5747 180.634 18.5747 180.706 21.4136 cv
180.765 24.2534 182.261 24.2534 182.298 27.0952 cv
182.321 29.936 181.948 29.936 181.942 32.7769 cv
181.923 35.6167 181.167 35.6167 181.12 38.4595 cv
181.062 41.2974 181.058 41.2974 180.972 44.1353 cv
180.87 46.9741 179.622 46.9741 179.509 49.813 cv
179.382 52.6519 180.071 52.6519 179.909 55.4888 cv
179.829 56.8394 179.81 57.5444 179.792 58.2212 cv
cp
.929412 .435294 .372549 rgb
f
158.384 17.5547 mo
158.339 20.4438 158.751 20.4438 158.724 23.335 cv
158.7 26.2271 157.897 26.2275 157.888 29.1187 cv
157.884 32.0112 156.753 32.0112 156.767 34.9028 cv
156.786 37.7954 158.519 37.7954 158.548 40.688 cv
158.585 43.5796 158.587 43.5806 158.638 46.4663 cv
158.692 49.355 157.515 49.355 157.599 52.2456 cv
157.687 55.1343 158.144 55.0972 158.589 57.9634 cv
158.739 58.9399 158.864 59.6128 158.923 60.1782 cv
156.3 59.689 153.995 58.9458 152.19 58.0269 cv
152.269 57.4175 152.368 56.7173 152.3 55.5132 cv
152.144 52.6206 150.729 52.6196 150.583 49.7271 cv
150.45 46.8315 152.048 46.8315 151.958 43.9351 cv
151.88 41.0396 150.329 41.0396 150.271 38.1401 cv
150.224 35.2407 151.351 35.2397 151.335 32.3413 cv
151.333 29.4443 150.964 29.4443 150.989 26.5454 cv
151.026 23.646 152.054 23.646 152.112 20.7456 cv
152.185 17.8457 150.579 17.8457 150.692 14.9463 cv
150.735 13.8853 150.866 13.2407 151.063 12.7124 cv
152.837 13.8491 155.45 14.7676 158.575 15.3496 cv
158.493 15.9209 158.401 16.5923 158.384 17.5547 cv
cp
f
175.966 8.09375 mo
176.007 9.06445 174.388 9.85156 172.354 9.85156 cv
170.315 9.85156 168.663 9.06445 168.655 8.09375 cv
168.647 7.12207 170.261 6.33447 172.265 6.33447 cv
174.267 6.33447 175.925 7.12207 175.966 8.09375 cv
cp
.309804 .164706 .0509804 rgb
f
166.12 14.5884 mo
156.999 14.5889 149.487 11.8623 147.979 8.23389 cv
147.938 8.83984 147.897 9.4458 147.858 10.0522 cv
149.403 13.6826 156.96 16.4092 166.12 16.4092 cv
174.776 16.4092 182.005 13.9707 184.058 10.6372 cv
184.019 10.0308 183.979 9.42432 183.938 8.81836 cv
181.921 12.1504 174.737 14.5889 166.12 14.5884 cv
cp
.478431 .164706 .129412 rgb
f
165.866 29.9946 mo
174.032 29.9863 180.876 28.4731 184.653 26.125 cv
184.646 25.5469 184.636 24.9688 184.624 24.3906 cv
184.604 23.3945 184.579 22.3984 184.55 21.4023 cv
183.183 24.0225 175.845 26.6489 165.952 26.6587 cv
156.048 26.6694 148.696 24.0508 147.333 21.4844 cv
147.306 22.4531 147.282 23.4219 147.263 24.3906 cv
147.251 25.0215 147.239 25.6523 147.229 26.2832 cv
151.063 28.5542 157.827 30.0024 165.866 29.9946 cv
cp
.670588 .227451 .176471 rgb
f
184.399 14.8623 mo
184.466 16.1592 184.524 17.4565 184.577 18.7544 cv
184.478 21.6338 176.759 24.8501 165.952 24.8608 cv
165.935 24.8608 165.915 24.8608 165.892 24.8608 cv
155.116 24.8608 147.415 21.6655 147.31 18.8643 cv
147.356 17.5454 147.411 16.2271 147.474 14.9092 cv
146.845 15.5532 146.214 16.1978 145.583 16.8418 cv
144.661 17.7822 144.147 18.8306 144.106 19.8726 cv
143.907 24.6357 153.313 28.2222 165.804 28.2217 cv
165.825 28.2217 165.847 28.2217 165.868 28.2217 cv
178.362 28.21 187.772 24.6001 187.56 19.8281 cv
187.521 18.8789 187.101 17.9272 186.347 17.0737 cv
185.696 16.3364 185.046 15.5991 184.399 14.8623 cv
184.399 14.8623 li
cp
146.388 17.3477 mo
146.366 17.8535 146.347 18.3594 146.327 18.8652 cv
146.327 18.8882 146.327 18.9106 146.329 18.9336 cv
146.472 22.7075 155.302 25.7798 165.894 25.7793 cv
165.913 25.7793 165.933 25.7793 165.954 25.7793 cv
176.577 25.7681 185.427 22.646 185.558 18.8213 cv
185.56 18.7988 185.56 18.7754 185.558 18.7524 cv
185.542 18.3442 185.522 17.9365 185.505 17.5283 cv
185.536 17.5654 185.569 17.6021 185.603 17.6387 cv
186.21 18.3291 186.546 19.0869 186.575 19.8291 cv
186.651 21.7412 184.708 23.5645 181.089 24.9614 cv
177.194 26.4658 171.778 27.2979 165.868 27.3037 cv
165.847 27.3037 165.825 27.3037 165.804 27.3037 cv
154.083 27.3037 144.923 24.0381 145.091 19.8716 cv
145.122 19.0552 145.54 18.2163 146.292 17.4453 cv
146.325 17.4126 146.356 17.3804 146.388 17.3477 cv
146.388 17.3477 li
cp
.309804 .164706 .0509804 rgb
f
185.603 17.6387 mo
185.569 17.6021 185.536 17.5654 185.505 17.5283 cv
185.522 17.9365 185.542 18.3442 185.558 18.7524 cv
185.56 18.7754 185.56 18.7988 185.558 18.8213 cv
185.427 22.646 176.577 25.7681 165.954 25.7793 cv
165.933 25.7793 165.913 25.7793 165.894 25.7793 cv
155.302 25.7798 146.472 22.7075 146.329 18.9336 cv
146.327 18.9106 146.327 18.8882 146.327 18.8652 cv
146.347 18.3594 146.366 17.8535 146.388 17.3477 cv
146.356 17.3804 146.325 17.4126 146.292 17.4453 cv
145.54 18.2163 145.122 19.0552 145.091 19.8716 cv
144.923 24.0381 154.083 27.3037 165.804 27.3037 cv
165.825 27.3037 165.847 27.3037 165.868 27.3037 cv
171.778 27.2979 177.194 26.4658 181.089 24.9614 cv
184.708 23.5645 186.651 21.7412 186.575 19.8291 cv
186.546 19.0869 186.21 18.3291 185.603 17.6387 cv
cp
.839216 .290196 .219608 rgb
f
156.958 24.9971 mo
150.753 23.8516 146.435 21.5654 146.329 18.9336 cv
146.327 18.9106 146.327 18.8882 146.327 18.8652 cv
146.347 18.3594 146.366 17.8535 146.388 17.3477 cv
146.356 17.3804 146.325 17.4126 146.292 17.4453 cv
145.54 18.2163 145.122 19.0552 145.091 19.8716 cv
144.96 23.1885 150.741 25.9287 159.022 26.9102 cv
158.271 26.3228 157.579 25.6836 156.958 24.9971 cv
cp
.670588 .227451 .176471 rgb
f
185.603 17.6387 mo
185.569 17.6021 185.536 17.5654 185.505 17.5283 cv
185.522 17.9365 185.542 18.3442 185.558 18.7524 cv
185.56 18.7754 185.56 18.7988 185.558 18.8213 cv
185.503 20.2183 184.288 21.5195 182.253 22.6118 cv
181.132 23.8647 179.78 24.9673 178.231 25.8682 cv
179.249 25.5991 180.212 25.3003 181.089 24.9614 cv
184.708 23.5645 186.651 21.7412 186.575 19.8291 cv
186.546 19.0869 186.21 18.3291 185.603 17.6387 cv
cp
.929412 .435294 .372549 rgb
f
184.323 48.5757 mo
184.257 49.8726 184.181 51.1685 184.099 52.4634 cv
183.646 55.3403 176.044 58.5454 165.946 58.5562 cv
165.929 58.5562 165.909 58.5562 165.89 58.5562 cv
155.817 58.5562 148.239 55.3716 147.794 52.5737 cv
147.706 51.2573 147.626 49.9399 147.554 48.6216 cv
146.993 49.2661 146.437 49.9106 145.888 50.5542 cv
145.083 51.4937 144.71 52.5405 144.794 53.5806 cv
145.265 58.3345 154.374 61.9028 165.806 61.9028 cv
165.825 61.9028 165.847 61.9028 165.866 61.9028 cv
177.3 61.8911 186.421 58.2993 186.878 53.5356 cv
186.954 52.5874 186.657 51.6382 186.013 50.7847 cv
185.456 50.0483 184.894 49.312 184.323 48.5757 cv
184.323 48.5757 li
cp
146.733 51.0591 mo
146.767 51.5649 146.802 52.0708 146.837 52.5757 cv
146.839 52.5981 146.841 52.6196 146.845 52.6431 cv
147.462 56.4106 156.046 59.4712 165.89 59.4712 cv
165.907 59.4712 165.927 59.4712 165.946 59.4712 cv
175.817 59.4604 184.431 56.3501 185.048 52.5308 cv
185.052 52.5083 185.054 52.4849 185.056 52.4614 cv
185.083 52.0542 185.108 51.647 185.136 51.2397 cv
185.163 51.2769 185.19 51.313 185.22 51.3501 cv
185.739 52.0396 185.981 52.7954 185.925 53.5356 cv
185.78 55.4458 183.7 57.2642 180.185 58.6558 cv
176.392 60.1558 171.347 60.9839 165.864 60.9888 cv
165.845 60.9888 165.825 60.9888 165.806 60.9888 cv
155.015 60.9888 146.14 57.7388 145.747 53.5786 cv
145.683 52.7642 145.993 51.9282 146.651 51.1577 cv
146.679 51.1245 146.706 51.0923 146.733 51.0591 cv
146.733 51.0591 li
cp
.309804 .164706 .0509804 rgb
f
185.22 51.3501 mo
185.19 51.313 185.163 51.2769 185.136 51.2397 cv
185.108 51.647 185.083 52.0542 185.056 52.4614 cv
185.054 52.4849 185.052 52.5083 185.048 52.5308 cv
184.431 56.3501 175.817 59.4604 165.946 59.4712 cv
165.927 59.4712 165.907 59.4712 165.89 59.4712 cv
156.046 59.4712 147.462 56.4106 146.845 52.6431 cv
146.841 52.6196 146.839 52.5981 146.837 52.5757 cv
146.802 52.0708 146.767 51.5649 146.733 51.0591 cv
146.706 51.0923 146.679 51.1245 146.651 51.1577 cv
145.993 51.9282 145.683 52.7642 145.747 53.5786 cv
146.14 57.7388 155.015 60.9888 165.806 60.9888 cv
165.825 60.9888 165.845 60.9888 165.864 60.9888 cv
171.347 60.9839 176.392 60.1558 180.185 58.6558 cv
183.7 57.2642 185.78 55.4458 185.925 53.5356 cv
185.981 52.7954 185.739 52.0396 185.22 51.3501 cv
cp
.839216 .290196 .219608 rgb
f
157.485 58.6909 mo
151.612 57.5503 147.247 55.27 146.845 52.6431 cv
146.841 52.6196 146.839 52.5981 146.837 52.5757 cv
146.802 52.0708 146.767 51.5649 146.733 51.0591 cv
146.706 51.0923 146.679 51.1245 146.651 51.1577 cv
145.993 51.9282 145.683 52.7642 145.747 53.5786 cv
146.03 56.8911 151.792 59.6206 159.499 60.5972 cv
158.776 60.0112 158.103 59.3755 157.485 58.6909 cv
cp
.670588 .227451 .176471 rgb
f
185.22 51.3501 mo
185.19 51.313 185.163 51.2769 185.136 51.2397 cv
185.108 51.647 185.083 52.0542 185.056 52.4614 cv
185.054 52.4849 185.052 52.5083 185.048 52.5308 cv
184.843 53.9253 183.526 55.2241 181.489 56.313 cv
180.308 57.562 178.944 58.6626 177.435 59.5591 cv
178.407 59.2915 179.331 58.9946 180.185 58.6558 cv
183.7 57.2642 185.78 55.4458 185.925 53.5356 cv
185.981 52.7954 185.739 52.0396 185.22 51.3501 cv
cp
.929412 .435294 .372549 rgb
f
165.866 49.1245 mo
173.806 49.1167 180.509 47.6069 184.38 45.2603 cv
184.405 44.6831 184.429 44.106 184.45 43.5278 cv
184.489 42.5317 184.522 41.5356 184.552 40.5396 cv
183.007 43.1587 175.653 45.7847 165.95 45.7935 cv
156.235 45.8042 148.872 43.188 147.337 40.6216 cv
147.364 41.5913 147.397 42.5591 147.435 43.5278 cv
147.458 44.1577 147.483 44.7876 147.511 45.4175 cv
151.427 47.688 158.05 49.1333 165.866 49.1245 cv
cp
.670588 .227451 .176471 rgb
f
184.784 34.0024 mo
184.774 35.3003 184.759 36.5981 184.733 37.896 cv
184.429 40.7778 176.601 43.9917 165.952 44.0034 cv
165.933 44.0034 165.913 44.0034 165.892 44.0034 cv
155.271 44.0034 147.466 40.8091 147.161 38.0063 cv
147.132 36.687 147.11 35.3677 147.095 34.0483 cv
146.491 34.6929 145.89 35.3374 145.292 35.9829 cv
144.417 36.9243 143.972 37.9722 144.001 39.0161 cv
144.183 43.7798 153.634 47.3599 165.804 47.3599 cv
165.825 47.3599 165.847 47.3599 165.868 47.3599 cv
178.042 47.3472 187.501 43.7446 187.669 38.9712 cv
187.694 38.02 187.335 37.0679 186.628 36.2144 cv
186.017 35.4771 185.401 34.7397 184.784 34.0024 cv
184.784 34.0024 li
cp
146.14 36.4878 mo
146.147 36.9946 146.159 37.5015 146.171 38.0083 cv
146.171 38.0298 146.173 38.0522 146.177 38.0757 cv
146.595 41.8501 155.485 44.9204 165.892 44.9204 cv
165.911 44.9204 165.933 44.9204 165.952 44.9204 cv
176.388 44.9087 185.306 41.7896 185.72 37.9634 cv
185.722 37.9399 185.724 37.9175 185.724 37.894 cv
185.731 37.4858 185.739 37.0776 185.745 36.6694 cv
185.776 36.7065 185.808 36.7427 185.837 36.7798 cv
186.409 37.4712 186.698 38.229 186.679 38.9712 cv
186.63 40.8843 184.563 42.7075 180.921 44.103 cv
176.995 45.6069 171.667 46.437 165.866 46.4429 cv
165.847 46.4429 165.825 46.4429 165.804 46.4429 cv
154.347 46.4429 145.142 43.1821 144.991 39.0142 cv
144.968 38.1978 145.333 37.3579 146.048 36.5864 cv
146.077 36.5542 146.108 36.521 146.14 36.4878 cv
146.14 36.4878 li
cp
.309804 .164706 .0509804 rgb
f
185.837 36.7798 mo
185.808 36.7427 185.776 36.7065 185.745 36.6694 cv
185.739 37.0776 185.731 37.4858 185.724 37.894 cv
185.724 37.9175 185.722 37.9399 185.72 37.9634 cv
185.304 41.7896 176.388 44.9087 165.952 44.9204 cv
165.933 44.9204 165.911 44.9204 165.892 44.9204 cv
155.485 44.9204 146.595 41.8501 146.177 38.0757 cv
146.173 38.0522 146.171 38.0298 146.171 38.0083 cv
146.159 37.5015 146.147 36.9946 146.14 36.4878 cv
146.108 36.521 146.077 36.5542 146.048 36.5864 cv
145.333 37.3579 144.968 38.1978 144.991 39.0142 cv
145.142 43.1821 154.347 46.4429 165.804 46.4429 cv
165.825 46.4429 165.847 46.4429 165.866 46.4429 cv
171.667 46.437 176.995 45.6069 180.921 44.103 cv
184.563 42.7075 186.63 40.8843 186.679 38.9712 cv
186.698 38.229 186.409 37.4712 185.837 36.7798 cv
cp
.839216 .290196 .219608 rgb
f
157.058 44.1382 mo
150.899 42.9946 146.456 40.7085 146.177 38.0757 cv
146.173 38.0522 146.171 38.0298 146.171 38.0083 cv
146.159 37.5015 146.147 36.9946 146.14 36.4878 cv
146.108 36.521 146.077 36.5542 146.048 36.5864 cv
145.333 37.3579 144.968 38.1978 144.991 39.0142 cv
145.095 42.3325 150.997 45.0698 159.14 46.0503 cv
158.386 45.4634 157.69 44.8237 157.058 44.1382 cv
cp
.670588 .227451 .176471 rgb
f
185.837 36.7798 mo
185.808 36.7427 185.776 36.7065 185.745 36.6694 cv
185.739 37.0776 185.731 37.4858 185.724 37.894 cv
185.724 37.9175 185.722 37.9399 185.72 37.9634 cv
185.577 39.3608 184.276 40.6626 182.192 41.7544 cv
181.011 43.0063 179.622 44.1089 178.06 45.0093 cv
179.075 44.7407 180.038 44.4419 180.921 44.103 cv
184.563 42.7075 186.63 40.8843 186.679 38.9712 cv
186.698 38.229 186.409 37.4712 185.837 36.7798 cv
cp
.929412 .435294 .372549 rgb
f
166.368 24.4253 mo
159.968 24.4253 154.78 29.6123 154.78 36.0132 cv
154.78 42.4126 159.968 47.603 166.368 47.603 cv
172.771 47.603 177.958 42.4126 177.958 36.0132 cv
177.958 29.6123 172.771 24.4253 166.368 24.4253 cv
cp
.878431 .701961 .133333 rgb
f
166.368 23.5562 mo
159.501 23.5562 153.911 29.1436 153.911 36.0132 cv
153.911 42.8833 159.501 48.4731 166.368 48.4731 cv
173.237 48.4731 178.827 42.8833 178.827 36.0132 cv
178.827 29.1436 173.237 23.5562 166.368 23.5562 cv
166.368 23.5562 li
cp
166.368 24.4253 mo
172.771 24.4253 177.958 29.6123 177.958 36.0132 cv
177.958 42.4126 172.771 47.603 166.368 47.603 cv
159.968 47.603 154.78 42.4126 154.78 36.0132 cv
154.78 29.6123 159.968 24.4253 166.368 24.4253 cv
166.368 24.4253 li
cp
.309804 .164706 .0509804 rgb
f
166.368 27.5156 mo
172.243 27.5156 177.085 31.8911 177.843 37.5571 cv
177.909 37.0522 177.958 36.5396 177.958 36.0132 cv
177.958 29.6123 172.771 24.4253 166.368 24.4253 cv
159.968 24.4253 154.78 29.6123 154.78 36.0132 cv
154.78 36.5396 154.825 37.0522 154.896 37.5571 cv
155.651 31.8911 160.493 27.5156 166.368 27.5156 cv
cp
.960784 .913725 .470588 rgb
f
170.673 36.064 mo
176.173 36.062 li
176.167 32.6841 174.411 29.3984 171.274 27.5869 cv
168.507 32.3804 li
169.79 33.1177 170.663 34.4839 170.673 36.064 cv
cp
.309804 .164706 .0509804 rgb
f
164.226 32.3823 mo
161.46 27.5918 li
160.024 28.4233 158.776 29.6309 157.886 31.1733 cv
156.991 32.7231 156.567 34.4146 156.571 36.0825 cv
162.067 36.0854 li
162.069 34.4995 162.944 33.1265 164.226 32.3823 cv
cp
f
166.37 40.4019 mo
165.583 40.4019 164.856 40.1743 164.222 39.8062 cv
161.478 44.563 li
164.61 46.3706 168.327 46.2534 171.253 44.5747 cv
168.507 39.814 li
167.876 40.1792 167.151 40.4019 166.37 40.4019 cv
cp
f
168.954 36.0933 mo
168.954 37.5229 167.798 38.6802 166.37 38.6802 cv
164.942 38.6802 163.786 37.5229 163.786 36.0933 cv
163.786 34.6694 164.942 33.5112 166.37 33.5112 cv
167.798 33.5112 168.954 34.6694 168.954 36.0933 cv
cp
f
165.866 49.1245 mo
163.929 49.1265 162.065 49.0396 160.298 48.8726 cv
162.065 49.9624 164.14 50.603 166.368 50.603 cv
168.7 50.603 170.868 49.9077 172.687 48.7212 cv
170.556 48.98 168.269 49.1226 165.866 49.1245 cv
cp
.670588 .227451 .176471 rgb
f
21.9351 1 mo
12.4097 1 4.31982 4.18066 3.98779 8.10693 cv
3.61279 13.5273 3.37061 18.9575 3.26221 24.3901 cv
3.06592 34.2378 3.30908 44.0942 3.98975 53.9194 cv
4.59326 57.7476 12.5679 60.8237 21.9351 60.8237 cv
31.3022 60.8237 39.2808 57.7476 39.8872 53.9194 cv
40.5767 44.0942 40.8218 34.2378 40.6235 24.3901 cv
40.5142 18.9575 40.269 13.5273 39.8901 8.10693 cv
39.5542 4.18066 31.4604 1 21.9351 1 cv
cp
.498039 .513726 .54902 rgb
f
21.9556 0 mo
12.9771 -.00585938 3.43506 2.98877 3.00732 8.00977 cv
2.62744 13.4424 2.37842 18.9365 2.26611 24.3569 cv
2.06396 34.1909 2.30322 44.1567 2.97607 53.9761 cv
2.979 54.0044 2.98193 54.0337 2.98584 54.062 cv
3.68018 58.481 11.8169 61.8169 21.9146 61.8237 cv
32.0122 61.8306 40.1567 58.5044 40.8589 54.0884 cv
40.8638 54.0601 40.8667 54.0308 40.8687 54.0024 cv
41.564 44.1938 41.8198 34.229 41.6274 24.3833 cv
41.522 18.9688 41.2788 13.4731 40.9038 8.0498 cv
40.4751 3.0127 30.9341 .00585938 21.9556 0 cv
21.9556 0 li
cp
21.9546 1 mo
31.48 1.00635 39.5718 4.19238 39.9058 8.11914 cv
40.2808 13.5396 40.522 18.9697 40.6274 24.4028 cv
40.8198 34.2505 40.5679 44.1069 39.8716 53.9312 cv
39.2632 57.7593 31.2827 60.8296 21.9155 60.8237 cv
12.5483 60.8179 4.57568 57.7358 3.97412 53.9077 cv
3.30029 44.0815 3.06396 34.2251 3.26611 24.3774 cv
3.37842 18.9453 3.62451 13.5151 4.00342 8.09473 cv
4.3374 4.16895 12.4292 .993652 21.9546 1 cv
21.9546 1 li
cp
.2 .203922 .219608 rgb
f
37.2661 7.49072 mo
37.4878 10.5811 30.4985 13.0903 21.7173 13.0903 cv
12.9341 13.0903 5.9458 10.5811 6.17041 7.49072 cv
6.40381 4.3999 13.396 1.89844 21.7222 1.89844 cv
30.0474 1.89844 37.0347 4.3999 37.2661 7.49072 cv
cp
.627451 .643137 .690196 rgb
f
21.7212 3.71387 mo
29.2896 3.71387 35.7036 5.7417 37.0981 8.3999 cv
37.2153 8.10352 37.2856 7.80127 37.2661 7.49072 cv
37.0347 4.3999 30.0474 1.89844 21.7222 1.89844 cv
13.396 1.89844 6.40381 4.3999 6.17041 7.49072 cv
6.15088 7.80127 6.22021 8.10352 6.3374 8.3999 cv
7.73584 5.7417 14.1499 3.71387 21.7212 3.71387 cv
cp
.309804 .317647 .341176 rgb
f
32.4175 7.58301 mo
32.4683 8.71045 30.5903 9.62402 28.23 9.62402 cv
25.8647 9.62402 23.9487 8.71045 23.9429 7.58301 cv
23.937 6.4541 25.8071 5.54004 28.1274 5.54004 cv
30.4419 5.54004 32.3667 6.4541 32.4175 7.58301 cv
cp
.709804 .72549 .780392 rgb
f
35.7925 58.2212 mo
33.4878 59.3159 30.4487 60.1372 27.0181 60.5405 cv
26.8901 60.021 26.8335 59.394 26.8599 58.2749 cv
26.9272 55.4409 25.9487 55.4409 25.9927 52.603 cv
26.0317 49.7651 27.2808 49.7651 27.3257 46.9233 cv
27.3638 44.0845 27.6479 44.0845 27.6782 41.2417 cv
27.7056 38.3979 25.6567 38.3979 25.6655 35.5522 cv
25.6724 32.7095 25.7837 32.7095 25.7837 29.8667 cv
25.7798 27.0195 26.3853 27.0195 26.3726 24.1743 cv
26.3569 21.3276 27.1421 21.3276 27.1128 18.4814 cv
27.0981 17.1719 26.9858 16.4678 26.9468 15.8232 cv
30.8687 15.4331 34.2563 14.5459 36.6353 13.3491 cv
36.2808 13.9678 35.9761 14.6787 36.0142 15.7368 cv
36.1089 18.5747 36.6333 18.5747 36.7056 21.4136 cv
36.7642 24.2534 38.2612 24.2534 38.2974 27.0952 cv
38.3208 29.936 37.9487 29.936 37.9419 32.7769 cv
37.9224 35.6167 37.1665 35.6167 37.1206 38.4595 cv
37.061 41.2974 37.0571 41.2974 36.9712 44.1353 cv
36.8706 46.9741 35.6226 46.9741 35.5083 49.813 cv
35.3813 52.6519 36.0708 52.6519 35.9087 55.4888 cv
35.8286 56.8394 35.8091 57.5444 35.7925 58.2212 cv
cp
.627451 .643137 .690196 rgb
f
14.3843 17.5547 mo
14.3394 20.4438 14.7515 20.4438 14.7231 23.335 cv
14.7007 26.2271 13.8979 26.2275 13.8882 29.1187 cv
13.8843 32.0112 12.7524 32.0112 12.7661 34.9028 cv
12.7866 37.7954 14.519 37.7954 14.5474 40.688 cv
14.5845 43.5796 14.5874 43.5806 14.6372 46.4663 cv
14.6919 49.355 13.5142 49.355 13.5981 52.2456 cv
13.686 55.1343 14.1431 55.0972 14.5884 57.9634 cv
14.7388 58.9399 14.8638 59.6128 14.9224 60.1782 cv
12.2993 59.689 9.99463 58.9458 8.19092 58.0269 cv
8.26807 57.4175 8.36768 56.7173 8.29932 55.5132 cv
8.14404 52.6206 6.72998 52.6196 6.5835 49.7271 cv
6.44971 46.8315 8.04834 46.8315 7.9585 43.9351 cv
7.88037 41.0396 6.32959 41.0396 6.27002 38.1401 cv
6.22314 35.2407 7.35107 35.2397 7.33545 32.3413 cv
7.33252 29.4443 6.96436 29.4443 6.98877 26.5454 cv
7.02686 23.646 8.05322 23.646 8.11279 20.7456 cv
8.18408 17.8457 6.57959 17.8457 6.69189 14.9463 cv
6.73486 13.8853 6.8667 13.2407 7.06396 12.7124 cv
8.8374 13.8491 11.4497 14.7676 14.5757 15.3496 cv
14.4927 15.9209 14.4009 16.5923 14.3843 17.5547 cv
cp
f
31.9663 8.09375 mo
32.0073 9.06445 30.3872 9.85156 28.354 9.85156 cv
26.3159 9.85156 24.6636 9.06445 24.6558 8.09375 cv
24.647 7.12207 26.2603 6.33447 28.2651 6.33447 cv
30.2661 6.33447 31.9253 7.12207 31.9663 8.09375 cv
cp
.2 .203922 .219608 rgb
f
22.1196 14.5884 mo
12.9985 14.5889 5.48779 11.8623 3.979 8.23389 cv
3.93799 8.83984 3.89795 9.4458 3.85889 10.0522 cv
5.40283 13.6826 12.9604 16.4092 22.1206 16.4092 cv
30.7769 16.4092 38.0044 13.9707 40.0571 10.6372 cv
40.019 10.0308 39.98 9.42432 39.939 8.81836 cv
37.9214 12.1504 30.7368 14.5889 22.1196 14.5884 cv
cp
.309804 .317647 .341176 rgb
f
21.8667 29.9946 mo
30.0327 29.9863 36.8755 28.4731 40.6538 26.125 cv
40.645 25.5469 40.6353 24.9688 40.6235 24.3906 cv
40.604 23.3945 40.5786 22.3984 40.5493 21.4023 cv
39.1831 24.0225 31.8452 26.6489 21.9517 26.6587 cv
12.0474 26.6694 4.6958 24.0508 3.3335 21.4844 cv
3.30518 22.4531 3.28174 23.4219 3.26221 24.3906 cv
3.25049 25.0215 3.23877 25.6523 3.22998 26.2832 cv
7.06396 28.5542 13.8276 30.0024 21.8667 29.9946 cv
cp
f
40.3989 14.8623 mo
40.4653 16.1592 40.5249 17.4565 40.5767 18.7544 cv
40.4771 21.6338 32.7583 24.8501 21.9526 24.8608 cv
21.9341 24.8608 21.9146 24.8608 21.8921 24.8608 cv
11.1157 24.8608 3.41553 21.6655 3.31006 18.8643 cv
3.35693 17.5454 3.41162 16.2271 3.47412 14.9092 cv
2.84521 15.5532 2.21436 16.1978 1.5835 16.8418 cv
.661621 17.7822 .146973 18.8306 .106934 19.8726 cv
-.0922852 24.6357 9.31396 28.2222 21.8042 28.2217 cv
21.8247 28.2217 21.8472 28.2217 21.8687 28.2217 cv
34.3628 28.21 43.7729 24.6001 43.5601 19.8281 cv
43.521 18.8789 43.1001 17.9272 42.3462 17.0737 cv
41.6958 16.3364 41.0464 15.5991 40.3989 14.8623 cv
40.3989 14.8623 li
cp
2.38818 17.3477 mo
2.3667 17.8535 2.34717 18.3594 2.32764 18.8652 cv
2.32666 18.8882 2.32666 18.9106 2.32861 18.9336 cv
2.47217 22.7075 11.3013 25.7798 21.8931 25.7793 cv
21.9126 25.7793 21.9331 25.7793 21.9536 25.7793 cv
32.5767 25.7681 41.4263 22.646 41.5581 18.8213 cv
41.5591 18.7988 41.5591 18.7754 41.5581 18.7524 cv
41.5415 18.3442 41.5229 17.9365 41.5044 17.5283 cv
41.5366 17.5654 41.5698 17.6021 41.6021 17.6387 cv
42.2095 18.3291 42.5464 19.0869 42.5757 19.8291 cv
42.6519 21.7412 40.7075 23.5645 37.0884 24.9614 cv
33.1948 26.4658 27.7778 27.2979 21.8677 27.3037 cv
21.8462 27.3037 21.8247 27.3037 21.8042 27.3037 cv
10.0835 27.3037 .922363 24.0381 1.09131 19.8716 cv
1.12158 19.0552 1.53955 18.2163 2.29248 17.4453 cv
2.32471 17.4126 2.35596 17.3804 2.38818 17.3477 cv
2.38818 17.3477 li
cp
.2 .203922 .219608 rgb
f
41.6021 17.6387 mo
41.5698 17.6021 41.5366 17.5654 41.5044 17.5283 cv
41.5229 17.9365 41.5415 18.3442 41.5581 18.7524 cv
41.5591 18.7754 41.5591 18.7988 41.5581 18.8213 cv
41.4263 22.646 32.5767 25.7681 21.9536 25.7793 cv
21.9331 25.7793 21.9126 25.7793 21.8931 25.7793 cv
11.3022 25.7798 2.47217 22.7075 2.32861 18.9336 cv
2.32666 18.9106 2.32666 18.8882 2.32764 18.8652 cv
2.34717 18.3594 2.3667 17.8535 2.38818 17.3477 cv
2.35596 17.3804 2.32471 17.4126 2.29248 17.4453 cv
1.53955 18.2163 1.12158 19.0552 1.09131 19.8716 cv
.922363 24.0381 10.0835 27.3037 21.8042 27.3037 cv
21.8247 27.3037 21.8462 27.3037 21.8677 27.3037 cv
27.7778 27.2979 33.1948 26.4658 37.0884 24.9614 cv
40.7075 23.5645 42.6519 21.7412 42.5757 19.8291 cv
42.5464 19.0869 42.2095 18.3291 41.6021 17.6387 cv
cp
.498039 .513726 .54902 rgb
f
12.9585 24.9971 mo
6.75244 23.8516 2.43506 21.5654 2.32861 18.9336 cv
2.32666 18.9106 2.32666 18.8882 2.32764 18.8652 cv
2.34717 18.3594 2.3667 17.8535 2.38818 17.3477 cv
2.35596 17.3804 2.32471 17.4126 2.29248 17.4453 cv
1.53955 18.2163 1.12158 19.0552 1.09131 19.8716 cv
.960449 23.1885 6.74072 25.9287 15.0229 26.9102 cv
14.27 26.3228 13.5796 25.6836 12.9585 24.9971 cv
cp
f
41.6021 17.6387 mo
41.5698 17.6021 41.5366 17.5654 41.5044 17.5283 cv
41.5229 17.9365 41.5415 18.3442 41.5581 18.7524 cv
41.5591 18.7754 41.5591 18.7988 41.5581 18.8213 cv
41.5034 20.2183 40.2886 21.5195 38.2524 22.6118 cv
37.1313 23.8647 35.7798 24.9673 34.231 25.8682 cv
35.2495 25.5991 36.2124 25.3003 37.0884 24.9614 cv
40.7075 23.5645 42.6519 21.7412 42.5757 19.8291 cv
42.5464 19.0869 42.2095 18.3291 41.6021 17.6387 cv
cp
.709804 .72549 .780392 rgb
f
40.3237 48.5757 mo
40.2563 49.8726 40.1812 51.1685 40.0981 52.4634 cv
39.646 55.3403 32.0444 58.5454 21.9458 58.5562 cv
21.9282 58.5562 21.9097 58.5562 21.8892 58.5562 cv
11.8169 58.5562 4.23975 55.3716 3.79346 52.5737 cv
3.70557 51.2573 3.62549 49.9399 3.55322 48.6216 cv
2.99268 49.2661 2.43701 49.9106 1.88721 50.5542 cv
1.0835 51.4937 .709473 52.5405 .794434 53.5806 cv
1.26416 58.3345 10.3745 61.9028 21.8062 61.9028 cv
21.8257 61.9028 21.8462 61.9028 21.8657 61.9028 cv
33.3003 61.8911 42.4204 58.2993 42.8784 53.5356 cv
42.9536 52.5874 42.6577 51.6382 42.0122 50.7847 cv
41.4565 50.0483 40.8931 49.312 40.3237 48.5757 cv
40.3237 48.5757 li
cp
2.73389 51.0591 mo
2.76709 51.5649 2.80127 52.0708 2.8374 52.5757 cv
2.83936 52.5981 2.84131 52.6196 2.84521 52.6431 cv
3.4624 56.4106 12.0464 59.4712 21.8892 59.4712 cv
21.9077 59.4712 21.9272 59.4712 21.9458 59.4712 cv
31.8179 59.4604 40.4302 56.3501 41.0474 52.5308 cv
41.0513 52.5083 41.0542 52.4849 41.0552 52.4614 cv
41.0825 52.0542 41.1089 51.647 41.1353 51.2397 cv
41.1626 51.2769 41.1909 51.313 41.2192 51.3501 cv
41.7388 52.0396 41.981 52.7954 41.9253 53.5356 cv
41.7798 55.4458 39.7007 57.2642 36.1841 58.6558 cv
32.3921 60.1558 27.3462 60.9839 21.8647 60.9888 cv
21.8452 60.9888 21.8257 60.9888 21.8062 60.9888 cv
11.0142 60.9888 2.14014 57.7388 1.74756 53.5786 cv
1.68311 52.7642 1.99365 51.9282 2.65088 51.1577 cv
2.67822 51.1245 2.70654 51.0923 2.73389 51.0591 cv
2.73389 51.0591 li
cp
.2 .203922 .219608 rgb
f
41.2192 51.3501 mo
41.1909 51.313 41.1626 51.2769 41.1353 51.2397 cv
41.1089 51.647 41.0825 52.0542 41.0552 52.4614 cv
41.0542 52.4849 41.0513 52.5083 41.0474 52.5308 cv
40.4302 56.3501 31.8179 59.4604 21.9458 59.4712 cv
21.9272 59.4712 21.9077 59.4712 21.8892 59.4712 cv
12.0464 59.4712 3.4624 56.4106 2.84521 52.6431 cv
2.84131 52.6196 2.83838 52.5981 2.8374 52.5757 cv
2.80127 52.0708 2.76709 51.5649 2.73389 51.0591 cv
2.70654 51.0923 2.67822 51.1245 2.65088 51.1577 cv
1.99365 51.9282 1.68311 52.7642 1.74756 53.5786 cv
2.14014 57.7388 11.0142 60.9888 21.8062 60.9888 cv
21.8257 60.9888 21.8452 60.9888 21.8647 60.9888 cv
27.3462 60.9839 32.3921 60.1558 36.1841 58.6558 cv
39.7007 57.2642 41.7798 55.4458 41.9253 53.5356 cv
41.981 52.7954 41.7388 52.0396 41.2192 51.3501 cv
cp
.498039 .513726 .54902 rgb
f
13.4858 58.6909 mo
7.61182 57.5503 3.24658 55.27 2.84521 52.6431 cv
2.84131 52.6196 2.83838 52.5981 2.8374 52.5757 cv
2.80127 52.0708 2.76709 51.5649 2.73389 51.0591 cv
2.70654 51.0923 2.67822 51.1245 2.65088 51.1577 cv
1.99365 51.9282 1.68311 52.7642 1.74756 53.5786 cv
2.02979 56.8911 7.79248 59.6206 15.4985 60.5972 cv
14.7759 60.0112 14.103 59.3755 13.4858 58.6909 cv
cp
f
41.2192 51.3501 mo
41.1909 51.313 41.1626 51.2769 41.1353 51.2397 cv
41.1089 51.647 41.0825 52.0542 41.0552 52.4614 cv
41.0542 52.4849 41.0513 52.5083 41.0474 52.5308 cv
40.8433 53.9253 39.5259 55.2241 37.4888 56.313 cv
36.3081 57.562 34.9448 58.6626 33.4351 59.5591 cv
34.4067 59.2915 35.3315 58.9946 36.1841 58.6558 cv
39.7007 57.2642 41.7798 55.4458 41.9253 53.5356 cv
41.981 52.7954 41.7388 52.0396 41.2192 51.3501 cv
cp
.627451 .643137 .690196 rgb
f
21.8657 49.1245 mo
29.8062 49.1167 36.5093 47.6069 40.3794 45.2603 cv
40.4048 44.6831 40.4282 44.106 40.4507 43.5278 cv
40.4888 42.5317 40.522 41.5356 40.5513 40.5396 cv
39.0063 43.1587 31.6538 45.7847 21.9497 45.7935 cv
12.2349 45.8042 4.87256 43.188 3.33643 40.6216 cv
3.36475 41.5913 3.39697 42.5591 3.43408 43.5278 cv
3.45752 44.1577 3.48291 44.7876 3.51025 45.4175 cv
7.42627 47.688 14.0493 49.1333 21.8657 49.1245 cv
cp
.309804 .317647 .341176 rgb
f
40.7847 34.0024 mo
40.7749 35.3003 40.7583 36.5981 40.7339 37.896 cv
40.4292 40.7778 32.6001 43.9917 21.9517 44.0034 cv
21.9331 44.0034 21.9136 44.0034 21.8921 44.0034 cv
11.271 44.0034 3.46533 40.8091 3.16162 38.0063 cv
3.13135 36.687 3.10986 35.3677 3.09521 34.0483 cv
2.4917 34.6929 1.89014 35.3374 1.2915 35.9829 cv
.416504 36.9243 -.0288086 37.9722 .00146484 39.0161 cv
.182129 43.7798 9.6333 47.3599 21.8042 47.3599 cv
21.8247 47.3599 21.8472 47.3599 21.8677 47.3599 cv
34.0425 47.3472 43.5015 43.7446 43.6685 38.9712 cv
43.6948 38.02 43.3354 37.0679 42.6274 36.2144 cv
42.0161 35.4771 41.4019 34.7397 40.7847 34.0024 cv
40.7847 34.0024 li
cp
2.13916 36.4878 mo
2.14795 36.9946 2.15869 37.5015 2.17139 38.0083 cv
2.17139 38.0298 2.17334 38.0522 2.17627 38.0757 cv
2.59521 41.8501 11.4858 44.9204 21.8921 44.9204 cv
21.9116 44.9204 21.9321 44.9204 21.9526 44.9204 cv
32.3882 44.9087 41.3052 41.7896 41.7192 37.9634 cv
41.7222 37.9399 41.7231 37.9175 41.7241 37.894 cv
41.7319 37.4858 41.7388 37.0776 41.7456 36.6694 cv
41.7759 36.7065 41.8071 36.7427 41.8374 36.7798 cv
42.4087 37.4712 42.6987 38.229 42.6792 38.9712 cv
42.6304 40.8843 40.564 42.7075 36.9204 44.103 cv
32.9956 45.6069 27.6675 46.437 21.8667 46.4429 cv
21.8462 46.4429 21.8247 46.4429 21.8042 46.4429 cv
10.3462 46.4429 1.14111 43.1821 .990723 39.0142 cv
.967285 38.1978 1.33252 37.3579 2.04736 36.5864 cv
2.07764 36.5542 2.10791 36.521 2.13916 36.4878 cv
2.13916 36.4878 li
cp
.2 .203922 .219608 rgb
f
41.8374 36.7798 mo
41.8071 36.7427 41.7759 36.7065 41.7456 36.6694 cv
41.7388 37.0776 41.7319 37.4858 41.7241 37.894 cv
41.7231 37.9175 41.7222 37.9399 41.7192 37.9634 cv
41.3042 41.7896 32.3882 44.9087 21.9526 44.9204 cv
21.9321 44.9204 21.9116 44.9204 21.8921 44.9204 cv
11.4858 44.9204 2.59521 41.8501 2.17627 38.0757 cv
2.17334 38.0522 2.17139 38.0298 2.17139 38.0083 cv
2.15869 37.5015 2.14795 36.9946 2.13916 36.4878 cv
2.10791 36.521 2.07764 36.5542 2.04736 36.5864 cv
1.33252 37.3579 .967285 38.1978 .990723 39.0142 cv
1.14111 43.1821 10.3462 46.4429 21.8042 46.4429 cv
21.8247 46.4429 21.8462 46.4429 21.8667 46.4429 cv
27.6675 46.437 32.9956 45.6069 36.9204 44.103 cv
40.564 42.7075 42.6304 40.8843 42.6792 38.9712 cv
42.6987 38.229 42.4087 37.4712 41.8374 36.7798 cv
cp
.498039 .513726 .54902 rgb
f
13.0571 44.1382 mo
6.89893 42.9946 2.45557 40.7085 2.17627 38.0757 cv
2.17334 38.0522 2.17139 38.0298 2.17139 38.0083 cv
2.15869 37.5015 2.14795 36.9946 2.13916 36.4878 cv
2.10791 36.521 2.07764 36.5542 2.04736 36.5864 cv
1.33252 37.3579 .967285 38.1978 .990723 39.0142 cv
1.09424 42.3325 6.99658 45.0698 15.1392 46.0503 cv
14.3862 45.4634 13.6899 44.8237 13.0571 44.1382 cv
cp
f
41.8374 36.7798 mo
41.8071 36.7427 41.7759 36.7065 41.7456 36.6694 cv
41.7388 37.0776 41.7319 37.4858 41.7241 37.894 cv
41.7231 37.9175 41.7222 37.9399 41.7192 37.9634 cv
41.5767 39.3608 40.2759 40.6626 38.1919 41.7544 cv
37.0103 43.0063 35.6216 44.1089 34.0601 45.0093 cv
35.0747 44.7407 36.0376 44.4419 36.9204 44.103 cv
40.564 42.7075 42.6304 40.8843 42.6792 38.9712 cv
42.6987 38.229 42.4087 37.4712 41.8374 36.7798 cv
cp
.709804 .72549 .780392 rgb
f
22.3677 24.4253 mo
15.9683 24.4253 10.7798 29.6123 10.7798 36.0132 cv
10.7798 42.4126 15.9683 47.603 22.3677 47.603 cv
28.77 47.603 33.9575 42.4126 33.9575 36.0132 cv
33.9575 29.6123 28.77 24.4253 22.3677 24.4253 cv
cp
.878431 .701961 .133333 rgb
f
22.3677 23.5562 mo
15.5005 23.5562 9.91064 29.1436 9.91064 36.0132 cv
9.91064 42.8833 15.5005 48.4731 22.3677 48.4731 cv
29.2368 48.4731 34.8267 42.8833 34.8267 36.0132 cv
34.8267 29.1436 29.2368 23.5562 22.3677 23.5562 cv
22.3677 23.5562 li
cp
22.3677 24.4253 mo
28.77 24.4253 33.9575 29.6123 33.9575 36.0132 cv
33.9575 42.4126 28.77 47.603 22.3677 47.603 cv
15.9683 47.603 10.7798 42.4126 10.7798 36.0132 cv
10.7798 29.6123 15.9683 24.4253 22.3677 24.4253 cv
22.3677 24.4253 li
cp
.2 .203922 .219608 rgb
f
22.3677 27.5156 mo
28.2437 27.5156 33.0845 31.8911 33.8433 37.5571 cv
33.9087 37.0522 33.9575 36.5396 33.9575 36.0132 cv
33.9575 29.6123 28.77 24.4253 22.3677 24.4253 cv
15.9683 24.4253 10.7798 29.6123 10.7798 36.0132 cv
10.7798 36.5396 10.8247 37.0522 10.895 37.5571 cv
11.6509 31.8911 16.4927 27.5156 22.3677 27.5156 cv
cp
.960784 .913725 .470588 rgb
f
26.6724 36.064 mo
32.1724 36.062 li
32.1665 32.6841 30.4116 29.3984 27.2739 27.5869 cv
24.5073 32.3804 li
25.7896 33.1177 26.6636 34.4839 26.6724 36.064 cv
cp
.2 .203922 .219608 rgb
f
20.2261 32.3823 mo
17.4604 27.5918 li
16.0239 28.4233 14.7759 29.6309 13.8862 31.1733 cv
12.9917 32.7231 12.5679 34.4146 12.5708 36.0825 cv
18.0679 36.0854 li
18.0688 34.4995 18.9438 33.1265 20.2261 32.3823 cv
cp
f
22.3696 40.4019 mo
21.5835 40.4019 20.8569 40.1743 20.2222 39.8062 cv
17.4771 44.563 li
20.6108 46.3706 24.3267 46.2534 27.2534 44.5747 cv
24.5063 39.814 li
23.8755 40.1792 23.1509 40.4019 22.3696 40.4019 cv
cp
f
24.9546 36.0933 mo
24.9546 37.5229 23.7983 38.6802 22.3706 38.6802 cv
20.9419 38.6802 19.7866 37.5229 19.7866 36.0933 cv
19.7866 34.6694 20.9419 33.5112 22.3706 33.5112 cv
23.7983 33.5112 24.9546 34.6694 24.9546 36.0933 cv
cp
f
21.8657 49.1245 mo
19.9292 49.1265 18.0659 49.0396 16.2983 48.8726 cv
18.0649 49.9624 20.1392 50.603 22.3677 50.603 cv
24.7007 50.603 26.8687 49.9077 28.687 48.7212 cv
26.5552 48.98 24.2681 49.1226 21.8657 49.1245 cv
cp
.309804 .317647 .341176 rgb
f
69.9341 1 mo
60.4087 1 52.3188 4.18066 51.9868 8.10693 cv
51.6118 13.5273 51.3696 18.9575 51.2622 24.3901 cv
51.0649 34.2378 51.3091 44.0942 51.9888 53.9194 cv
52.5923 57.7476 60.5669 60.8237 69.9341 60.8237 cv
79.3013 60.8237 87.2798 57.7476 87.8872 53.9194 cv
88.5767 44.0942 88.8208 34.2378 88.6235 24.3901 cv
88.5142 18.9575 88.2681 13.5273 87.8892 8.10693 cv
87.5532 4.18066 79.4595 1 69.9341 1 cv
cp
.878431 .701961 .133333 rgb
f
69.9556 0 mo
60.9771 -.00585938 51.4341 2.98877 51.0063 8.00977 cv
50.6274 13.4424 50.3774 18.9365 50.2661 24.3569 cv
50.063 34.1909 50.3032 44.1567 50.9751 53.9761 cv
50.979 54.0044 50.981 54.0337 50.9849 54.062 cv
51.6802 58.481 59.8169 61.8169 69.9146 61.8237 cv
80.0122 61.8306 88.1567 58.5044 88.8579 54.0884 cv
88.8638 54.0601 88.8657 54.0308 88.8677 54.0024 cv
89.563 44.1938 89.8188 34.229 89.6274 24.3833 cv
89.522 18.9688 89.2778 13.4731 88.9028 8.0498 cv
88.4751 3.0127 78.9341 .00585938 69.9556 0 cv
69.9556 0 li
cp
69.9536 1 mo
79.479 1.00635 87.5708 4.19238 87.9048 8.11914 cv
88.2798 13.5396 88.522 18.9697 88.6274 24.4028 cv
88.8188 34.2505 88.5669 44.1069 87.8716 53.9312 cv
87.2622 57.7593 79.2817 60.8296 69.9146 60.8237 cv
60.5474 60.8179 52.5747 57.7358 51.9731 53.9077 cv
51.2993 44.0815 51.063 34.2251 51.2661 24.3774 cv
51.3774 18.9453 51.6235 13.5151 52.0024 8.09473 cv
52.3364 4.16895 60.4282 .993652 69.9536 1 cv
69.9536 1 li
cp
.309804 .164706 .0509804 rgb
f
85.2661 7.49072 mo
85.4868 10.5811 78.4985 13.0903 69.7173 13.0903 cv
60.9341 13.0903 53.9458 10.5811 54.1704 7.49072 cv
54.4028 4.3999 61.395 1.89844 69.7212 1.89844 cv
78.0474 1.89844 85.0337 4.3999 85.2661 7.49072 cv
cp
.8 .52549 .133333 rgb
f
69.7212 3.71387 mo
77.2896 3.71387 83.7036 5.7417 85.0981 8.3999 cv
85.2153 8.10352 85.2856 7.80127 85.2661 7.49072 cv
85.0337 4.3999 78.0474 1.89844 69.7212 1.89844 cv
61.395 1.89844 54.4028 4.3999 54.1704 7.49072 cv
54.1509 7.80127 54.2192 8.10352 54.3364 8.3999 cv
55.7349 5.7417 62.1489 3.71387 69.7212 3.71387 cv
cp
.439216 .235294 .0745098 rgb
f
80.4165 7.58301 mo
80.4673 8.71045 78.5903 9.62402 76.229 9.62402 cv
73.8638 9.62402 71.9478 8.71045 71.9419 7.58301 cv
71.936 6.4541 73.8071 5.54004 76.1274 5.54004 cv
78.4419 5.54004 80.3657 6.4541 80.4165 7.58301 cv
cp
.878431 .701961 .133333 rgb
f
83.7915 58.2212 mo
81.4868 59.3159 78.4478 60.1372 75.0181 60.5405 cv
74.8892 60.021 74.8325 59.394 74.8599 58.2749 cv
74.9263 55.4409 73.9478 55.4409 73.9927 52.603 cv
74.0317 49.7651 75.2798 49.7651 75.3247 46.9233 cv
75.3638 44.0845 75.647 44.0845 75.6782 41.2417 cv
75.7056 38.3979 73.6567 38.3979 73.6646 35.5522 cv
73.6724 32.7095 73.7837 32.7095 73.7837 29.8667 cv
73.7798 27.0195 74.3853 27.0195 74.3716 24.1743 cv
74.356 21.3276 75.1411 21.3276 75.1118 18.4814 cv
75.0981 17.1719 74.9849 16.4678 74.9458 15.8232 cv
78.8677 15.4331 82.2563 14.5459 84.6353 13.3491 cv
84.2798 13.9678 83.9751 14.6787 84.0142 15.7368 cv
84.1079 18.5747 84.6333 18.5747 84.7056 21.4136 cv
84.7642 24.2534 86.2603 24.2534 86.2974 27.0952 cv
86.3208 29.936 85.9478 29.936 85.9419 32.7769 cv
85.9224 35.6167 85.1665 35.6167 85.1196 38.4595 cv
85.061 41.2974 85.0571 41.2974 84.9712 44.1353 cv
84.8696 46.9741 83.6216 46.9741 83.5083 49.813 cv
83.3813 52.6519 84.0708 52.6519 83.9087 55.4888 cv
83.8286 56.8394 83.8091 57.5444 83.7915 58.2212 cv
cp
.960784 .772549 .164706 rgb
f
62.3833 17.5547 mo
62.3384 20.4438 62.7505 20.4438 62.7231 23.335 cv
62.6997 26.2271 61.897 26.2275 61.8872 29.1187 cv
61.8833 32.0112 60.7524 32.0112 60.7661 34.9028 cv
60.7856 37.7954 62.5181 37.7954 62.5474 40.688 cv
62.5845 43.5796 62.5864 43.5806 62.6372 46.4663 cv
62.6919 49.355 61.5142 49.355 61.5981 52.2456 cv
61.686 55.1343 62.1431 55.0972 62.5884 57.9634 cv
62.7388 58.9399 62.8638 59.6128 62.9224 60.1782 cv
60.2993 59.689 57.9946 58.9458 56.1899 58.0269 cv
56.2681 57.4175 56.3677 56.7173 56.2993 55.5132 cv
56.1431 52.6206 54.729 52.6196 54.5825 49.7271 cv
54.4497 46.8315 56.0474 46.8315 55.9575 43.9351 cv
55.8794 41.0396 54.3286 41.0396 54.27 38.1401 cv
54.2231 35.2407 55.3501 35.2397 55.3345 32.3413 cv
55.3325 29.4443 54.9634 29.4443 54.9888 26.5454 cv
55.0259 23.646 56.0532 23.646 56.1118 20.7456 cv
56.1841 17.8457 54.5786 17.8457 54.6919 14.9463 cv
54.7349 13.8853 54.8657 13.2407 55.063 12.7124 cv
56.8364 13.8491 59.4497 14.7676 62.5747 15.3496 cv
62.4927 15.9209 62.4009 16.5923 62.3833 17.5547 cv
cp
f
79.9653 8.09375 mo
80.0063 9.06445 78.3872 9.85156 76.354 9.85156 cv
74.3149 9.85156 72.6626 9.06445 72.6548 8.09375 cv
72.647 7.12207 74.2603 6.33447 76.2642 6.33447 cv
78.2661 6.33447 79.9243 7.12207 79.9653 8.09375 cv
cp
.309804 .164706 .0509804 rgb
f
70.1196 14.5884 mo
60.9985 14.5889 53.4868 11.8623 51.979 8.23389 cv
51.938 8.83984 51.897 9.4458 51.8579 10.0522 cv
53.4028 13.6826 60.9595 16.4092 70.1196 16.4092 cv
78.7759 16.4092 86.0044 13.9707 88.0571 10.6372 cv
88.0181 10.0308 87.979 9.42432 87.938 8.81836 cv
85.9204 12.1504 78.7368 14.5889 70.1196 14.5884 cv
cp
.439216 .235294 .0745098 rgb
f
69.8657 29.9946 mo
78.0317 29.9863 84.8755 28.4731 88.6528 26.125 cv
88.645 25.5469 88.6353 24.9688 88.6235 24.3906 cv
88.604 23.3945 88.5786 22.3984 88.5493 21.4023 cv
87.1821 24.0225 79.8442 26.6489 69.9517 26.6587 cv
60.0474 26.6694 52.6958 24.0508 51.3325 21.4844 cv
51.3052 22.4531 51.2817 23.4219 51.2622 24.3906 cv
51.2505 25.0215 51.2388 25.6523 51.229 26.2832 cv
55.063 28.5542 61.8267 30.0024 69.8657 29.9946 cv
cp
.8 .52549 .133333 rgb
f
88.3989 14.8623 mo
88.4653 16.1592 88.5239 17.4565 88.5767 18.7544 cv
88.4771 21.6338 80.7583 24.8501 69.9517 24.8608 cv
69.9341 24.8608 69.9146 24.8608 69.8911 24.8608 cv
59.1157 24.8608 51.4146 21.6655 51.3091 18.8643 cv
51.356 17.5454 51.4106 16.2271 51.4731 14.9092 cv
50.8442 15.5532 50.2134 16.1978 49.5825 16.8418 cv
48.6606 17.7822 48.147 18.8306 48.106 19.8726 cv
47.9067 24.6357 57.313 28.2222 69.8032 28.2217 cv
69.8247 28.2217 69.8462 28.2217 69.8677 28.2217 cv
82.3618 28.21 91.772 24.6001 91.5591 19.8281 cv
91.52 18.8789 91.1001 17.9272 90.3462 17.0737 cv
89.6958 16.3364 89.0454 15.5991 88.3989 14.8623 cv
88.3989 14.8623 li
cp
50.3872 17.3477 mo
50.3657 17.8535 50.3462 18.3594 50.3267 18.8652 cv
50.3267 18.8882 50.3267 18.9106 50.3286 18.9336 cv
50.4712 22.7075 59.3013 25.7798 69.8931 25.7793 cv
69.9126 25.7793 69.9321 25.7793 69.9536 25.7793 cv
80.5767 25.7681 89.4263 22.646 89.5571 18.8213 cv
89.5591 18.7988 89.5591 18.7754 89.5571 18.7524 cv
89.5415 18.3442 89.522 17.9365 89.5044 17.5283 cv
89.5356 17.5654 89.5688 17.6021 89.6021 17.6387 cv
90.2095 18.3291 90.5454 19.0869 90.5747 19.8291 cv
90.6509 21.7412 88.7075 23.5645 85.0884 24.9614 cv
81.1938 26.4658 75.7778 27.2979 69.8677 27.3037 cv
69.8462 27.3037 69.8247 27.3037 69.8032 27.3037 cv
58.0825 27.3037 48.9224 24.0381 49.0903 19.8716 cv
49.1216 19.0552 49.5396 18.2163 50.2915 17.4453 cv
50.3247 17.4126 50.356 17.3804 50.3872 17.3477 cv
50.3872 17.3477 li
cp
.309804 .164706 .0509804 rgb
f
89.6021 17.6387 mo
89.5688 17.6021 89.5356 17.5654 89.5044 17.5283 cv
89.522 17.9365 89.5415 18.3442 89.5571 18.7524 cv
89.5591 18.7754 89.5591 18.7988 89.5571 18.8213 cv
89.4263 22.646 80.5767 25.7681 69.9536 25.7793 cv
69.9321 25.7793 69.9126 25.7793 69.8931 25.7793 cv
59.3013 25.7798 50.4712 22.7075 50.3286 18.9336 cv
50.3267 18.9106 50.3267 18.8882 50.3267 18.8652 cv
50.3462 18.3594 50.3657 17.8535 50.3872 17.3477 cv
50.356 17.3804 50.3247 17.4126 50.2915 17.4453 cv
49.5396 18.2163 49.1216 19.0552 49.0903 19.8716 cv
48.9224 24.0381 58.0825 27.3037 69.8032 27.3037 cv
69.8247 27.3037 69.8462 27.3037 69.8677 27.3037 cv
75.7778 27.2979 81.1938 26.4658 85.0884 24.9614 cv
88.7075 23.5645 90.6509 21.7412 90.5747 19.8291 cv
90.5454 19.0869 90.2095 18.3291 89.6021 17.6387 cv
cp
.878431 .701961 .133333 rgb
f
60.9575 24.9971 mo
54.7524 23.8516 50.4341 21.5654 50.3286 18.9336 cv
50.3267 18.9106 50.3267 18.8882 50.3267 18.8652 cv
50.3462 18.3594 50.3657 17.8535 50.3872 17.3477 cv
50.356 17.3804 50.3247 17.4126 50.2915 17.4453 cv
49.5396 18.2163 49.1216 19.0552 49.0903 19.8716 cv
48.9595 23.1885 54.7407 25.9287 63.022 26.9102 cv
62.27 26.3228 61.5786 25.6836 60.9575 24.9971 cv
cp
.8 .52549 .133333 rgb
f
89.6021 17.6387 mo
89.5688 17.6021 89.5356 17.5654 89.5044 17.5283 cv
89.522 17.9365 89.5415 18.3442 89.5571 18.7524 cv
89.5591 18.7754 89.5591 18.7988 89.5571 18.8213 cv
89.5024 20.2183 88.2876 21.5195 86.2524 22.6118 cv
85.1313 23.8647 83.7798 24.9673 82.231 25.8682 cv
83.2485 25.5991 84.2114 25.3003 85.0884 24.9614 cv
88.7075 23.5645 90.6509 21.7412 90.5747 19.8291 cv
90.5454 19.0869 90.2095 18.3291 89.6021 17.6387 cv
cp
.960784 .913725 .470588 rgb
f
88.3228 48.5757 mo
88.2563 49.8726 88.1802 51.1685 88.0981 52.4634 cv
87.645 55.3403 80.0435 58.5454 69.9458 58.5562 cv
69.9282 58.5562 69.9087 58.5562 69.8892 58.5562 cv
59.8169 58.5562 52.2388 55.3716 51.7935 52.5737 cv
51.7056 51.2573 51.6255 49.9399 51.5532 48.6216 cv
50.9927 49.2661 50.436 49.9106 49.8872 50.5542 cv
49.0825 51.4937 48.7095 52.5405 48.7935 53.5806 cv
49.2642 58.3345 58.3735 61.9028 69.8052 61.9028 cv
69.8247 61.9028 69.8462 61.9028 69.8657 61.9028 cv
81.2993 61.8911 90.4204 58.2993 90.8774 53.5356 cv
90.9536 52.5874 90.6567 51.6382 90.0122 50.7847 cv
89.4556 50.0483 88.8931 49.312 88.3228 48.5757 cv
88.3228 48.5757 li
cp
50.7329 51.0591 mo
50.7661 51.5649 50.8013 52.0708 50.8364 52.5757 cv
50.8384 52.5981 50.8403 52.6196 50.8442 52.6431 cv
51.4614 56.4106 60.0454 59.4712 69.8892 59.4712 cv
69.9067 59.4712 69.9263 59.4712 69.9458 59.4712 cv
79.8169 59.4604 88.4302 56.3501 89.0474 52.5308 cv
89.0513 52.5083 89.0532 52.4849 89.0552 52.4614 cv
89.0825 52.0542 89.1079 51.647 89.1353 51.2397 cv
89.1626 51.2769 89.1899 51.313 89.2192 51.3501 cv
89.7388 52.0396 89.981 52.7954 89.9243 53.5356 cv
89.7798 55.4458 87.6997 57.2642 84.1841 58.6558 cv
80.3911 60.1558 75.3462 60.9839 69.8638 60.9888 cv
69.8442 60.9888 69.8247 60.9888 69.8052 60.9888 cv
59.0142 60.9888 50.1392 57.7388 49.7466 53.5786 cv
49.6821 52.7642 49.9927 51.9282 50.6509 51.1577 cv
50.6782 51.1245 50.7056 51.0923 50.7329 51.0591 cv
50.7329 51.0591 li
cp
.309804 .164706 .0509804 rgb
f
89.2192 51.3501 mo
89.1899 51.313 89.1626 51.2769 89.1353 51.2397 cv
89.1079 51.647 89.0825 52.0542 89.0552 52.4614 cv
89.0532 52.4849 89.0513 52.5083 89.0474 52.5308 cv
88.4302 56.3501 79.8169 59.4604 69.9458 59.4712 cv
69.9263 59.4712 69.9067 59.4712 69.8892 59.4712 cv
60.0454 59.4712 51.4614 56.4106 50.8442 52.6431 cv
50.8403 52.6196 50.8384 52.5981 50.8364 52.5757 cv
50.8013 52.0708 50.7661 51.5649 50.7329 51.0591 cv
50.7056 51.0923 50.6782 51.1245 50.6509 51.1577 cv
49.9927 51.9282 49.6821 52.7642 49.7466 53.5786 cv
50.1392 57.7388 59.0142 60.9888 69.8052 60.9888 cv
69.8247 60.9888 69.8442 60.9888 69.8638 60.9888 cv
75.3462 60.9839 80.3911 60.1558 84.1841 58.6558 cv
87.6997 57.2642 89.7798 55.4458 89.9243 53.5356 cv
89.981 52.7954 89.7388 52.0396 89.2192 51.3501 cv
cp
.878431 .701961 .133333 rgb
f
61.4849 58.6909 mo
55.6118 57.5503 51.2466 55.27 50.8442 52.6431 cv
50.8403 52.6196 50.8384 52.5981 50.8364 52.5757 cv
50.8013 52.0708 50.7661 51.5649 50.7329 51.0591 cv
50.7056 51.0923 50.6782 51.1245 50.6509 51.1577 cv
49.9927 51.9282 49.6821 52.7642 49.7466 53.5786 cv
50.0298 56.8911 55.7915 59.6206 63.4985 60.5972 cv
62.7759 60.0112 62.1021 59.3755 61.4849 58.6909 cv
cp
.8 .52549 .133333 rgb
f
89.2192 51.3501 mo
89.1899 51.313 89.1626 51.2769 89.1353 51.2397 cv
89.1079 51.647 89.0825 52.0542 89.0552 52.4614 cv
89.0532 52.4849 89.0513 52.5083 89.0474 52.5308 cv
88.8423 53.9253 87.5259 55.2241 85.4888 56.313 cv
84.3071 57.562 82.9438 58.6626 81.4341 59.5591 cv
82.4067 59.2915 83.3306 58.9946 84.1841 58.6558 cv
87.6997 57.2642 89.7798 55.4458 89.9243 53.5356 cv
89.981 52.7954 89.7388 52.0396 89.2192 51.3501 cv
cp
.960784 .913725 .470588 rgb
f
69.8657 49.1245 mo
77.8052 49.1167 84.5083 47.6069 88.3794 45.2603 cv
88.4048 44.6831 88.4282 44.106 88.4497 43.5278 cv
88.4888 42.5317 88.522 41.5356 88.5513 40.5396 cv
87.0063 43.1587 79.6528 45.7847 69.9497 45.7935 cv
60.2349 45.8042 52.8716 43.188 51.3364 40.6216 cv
51.3638 41.5913 51.397 42.5591 51.4341 43.5278 cv
51.4575 44.1577 51.4829 44.7876 51.5103 45.4175 cv
55.4263 47.688 62.0493 49.1333 69.8657 49.1245 cv
cp
.8 .52549 .133333 rgb
f
88.7837 34.0024 mo
88.7739 35.3003 88.7583 36.5981 88.7329 37.896 cv
88.4282 40.7778 80.6001 43.9917 69.9517 44.0034 cv
69.9321 44.0034 69.9126 44.0034 69.8911 44.0034 cv
59.27 44.0034 51.4653 40.8091 51.1606 38.0063 cv
51.1313 36.687 51.1099 35.3677 51.0942 34.0483 cv
50.4907 34.6929 49.8892 35.3374 49.2915 35.9829 cv
48.4165 36.9243 47.9712 37.9722 48.0005 39.0161 cv
48.1821 43.7798 57.6333 47.3599 69.8032 47.3599 cv
69.8247 47.3599 69.8462 47.3599 69.8677 47.3599 cv
82.0415 47.3472 91.5005 43.7446 91.6685 38.9712 cv
91.6938 38.02 91.3345 37.0679 90.6274 36.2144 cv
90.0161 35.4771 89.4009 34.7397 88.7837 34.0024 cv
88.7837 34.0024 li
cp
50.1392 36.4878 mo
50.147 36.9946 50.1587 37.5015 50.1704 38.0083 cv
50.1704 38.0298 50.1724 38.0522 50.1763 38.0757 cv
50.5942 41.8501 59.4849 44.9204 69.8911 44.9204 cv
69.9106 44.9204 69.9321 44.9204 69.9517 44.9204 cv
80.3872 44.9087 89.3052 41.7896 89.7192 37.9634 cv
89.7212 37.9399 89.7231 37.9175 89.7231 37.894 cv
89.731 37.4858 89.7388 37.0776 89.7446 36.6694 cv
89.7759 36.7065 89.8071 36.7427 89.8364 36.7798 cv
90.4087 37.4712 90.6978 38.229 90.6782 38.9712 cv
90.6294 40.8843 88.563 42.7075 84.9204 44.103 cv
80.9946 45.6069 75.6665 46.437 69.8657 46.4429 cv
69.8462 46.4429 69.8247 46.4429 69.8032 46.4429 cv
58.3462 46.4429 49.1411 43.1821 48.9907 39.0142 cv
48.9673 38.1978 49.3325 37.3579 50.0474 36.5864 cv
50.0767 36.5542 50.1079 36.521 50.1392 36.4878 cv
50.1392 36.4878 li
cp
.309804 .164706 .0509804 rgb
f
89.8364 36.7798 mo
89.8071 36.7427 89.7759 36.7065 89.7446 36.6694 cv
89.7388 37.0776 89.731 37.4858 89.7231 37.894 cv
89.7231 37.9175 89.7212 37.9399 89.7192 37.9634 cv
89.3032 41.7896 80.3872 44.9087 69.9517 44.9204 cv
69.9321 44.9204 69.9106 44.9204 69.8911 44.9204 cv
59.4849 44.9204 50.5942 41.8501 50.1763 38.0757 cv
50.1724 38.0522 50.1704 38.0298 50.1704 38.0083 cv
50.1587 37.5015 50.147 36.9946 50.1392 36.4878 cv
50.1079 36.521 50.0767 36.5542 50.0474 36.5864 cv
49.3325 37.3579 48.9673 38.1978 48.9907 39.0142 cv
49.1411 43.1821 58.3462 46.4429 69.8032 46.4429 cv
69.8247 46.4429 69.8462 46.4429 69.8657 46.4429 cv
75.6665 46.437 80.9946 45.6069 84.9204 44.103 cv
88.563 42.7075 90.6294 40.8843 90.6782 38.9712 cv
90.6978 38.229 90.4087 37.4712 89.8364 36.7798 cv
cp
.878431 .701961 .133333 rgb
f
61.0571 44.1382 mo
54.8989 42.9946 50.4556 40.7085 50.1763 38.0757 cv
50.1724 38.0522 50.1704 38.0298 50.1704 38.0083 cv
50.1587 37.5015 50.147 36.9946 50.1392 36.4878 cv
50.1079 36.521 50.0767 36.5542 50.0474 36.5864 cv
49.3325 37.3579 48.9673 38.1978 48.9907 39.0142 cv
49.0942 42.3325 54.9966 45.0698 63.1392 46.0503 cv
62.3853 45.4634 61.6899 44.8237 61.0571 44.1382 cv
cp
.8 .52549 .133333 rgb
f
89.8364 36.7798 mo
89.8071 36.7427 89.7759 36.7065 89.7446 36.6694 cv
89.7388 37.0776 89.731 37.4858 89.7231 37.894 cv
89.7231 37.9175 89.7212 37.9399 89.7192 37.9634 cv
89.5767 39.3608 88.2759 40.6626 86.1919 41.7544 cv
85.0103 43.0063 83.6216 44.1089 82.0591 45.0093 cv
83.0747 44.7407 84.0376 44.4419 84.9204 44.103 cv
88.563 42.7075 90.6294 40.8843 90.6782 38.9712 cv
90.6978 38.229 90.4087 37.4712 89.8364 36.7798 cv
cp
.960784 .913725 .470588 rgb
f
70.3677 24.4253 mo
63.9673 24.4253 58.7798 29.6123 58.7798 36.0132 cv
58.7798 42.4126 63.9673 47.603 70.3677 47.603 cv
76.77 47.603 81.9575 42.4126 81.9575 36.0132 cv
81.9575 29.6123 76.77 24.4253 70.3677 24.4253 cv
cp
.878431 .701961 .133333 rgb
f
70.3677 23.5562 mo
63.5005 23.5562 57.9106 29.1436 57.9106 36.0132 cv
57.9106 42.8833 63.5005 48.4731 70.3677 48.4731 cv
77.2368 48.4731 82.8267 42.8833 82.8267 36.0132 cv
82.8267 29.1436 77.2368 23.5562 70.3677 23.5562 cv
70.3677 23.5562 li
cp
70.3677 24.4253 mo
76.77 24.4253 81.9575 29.6123 81.9575 36.0132 cv
81.9575 42.4126 76.77 47.603 70.3677 47.603 cv
63.9673 47.603 58.7798 42.4126 58.7798 36.0132 cv
58.7798 29.6123 63.9673 24.4253 70.3677 24.4253 cv
70.3677 24.4253 li
cp
.309804 .164706 .0509804 rgb
f
70.3677 27.5156 mo
76.2427 27.5156 81.0845 31.8911 81.8423 37.5571 cv
81.9087 37.0522 81.9575 36.5396 81.9575 36.0132 cv
81.9575 29.6123 76.77 24.4253 70.3677 24.4253 cv
63.9673 24.4253 58.7798 29.6123 58.7798 36.0132 cv
58.7798 36.5396 58.8247 37.0522 58.895 37.5571 cv
59.6509 31.8911 64.4927 27.5156 70.3677 27.5156 cv
cp
.960784 .913725 .470588 rgb
f
74.6724 36.064 mo
80.1724 36.062 li
80.1665 32.6841 78.4106 29.3984 75.2739 27.5869 cv
72.5063 32.3804 li
73.7896 33.1177 74.6626 34.4839 74.6724 36.064 cv
cp
.309804 .164706 .0509804 rgb
f
68.2251 32.3823 mo
65.4595 27.5918 li
64.0239 28.4233 62.7759 29.6309 61.8853 31.1733 cv
60.9907 32.7231 60.5669 34.4146 60.5708 36.0825 cv
66.0669 36.0854 li
66.0688 34.4995 66.9438 33.1265 68.2251 32.3823 cv
cp
f
70.3696 40.4019 mo
69.5825 40.4019 68.856 40.1743 68.2212 39.8062 cv
65.4771 44.563 li
68.6099 46.3706 72.3267 46.2534 75.2524 44.5747 cv
72.5063 39.814 li
71.8755 40.1792 71.1509 40.4019 70.3696 40.4019 cv
cp
f
72.9536 36.0933 mo
72.9536 37.5229 71.7974 38.6802 70.3696 38.6802 cv
68.9419 38.6802 67.7856 37.5229 67.7856 36.0933 cv
67.7856 34.6694 68.9419 33.5112 70.3696 33.5112 cv
71.7974 33.5112 72.9536 34.6694 72.9536 36.0933 cv
cp
f
69.8657 49.1245 mo
67.9282 49.1265 66.0649 49.0396 64.2974 48.8726 cv
66.0649 49.9624 68.1392 50.603 70.3677 50.603 cv
72.6997 50.603 74.8677 49.9077 76.686 48.7212 cv
74.5552 48.98 72.2681 49.1226 69.8657 49.1245 cv
cp
.8 .52549 .133333 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.0.2
%%For: (Daniel) ()
%%Title: (Barrels.eps)
%%CreationDate: 5/2/2015 11:38 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6kuo#tdPh%%md'.ZOEYN&W-n\_,:'Lu_:X;4"UdnPN0%RAoJ/YfA,kPKaK3NffXfo1cojNJh*Zn%Ef#a6/Mlk,F(]'/3p?2?
%LF^:"(+N<CUjq`gm5l'7rqWHRGFnN:]9?KfT]Xt%V[D-8f6@.MCXln;M==,YfKMI_%]1o"_fg5ZBajmVnRS?Apq8P`Cpji<QWE3r
%\)/;,>$:+!g;ih\IGNdblh.l*_sp<6=p\pZ'AYg#q=TEtU'gBKe&/ll'-cgcVc2jqeW&R4[\'Xg9bN`k47huRCGP-P`T-"Hi:D@2
%Xfht-ohK_\)RlTWiIEC^W6g&E1\>1Rffa#>p8?>N,qVQ8:@D7\`GB+$"NlDT$E,,;s(eV6b**hl"T@5XNW5ioMLXT'id\q2G$_n!
%U('U""BNM5l"<N"?l'^]AVN8Q%dnL97fCoFbB)i:29V$Y9%Bs;R0R#bk!19HTaCB9Mgk?#TGBMQ?#`$Bk2QV>;(nd;h>O2%rH4h)
%[+jkfa(efDj69>-5;[e3lr6;A;7B?uh=9esDbB@(QkmkuC^rP_4r$iM?L,(FMN-$S^K$-Hf(cI2,p=<&:GEq!Q,qCg]f81.B`6eA
%o\$7,X\j;H4++sEX?*d7K<ul_2K>,&hKFJVdtTbCRQrqmVGgQT>#:!W4iC%-,a$k#pC;P&"l6k2n&`)k8`^Z:7TrK#Omu5Ks&&`j
%;,=+GJaU&8lnp[1H+.OX0@AqIT[OaLJGU!BY&pXc=p4f_U&$Wpi8:JjdubOO'D>`@l%Rso('"3\$i)C.HeCW[+.nLIVk`q$_=6W[
%B'PrGI^cUEDRHHSAS_<M[nSA]k!c>!oUg$)I5L-tkY_;mF5!+,CTZIWrWVuB0ZW",r(=0a,Q7WCrr4bBdlJe?O]EUSVk;bklhA#D
%lA*h[C\jZe@HY!n^TJ&ql1Tn-DP]5S<8P('UWYLaZJQS-`YJJ=[p[ck=W^>Lj4<b-pIjVDeRpdVoR<JM>K#)c[6QK(,'NNM>UJ4Z
%Gm0/!0%Ep:H:1rG46TA$g?XC/5%a;+E*2$8%n+QIVYZk@:\KSBhW,r]gnZ3F?a?TJf"op&\i`0I**%0;_gYMTk37O+N-^+J\"DtD
%Bao@V=uDNY/o,!ofC/VhRV9))rSHMC2*1$1b?B1oIR!%=9,ftQrC]^`S#<9feX]S35J:+4[)M$?f;LF.rLc(lHWadRR5BM1U"Bmf
%POA'-;c8mVkcj"0Kf.nE[!I4_oY%6MX47S8r?$;4QJZ*&Vn_u<A9d7/%u.h/po1PaKDN)6,n8TIG<XofbeIh^F=VE3BW"@l82hu/
%<OVBMdp%.M!bIl#<Jt_7,9PC7Ki&\KIqdF74-%BFV4U(-#h=:jl?G\n5js0Bdkgjd)ps,:fN)Rio's%dl244>;SCjVL\em!\[)#%
%:R-2\+o$Zp7a*Q@FYSAPP.mjYQ>sRm^I$!4?7GL(h1*5Q]Y"$G:&h;jh+8Nug,s6E-I_>:'F-4$rh*NKQM`.G*``/gRSK.0WFrW3
%HEEa\Ant"*EG'2r'-K>\m'Yg>[Dos3_Rn'P(Z[ZLnag4$k-pQRJ-o7iI?&[OVpd8$^c=#P+-0WmX6'Yp@[(XMO]EO@C#DlaAY.\6
%oOn);qYR4lI\&Ra:0S`JM+\4lLKYg%/5u8/<rY!*h!:J-C-YEi'r%k(f\@!JdQ`E:QXK<mF0O$F+.c4\`Fkt<2.ZHRkGNZXm&mR(
%r;AC6HY_@6m8?X&1G[Q.qbL"-VnFeO:&Ea>GNPMQ>Mm#o61#J'FuZYl\,*eSo&30@f<;T;-\&`GluXWBEKAR+J(&\U?IesnWB)%n
%L?!"B/AlR(70o?ohn(dP=_Sm_Mn[Q\R[gBGd'[%Ws4=EkbgCMn>*tr^p"*Pd_bkX)me92Qn[(1o+3n4_o)JA5Y+ejVN3+pm`CPJX
%2L>8\ej&$7pa\GTDD0ME962[G6_#$bme;'lU[IoGBpl_K21L"E4X6#lqM%/MapL8JJ(N=;ArX4=h%n9$^FS[.(&%)'qb&n)mN!?C
%-\'SKp;]VUYq3Y)79.D)gW=K62>uE*qt+j3Aq'<oi@L8hgJ-?%T-*o,PBL6KaO07^c`puX:&d<>Ta6X^fC/;cW67Ypj6gH&3c8:s
%VK4Cq.B`TL9anf+c^Ng"]DFJ1D4^!8Hi>>.Sp#1"d^kqjn5#H]1>F_SmU5V#VgK#pe[=eZS^Qo7#)B*hl_4?ig\5kN55nVL>goe6
%F_9i\G;L@a:>=su'E(iem\i2o^Z($&-eEX0S%XY8q<om7P@qEfmetSNYumBGZ\JDH7/p=>o#;FC\\EFmFh>3XO')R/#Eui.>3!`a
%AOIM&>Y6Jfaa]Q>*t/C@$C:S,p@4P@'XDQ'7=Shbo#D!FhrAKUp14G"1:,H#^>RCD@\@?'+"7oU6"/3oHEI-ppRbq4YHAQTI_!*p
%5hYHHn/,g8F>=l.>QaZnQ\t"DUkR:h3"A[Kn9S2[]l*U?jRqfa5AM]D%Xu(qo)1Moj:c&6s"SS57q!tT/Ln0aD=u3mp920To]T3E
%Y"E".m;3)GjBagSUFnH"0/Y^poNI3V)WAR)7ADs1S6C)D^L*<^l)Xh#%I:LH.A:N4/CHU1_r5n$fcNu2a4TSs9]^m#V1r'!l.WW\
%X=&3OEP^9;fBlh[s0Y6s,sQ#Z3+^S?I3F*RGq":m^2tsFJ*,jN-]YZZhUZsalj!hna/)7B(B5bY'/%iSdrB.W)7?E_p>tpop4[9*
%*7fh=liI*YheHLR@q$5RRuEFSR/23PnYLrC`TUoOXmplnZ`m5E6'"lF/i?P5ppCt)`A9LkDI.1=fb^fNrOuBDs*#^VXC]!Z>oJa#
%]p%<&1q(m+knjTqf:jA`.esV=9`1eMF/u(=pKqZ8)Po76W3=7,ep+bjClLNA[]sFEW2U,<."Oj'n4RNuFK.Ytlg(ub8K\6T26!;m
%RC_G$b:u7B.Rl<Yn9rnQZPO@gZC_WXG<@66]<#M.]s-ACdNmP-qlVqY3?AU`a2?A?j\QM@FBOIY;!2G7E`C_0!TZ_PQV%U_FaiF8
%.b:&3WQ/<$Gpo_BlZ>1^jtCE+6DgO\Fc9e,a$_0=FXiSs3\RT+E84/upd.`FL$]:1=<,>qF=XuZhkl[h:2ek?n+D%Vhc"]sC5YEd
%Tajju?4KKfo]YT#b,@0AOdku<:AZVq@0Q8f#+FkQ<i7&S-`tL1^@RQ9E1/H3lM%Y?$T4\@UL$[B4@LHk)"t2J?E'PlLWLN[cg##c
%543Oi:KpcW#X`:-2^eNE\LgOuD@G:%5*fNPZrpiS8ROA\S?8?i[rPJfGDP"*4MtfTp-M*[io0+qb"A^_N28E\=dLPD5%s[da[^Zd
%q6IY[Y:&-5TBiWGSF.I-qjm0MX<'E/,$B/3#>omQ3/Xf+W';Z)i;g0l9?Od8ag-<-KWb0GVdGCcpnI@M>BD`Hi[_`V(KT?<hU>*T
%Epl[OL=',9\G04uQP5A>Xk'kbfkQk3LKWj6T_I3[V;CnMS`-c9I!:Po]o9P6:s<+X^dap;b<Sk6F/@K_S2504>FA'm@M_E1RWYIY
%luFhki%6UQU+<lfrNVL\B.TM[?IPtBC/a7/QGD1[V*-u7ct0BN.^bYoGc#DEj]h=u7-b7V8(u*XpP9_/Nq;)c&un`A$rA_+Vn8E;
%8I=Y)AnqNB@p!"5S6'm'Dm?Y>eD,VZc7(CXA!s]+:)RTc58aNZ;6SQ"+lY)#LC?aaB.%?%904qE[CbJ@S*kMnSF'\_NMf-!p;=^'
%H0;g`CTd(@e#_^hZ$J0orncl4qic%hQYSsIX+j$eb<r/r=k^#hRT#]Y!J..r2lmQIPeA6'%G8C9-7q+Ooh!PbY_+V<*S\?=B;Hh2
%$KVJaPV^!NZTt[sX1sXKj!gLr<3j`p^oAA"5nZF9aEbe)L#9su56P#-M>M,'1=D3Tn<`Qf6qj/;oHWr3"ZH>9TNdQU&=4k-R?!'C
%h+9m81PNm9a]<oUnm1&L<kgL_c?RXeIa+lQL'g#FYHOMjqjNAKO=&%09_EN&;%aHYGccK#hV3e%=T***#.*J,`a2Q?lqCr82(Q$X
%b<5C(oB+/$@lta5%"HGKU_tiVCUP2:JQ6%QXg'rMA(<.0:IY;GHO'>doZk)CqLtpi'4ZV2"7VhR7e)^EGY>H/]X<R#[YNm<[o9RR
%/+YEKe#WGM-ZhOHcHUhXmaijrl)0Hj5,/f"?)uj9XR/>?>,r?a*aVh)jL@/&-g<Y*It%.3>nZs)(BYO^ZB%%5SQsfM?./*/@M6=O
%D3\bOI/oF2N2UIQj(<3jm<?UHP>2YbTA1QVS.6#nB2#f%<%.N'0/I(?FY:ns=$u5+mBcFO>T!rK2,NNH=Hs:B]jqJf<#nTM&q/'?
%l0A0;`gX;`,:=YRT8[!F*`O2rTHsi+:J/,tiN3Qf&E(dj/WTQ5De5+7X"SZL3Fl-79BiFHN1RW9Ce,#u9o$hJ.=HKM8bjn.9jYF7
%j"=NhAIG4qmaNTNp0a'X](1QP']PJdW^<E,iQ6(V!l+)r6KEWa=h!rgD,PK=/EDH"[+=K6$p3X[L-h*QrFB_^=_!Y!T6*U'S@5B;
%IW*#p88%[B;B']gq81)GV:t#!nN#n+$MEdE];e;Fa;(3biDTb_@l9JdK4,gC-^21SS&KgqeZsA0N"o:tI`XU`V\6mEH[&DEaa"la
%&tRLp0AYF,7^fq1H;`hBP1,!-&<teaV-8L;P2eX%R%0j5LMuRDRN\^fN?O_<:1\;.a`cL"/"^G)GII#&">?i;$]\eDTC/=+3iZjM
%*o]jY/eH2@_DZCPE8I=D@GC6F:Km6+$eafSSc(9RQRp8nH-a/'QS4epSpc!\j9".(@1^.fE`!@Gj8fSEd;]"*mH^<?N"''i[c4UN
%L4@$GqP\RZfn-tDUpdi:,YpMbMN$aX()^U+cRDLcV1<!MnXAL)/p*?FF:VdYb_(dcFr!hTO5-%Zas$U(\,W0/P&VY(g2DrukHQj$
%"2f`nd_?%9bEne1$bJ**(ER5\#o=>C,A1_VlAY;L(8'Z6IYlKecS&/Jm.hrbB6mm!`%hEXSTH=7>/B6E.p8t?BRDKRS@de6Y+7h?
%9J-kg10NFIc5a*7.l.7eJnAJIWiYFCV3Dh@Qfp+Ji'#9/.:pP;j@.WF]Bi28YZMq->#*AnT@!*@aUb:>kJf;IdIt]N>0geF+AcfB
%.%9J-ZWNA=1^d'UIAdj-b_akqd[TfR;-]ABN:8i=7ig7$ro!@\(nIj8;,hXQ=u*7GYFs:Q`csZ/3ju^?2JLGeSZZHenh7#s>fVs?
%epQZYnsP2:DN@Wh='ES,m^]?Wb8o]fQ21NPm\G%d0_Kd\>EK'7qs)Dk\TMpado/99?u$t#aEb@LL3'&`KgJC0oGki!m7a+@AhrrD
%g6jah3?(334<:nl._F_YDkEalC9KS[OfgZRZ/PY_97#0bArZLe;d,J409kIer<kD#(O4*ljK^Mk)=GoIn.Io!("3)F>oqBa1tq5=
%PM.W?Gb.DPV+1ElZ--u0D<e^.RC4j!T736\IG+M"gOIls+*?8V;_sTjfK(\MRa"Rn(9LA9-=9Ij"&tlNYg+_aD+r+51S[$aAEh@B
%oQ1;2^=-1kO8NV!NDk]/eU+rOpZ(VggP>M=>OU^G\TbN_/'Hs#-V"Q"K,`.fDTpA\C\1f<amJ$Ze(*C-_Xd"?O#F\l$QG`+D(^lF
%gYpkdZPhT(4n"\J9q't.LND&6ji&m\#Kob]UWN)f\MI%+/2(nr)!b)GVCREt?Yq>IH/5#\n):$bZW=\^=D2KFo:?j/Rqm3`_@KG>
%c#94U]FWQ'qT3\d;IA=L*mHkUDOmpf^"[I,^@gs.V.Q/$f!G>'g2;]9629Tma%uBa7d\IRXd\>e4teQ0YC0_`R++lCRr`dKf4LUr
%%]C9-f@niiXjcFKkI9DBJ%>SsiF(b\g,KF(fGT]s^"[AX)rI!K*oD;p'iCkVNA$&oL@j*Rn'1ONqMgbTo^-gMVg<,$STrcOS5M05
%\!bqCC>44qdl?pl(74<1gq0mC0BU!o/iW43?>FXY+$=l@m+0Qn]A5Nf?bP.CK8h*ig:$-JiOF+/lU('`Zd)2CcJs9%na*1&qSph:
%mhik=ji(k&/i=:n^A5EH+11L-bWafeS.ACZ4m[m]r8bYqO5'!om.#[u<7u.QS%KoiL%i1;>M&-koG[<QRUgd:iCnBs]@%3sT#_c*
%DqnK5X=rCU]/gc*pi]JTrF9g4;:l_7R9b-fq7,ALhtkRi4rW4M+[$/RgqpFG%,M2l#%5uVQ/ha-<=.lYcA#n[^9uXaD_9dN].s1k
%N+N.hn:bZ:,1MRZIrjH+LY5159Br^W\#[iOHt.'eX46:EGLf?;hc[:H*j*^Jc,YSM<CLgJ/hM7\^%fINRIlm3gKO,i1K8,N=ji#M
%Bc$-(LYF6-opFn!=D@1X]:7Wu@k[TgHu%>XS)7hI#P69VYI7X/DQa3?Y@#7%n%=!QheK7*C`_s8^+Y!9]RZ%WY'BDZpOo4^K$K/%
%4aZnIMYF9f[FY9LG-B<j(<eEQSD6,0CE,I@M2./+L>d;gQo5fKHp;m_hqE>EI'%\/o3Af#GqDYh+tt%f?HkZ_e+t[aH5&cLji-'?
%c2-k7l"P-V3T_6Md$+!;Hp^uC6RuiNJ^5aHId#QIFM9@jDH^hJQ<ff/V6<O-9p1VDF0dC7pe-(MZHP0R=&4R,cf:eB.J!k@0j40c
%j%4[fRE]cY1cnn=\i+X!]N2M-G!@t\DgtoQSn'hoS8QC'[@+Y%qi.@Yqfm7,UUHK2/$4Hu6WQ*,WuVK219I^C]/7$%pD\lXX-7M-
%rHc'sIW40+kMbOOrgQUC2kR0PkP!rABo.n_cPtA-I<W"R9?QBogg&NWIpCQ3/o$Vtnif1/`O"i3c4b-&-pH+HC\M30(Y>,T#A<bX
%PHXc.<&uiS=8QBB[HWGs6$;K&l^jRDoZ\Abg781(HEcsWg,W=#&)I`\]1;=-;]X1+,Sc8=kCtX[[CauY@t"74kT7G2iblFcSEXJ<
%80+fKF)1NJo:;UFVdH'GhK@G9%j/O'Y@!drhU1*SlT=LUm-:'a:QogCleB#nqpDm%Fc!M1>)R,b'c9-@Q<'#Y7_Q4+-h`Lml9B)L
%BUN\1Sf"K^[e<KuB-)MORp)E=Y7TocBm</hm-YPp6sjRCf-^g!^Y?6q(&PB<Z+fi&=[W-+f=rpk4`/]IaO`AH%lWjYfH3l_l8toU
%?MZ/gL/&u9amusTE*&p\>c;^J996P#K.q]0\n+#dIf7oF4u6B;Is"enkB<b@4a[2_QG;L9qiA5NYEo.gJ)LVh__3b?g%6:bA04\i
%1[cA&0?L!F>1SaJ-EWW(Ok9*?rV35cQi4&&7AQ>i9jN9U;Z6Cc3)eS[X%Z;Q4u.VYq1A<9<qS/o*M]X[MDUM,=-o("O#tTQhpS+>
%i-:W6]YCbIhYhD?;fc(>RP9`U;QVai\6dGYB@Et/H1T_Za1>Cc=+3BddL;jIVi9U.T7+6D!mR[$=tAa&mEqq:5+Rgh)8a*U,-l9-
%8;UrI@aMaK/'Vg;8jD+`d"7VOU(W%#p.]\MjEZ=8dQ8)'NK4;tdipn5adf9(q,8KQ<UljHosr?.Q\Y&R&ab&?KkeW<nO,=R4lK.`
%e16N-8CpSi2jTc*2T=o32k>2O,tO)ClXAq<R=NQiL\5<n?,6u9Y0g2VACmq,--9rdi^RRnPHJ,(VQ?`<g'h?3BK<o,c>I`n?hKX)
%)Hn6qcV#pdS7j]S^eLRXO+nEg,1'o7]L[:rAeIS=5"O5,<WtrKb\8Z21ngPI^?1(Em[NBl[H2bk?&C9F*7HOZo`84W_i;(-S*q0E
%DEOj<=l'%18@oVegXHZ-8^6;W\$oZc2L8a(Q<2h]hsZHI1jg*hqXWu,b4K[chjtKN4_Pm;mlqRpoB#iI:T6(nGQl[#jYupGil9C1
%p4qf%kMK@b+g(*Rle@'Sf(.+QnNI+d-[)2O=UnRM?<I0>V<Z[?@9PpFS\KIM,6bl$7]Ypeh>*=DcD_^*X1bfgf^(e(I;694]?a74
%PVL[Ho(kO=>K1VVO+lS&"P.RBD0SlX#?C9=UXuN`q9A;&F`a]W!J:=pNJJ,X>WF4DH:5[]e5_-q.n<"s3\`f)fJAZaQfBnXMYaaN
%;`,)hmi3j%m+nu_p7/Ij;H7;')0#n2HpEmRAm!L\Jq/T.GTFderIhuHq+>Ue>.D>^nnS!\K9]M^5#:-hcW\YdfO5)ebRfT,s&&9u
%em/4j[W7m:r3$X&6D36.2g4LkYFh$2dk]0lk,_ZS=SaEO*[L(0a\"cWr0WC&;WlWpC3Q`SjS2K:f%I)MUfH.@fA-#?kiR=6cRsMs
%ZLr+*&K<=Xj&YJ-rT.1.p[C7%A%/ohD`Q"EDo=,!hL3`sIN<bO,TWBca0usWT5H2VVt]nl#^if&J8<J4N]1T"qK[AEl-Y$T$]%<e
%X;j;4Dkt,o@W*i?:APa'l<,H#%p%8I<^5,tjVG"Iq>B1%g?RVgX)fXPM+"l9DU3g.AtlNCnSI=;bN5)9rV%Zm<*)lQhl4A:Z1A0n
%^Ad*Y2ciShn?*KITC0J$2Fb+RPK?jLI"'Po9Ng\2^1f0bCWkc.d;(!N(H1/7jq\`7a,=::=>m75\?TpN^,9)>]&K9`=SCP9ac4M,
%I/Hm'(S=cm+*P?d[9fDQ?(G1@hgG->mD8`]O.%6Bop,Z[\^#`Leb7_NhYeB`(p:K`[/X^Ar:\\-h1_WWSK8Zep`#.'TrSPMPc*'o
%Zgi[O3MB;RJ3&*gooTq_<cY(GVk5TJN1HVj=.."N15:oDY%0K9J#4a,C`+0T_(ql9FEl0r9mT+sT_aduZ.8:PXtPu:]gS1&W;"gO
%1?Nm#]CqH.o0*snYbN-jf'^;&3NYMqDg)g'rUBW@::#!ScY4hu\_0*TpXj4=T&(*G<eiUTeKb_M2XB`tJ"cc4DHF+.l-&mfIVmi:
%H?TRm0=(*,FnBs%n&q8_P"[mKZ2B%3b=lB^NY:S$*?<kK6d1A<@=o%kpZFd5ZCVNkmuNu":aUSMOJHW4[$)DLC*kMN0"J%=eLt/(
%HfVF_6MDJT?Z"+mTBb9,r/.l?gIV5Ee\6BGH0Okb]?U#4hT$B2c+@0XeUs3Dp$LSg[3p0iHk'5<mEV*4(G&@%@)TiCS8YQ[girf0
%A=H5SY$Tg2l[H3fp\)ndhQ=EYRg6m;Q%!h%Y5)nrr_2VJ.,X%Rc8!mED\Cr44Li(GA@bL8<KGAhp1/=>6#^5c43Z;iDro15S(lD+
%de!`<oAP[:]!8]WipYHukmns>pMO+!+.k*`3YIY"q;TY;#6tXMH`o?Lf:/hE2;^WH:c>gW3Ic5BoC1e<["pWgR8RrEKJ2&;>IfV,
%]3jtJF$=O$`Sk9EF`-uj-8k&Boc8PLo95C&K6o$@9pA@QOMp7j2'L_[GpGSqj5AaW`f%j+a,.^3A4cJo`]$)E9Ds:.ApX9biAN0j
%Y\M,8[j0aoaZ6hF*br&YT*N3M[I6nXRf*[[Fcb-YI^sTrH*Hm_f]_/(m?;pE>P5h-ojPt,cAUUt%GRY&o3gFp]%L7hID3A(1,@[+
%e[MBCj`*.AKn`p:LS$X]RKrB7q:-#3l.m=Pj)<t)]As?IH!_X7D*>t^$[_uG(1t^e[/8@Ta6SHs4aIsTAPs-_f2m1^@D'kajBhH9
%e`=9>%+X%/Ct9Ntc\H:qjhpJ`[ia>iom$JGSh$Xpe/s'BI^?ZC>$G`:NUDm7^3+LBiGJ=.3?!nON"g!'R8rGL".h92V3a]_iLW&1
%nc.%/TU)E%rQUPZ8)]Z0bMPN8^/(V`20A"lFb6`J=!T$JmOl77fKD)AIhY",D:Z-We`DK$hi8/lSc6#9gftdTe<Wq:DSOeoNKk/4
%L7+#9C@5DXri#_UX(Jh]kS6UZDOi\XI[NluF8KaR9D<A^GteqIrqjj[eg%pX1p:e[76CLQEkH)3ON-n[O9;sRch:sp9_"cuE+1B;
%ouZC#:[Y=?GeQ;Sojui>(liAXEZ:2_4hQhMVfup9K?%kL)1<!W'7P[Ji-MN]IeTsW3WAPGo?!ah?1L):5Vg4D2]jA<]o-Y^l^bKj
%5X.P=]PD\W^*&LsS]rZYpVG)Pa<*(L,u<dI2dSH:MG)@lj5]6t8#';NU=A$3rRI;plEDUV++d"d^"']$IJsR'_p13Y7C\ssesp#:
%>+(Ma\[F4pD>OEM\lu^Q_QS=ZE+a6Ok2H9^qQPEF;#b3`=T:MC$6TDh3bHI4Z47[/BAJXAh;,\%0"#69PC@6nZN-0e!,G3MH$<)o
%SB#EK8@6*7X6oXk^Ua8aoN`9))oC277%g-a?gdNo-G(8(&"e8@UUlN!l*[eiH)2T8hr[HsD6sN"nH^5,6?R)t<"G;7a]Qem`TGYH
%ek3\AqO3K:ZZ_l54\pD$X8CJr4k%MR<<i"]^#/*aYN-HWOf\EQE+@Ulg\TdS%b1#_ddtuFE&2]>gGac2OL1SXNUb_;[/Dgo@)DA.
%[l6::?9C3XH^=g3DaDrCb'=/[Uq]uHAO<0OS&E]VI(MGOF`3Rjpn_/+7s):3S$X6/hkm:&C?IMRG'U(%G$bA5ER=<bm@:K_Be=gQ
%]NC0.MLg%0q%0I8P)&[Kk10G)#[`ZnTC:T>=AnRi0"&.>T+=J$#6!ZQh;N*3H8:mtK>+oTo;qec@D>!o/9VitT$XFFn!d$9qL50o
%bK'!f6$8dMU]&T6@3etRIX'Ch8l"<k>!+e3Nq8-Qpn0Wc]TH`>=E9#^G.^26ps.UIo&4V]7Gr9sF0QPe*#paj&1).U(qk(58QjcK
%n'!B4g`/Kpj90S4I<ot<*`Zu7+jf:"#!!hOq_[N>GfQ@MnE0E,2c9@[n[*<.Z#^RUfZiNS=72F;oB/b*PPskGCPuu1];s,5T3mdD
%)SVYo0At'&Dj/WLE(jm=?rZ%Oqen8?\b0icErXt?k4<6RkPEK+Pu3rmeV=N=IL(/l:'Xb$nZ[<&#</"3:-W/S13iHi_((.1&&,5!
%XgOEj-Ft[(;d)O;SMj>"a32*$&!t2'9g7W'4o*k=G<3X<-_oF'WbD`*bq*rtmG.rDp#+q(^M<4$H2$:RJECITP32e?aGV_KVe]X(
%T,us%a?:$)We7ifY;#.j[)Fgf5(*#T:&XAqLqmEuE0@029U/tT'=Ne<H&t_5Dof-\E_8HAItq"YX4-F=DsP$=_d-jr6i\3cO-dUu
%d,7^VB%!4-o[gQ_ZUWNADCrO=)2V>Tf?1e'h<'@HI!]SqrUZ;#1q/J_\_G='KVghuj1_*-jnc*BO1!E=D`rT-rS5<b@"sm0e#SsK
%/%Qf=>Ao;SRe*T;a>Jm2^""e)3;l,-Vu"-'r7Bm"f#M]$fkda<3j\CbqpWOCC-/roYAE(1h[9\TY@_i9Cl&F(OY<rLG)rHqp4q2`
%qri"<Hg=]A&a4Y2407m/-P(gtcWcGP;?T-MdFXPPD(qsN_8F7jL#[s5cb9(^=PQmBBiN%05M;]nZg)L:23*tae`M1mnM]P7=O*sC
%\(5/_Y=/&M+6J=BpiF0"W?uos;uP8Fh,Q[>PF8:4^n5l*iCp^UVL41[rPE3);VePJBreA>hra3Va#@>-I@^3#?r;;d5.bfB)')\A
%msS>Dhg2jS/A->C:S[0W.Gp6j:?daNefgQuqp`J18b+7,++f2NT.b=*b)c:/=#Xc%>(Er#[$Gk_X6iDQWOCE&8%7O1Wul9#LMt5_
%Z):.Vf=oaYO4mNSnc(aE:G"W;A6RY)iK3K'dU_FDr5$.=eh>k(e,H^5l?DR)l`FUV\`S`;ZShmlA>\3$mWU07RqpP5_sq/N^PhD*
%6ReD;]5#o**$i;_,3$heomZq*Dj1[NeK8s8*ChNWhg68;b%LpN;H.Y22%jT%?Jts4Gt!+DIBtdp/jWbkHUD'Zh(8\jT$^sWDs=;>
%k*agWS(KaWT6-uH_ngF6#I_r?FfSm.b#`TgbKh5Pl`e!MriI;KPVEhP0"C83l,E?"B:!c"mHu.MI[O?m*VW=QZKI'6Ek(gpX&So+
%hf^Za8<b"Rm^[OC;sqbmRJQ]k$`[h'4Oh`s4kVN,2Om_A'3oa!9tS#-V^M@o<j-ujAkE0=F786=$_oSI^?t=joK_:fn:QWECU_pa
%)QN%L?;gU]nCN5=kMpi+d(.B)a0"5l?RjYqd!<91]+`U>Xdi!ED`DF/Oku22\9m"ker8e`Q]&SLFBMi8Rb+pm+,'\&2MQjEGusS7
%Bu)cLZZ8O=/jL:7DqG8@?OltH7"roC8SqNU`4JX>LZ@j?SSi@"R<D0R%h?4(b'pgD;V;q1HgRTrG]9;4X&'DnL1tbNIWg('<e%uP
%XuSW,A,`mYS*p('/klhj8(I!'6e'ba>?NhQRB'/`jO]:=2App`4\oB1ZN8DVUWLZ_,;aN)UpADES_,\9%hH^_PEX.m4k4*)5IJX+
%Xg1-(nspa=:MWX6,">U.E:pbiKKm""r'Plqr8`U4<O2OX>s/DWki=tCG2(&B:qCm4f^Blj#!dj/9P\8X>[ni/j5.igNq:G4b;I])
%?^uVF6l.3q3>s25YOi`5U:0k1e(T%k6Fua>iV7ZZ_Majq^:Ja?`QC!o]VI11mROrR*q$M71st.Lq,\U0S"%=3Y^JnKG#P5:5^DiO
%<C+1$nOfu\RW#)51Rq?kJ!^3SS:O"GH&U2BbF<-XnA<q?;g-pmN401c2ip#iS\GS^l\25$9$4j>[9'7X_m5o\X/t-g,-/"&(HHV`
%1R@EK.B:<$E1tQjpgOZ39>#L5R+@ZT9&uFi-JS#f?l,Kk103Wp7^c.2-/)DjJP4(J]Ht4R@:/J"gV&6r\JL+q];go#"BT:14OGS+
%?,fLH,)A`AStb*GMC7_->sW\4*]Z[<<'mU#,b\d5QJQoYKEGWeap"#9NWo&:68/_cVF>#8qRsGo/?/=(iB[eC?)rK]9[qlNEA7XQ
%o$Y)es)>I.@iFS*l#c\?^/+GL0E&2&Z;2&L0>Wen#OS496(Js.%a-T]bMT1$K.K9[q5Vh:2uSFWT\VEN!Z"H""H,fJY/bmiK9![%
%M7a'+0LT@MBJ/94XjE4PYbh<o-bCT&[HPC#G8OCt-`T/?:CfXf)uDl"1db^;\;N=ZA&()4&sT[tUqC#P<Yd0!Bh?<HHW9ocnd-5H
%']tJRP6LhFYM^@/a*tdmIGpWE`+<O%&GVH7;B+L?o>'U*NI`WB`HPV.oD;Y'j54VsLt0Hmp(U+og9"4rU!%h_65'e\qh<S,?bQpn
%s*@H!qQoU"D9+3<2YeYq?&:l<ra$CKL6Jr.`-qoGMJli4(<%RrM3f!Dh`IUi*tf95nTo.>J!']]?YdEfr%3(RNoPE.R<P1d\8tK;
%r'$LVI]Er*[k@\p>'fWE+/e5Kf8:L\Z:cG=V^A$n59RCVCP2%sSh+^KA(@T%VIt<dW.ZVr]dn%KIH=Y;V`jH'mMrdH-fijae6GR/
%g?gCEU#!Fp_oGqPod[ta?+.lQ<HP8Mmt*L@30M!rmJ*DtLdNY7SnuXd<l^V^9,GT$LY$A3UXO4TLYcakGPbZ8Z_"XApAF#Td(.<!
%kZjTWnY^3eDh$8krcX9;-pGl)hqMe!]lluHf;a7m1MgFPj".od4W%SW]\lDgY>Pd1S,)-AlS7UE"-KXA^j^'>FV0_%Xp6neRd43m
%crUg1i_+>WAlO9ZUMPHOh`^7!<^l1YC,gokP2*t3cTbQt3r\g?=6(+k:J!)Kl$#6QUVFMTmFR54<Al?L5?jDuch-8kcTfB+hi<,o
%'%sNq3D#k)bLRUss"s?,Ic\Dl5PZK&OHe5?q/Wq*B+$&>HqEbu.=0df_\W3O(;s873u+f.>>B!g15Hj^BD_<d5C9gZd3#V.8![5%
%fD><@aK>\ijA_Y:W(r!m6`4P88>[e5i/tEeieeE!6H='qJVu1ae$Ds\@m@+QIf>0p%fWiQRN))eMHIS3<c#A`Hc1r[;?'F%EC,,,
%?M<ANeZHBb(C+1hVTPsJ9-(H(Bn]`m3`MFd"T4EaF2G^;>#:,>0<@uO*T*`,lDd3Wd\BA>D42(UDrc6o/WORci5TI_1!Nm8\XB=2
%$c`J2..%Qo^1I!U'\B)Ml**FYj3ULi:3FUk@jdf*[Tpj`*g%G/?IA\1abTEA+Q7g!MWg<-[GD8DX>!A_mHkmU$9&T=9%kAW6=(ck
%2:(r$@YdJ?#-R.<*t_)4+$`j.U>QP`A;,aQGbG:ujV''T*]FL%iBcW/f*3[]"!4Z+HQkR1eV!B^OU+bDL2-WK+(.t(]$+3qU1jcA
%?)ihY9FClKekGc\OdHG.$tL\e&88?hbHn_sT;IpPe;7FJLZ[D#>a]f.`!DM<plU_uJ2p>&*i,OYi76bq[Ls\:a(fR,"B#X#(38\q
%NjJrZ&E/Wof+ZgDUThV`*noCXRc7-Z"Kc;TOlO'"%9W]hJ5Q1eY9DL)"(k1o9L_A]EKiF!=coi;K12;>k.4M"p!pJk=6>-Mcd,C^
%3+X&l#h)J4rQHC?$lusc;K'$?:UZ#r/8$85XGjXq)RO:J.O>?O7n=5Q`Fb5BM5N19`"(4$*fhmrD8el6EuMb/cqj;(Y_Qbq'%dKq
%4f*huKZQt'dHmPtKF*E5JBMWGO4@KD'hUPRi7L`0C%ZNj@P^5YFmsGtMTEfl106$,<IfLP1`7H.%Q/(EE*/-Va\5NO6jk5IbJ:KH
%[8,dL_,)-Q)J68JUj%"CVkWS_\oj/lU%!CsEKKr"`OCP1`NdiuG0OH5@.5ldOe"*C-a5t8k[h_&9>?do4\sX8*8%nb4XU`9[4'rJ
%*9ie\48:S%;/Fof=O[=HG=8Xq"enkYOWQ*.%po9,Ofj`XKc-&LGVH?s!+QA<BSSkZRqe)1NI9<@<Z",2qN9mZ-l`Qt)D_jkC2'P-
%gC]bq,TQo,$@e(JOdKcO2R!#!G2N\V4Am`PF'FqDpo?u;?ONAPXb*,hI&U&R6E^MXc/Mk66jc8^J=-!d<UNF/^7.76.oAuD"klD-
%@]45aX0*X2(9pMun;Ahh&AdW#I30Y!/@.]i%@j0,#I39ZLGEc.6,c`1dVu!&Q#6%Bc\5'G1c/Z@7/B!@?POm\l+MTgI:Ba(F8$m5
%Kj8Zm)U.RsN]]&)Z-,9?89aBrSf^7f?c`^3c\)opj]S!aFkLRBM<mU(EdV$oY+,%s26^C_LD%u)_l36AWDQb>`JY_BA1!Q%rXl=f
%-::,#"<DUO=:@9RI%,CQYHm\?6B$I07S#Y$TZU^<eM@>a>ZZt#<)SB#QqL0<.e)f#NSk7B86R":k'849<.d^;!Maf?LDu)CZ1PB4
%G?=p86J]#A*H_heO^s/&TH;Qm679]+R)#eC644R#(9X`H>BiJ_$2oDI23#I_VRWpTX%l(3j0IgR?!CP@a+_0f4B]+;Uhk:LquZBh
%6";\V!rPfr-FSWdM0X).&K)brE1j3f1>aCA"'B;ParlB(cB'1pO'PIGBRB5XUDb^9(H%-BRh.n)4T$($#p%kH)B0^l0@3-U+@jZ$
%&r:g$T[i?tZ$OTQLuhVLe_%njBMR3sR04'"Pue>UkYLH:90.Z>,.AmAY7,JIqRK/$CDOB.06mRM$sEd9"Z.VXTG]I*I?JIBdu\t9
%*h6$c]?f8l*;]^-O^2t]+U_q0W]9;W)K&*P$JrZ(YW]M?o'F<elso.`]oA9d[a?n:GpF94948cZeb'#FQ7OkgZ@-*U]tX&aBhD2P
%4gT?!c]7&-1PZTFnc?opbpEdZCZImle4C'(T.p@dc&9Z8<U,Me*!BTbE&'>Vk@L81RWRO/q3oMWEg&'fHROOi#VhQ?">)u[AB$r3
%j:!:AZfmOa_6?<","B]d/=33NpG&dBfm95A;FKIVlYt?e&cuAGn7#Wm^Vqa7M5AAJ&m0UK^`aYM4LS6#n_H(KQdt'"q$;D/!g@7]
%f#oN5A+bjX7Z(k9<A(!`kT`Kp%N#HZP#i!b?UAeWK@#8KOMJ2j#75%OBOpU66\pmAR#`#nWl1D-!CN>`E$I<AGZ`L,O\"O0&Zn?J
%((9P?YgiW-9S9W=5+8=9Yq>5Lq$A=MIc_OAY3IGhJjm'S.nMH)3oO1[KhVW-?^6RX6lJ[?b6]RJWKPcYs%B$sKpY+D%NTa):6XW4
%Ja;X<KK`1fLN#4p,tp3'%TXRH_t>!4*&i[jSe@("@.]u)@=fM`=E*$'cg8+B9/f;_=EH;)S;fkXKoTp=.&%%`*Vqm0+X.*1P9Njh
%!D+hPiC^=\6HD3s@lp8;aK3i5$=jspLe!8[,8QTd-:pQ2WRMU3h<)0j#@9Ed%XnVMH8Za0#adm&AKV?6nJpZ'fsJVaUToIH.>2$u
%1'En5X:pLY9[sob+,e6aa]!dqJNQ@nTXT>+*_HW'4HgV68F+iL6dg6ZMrc-4!<KM-Jdj#$4pO)cO_W%EBc.J=ed`TBa3HUc6^eUe
%_%2_A@4EZVKAPbLYk4j>XH>)kGnf9?\@fm6dAtJ<)N4+o!<YRa^fO6<=kMpVa_MGYfL4%*n"BuBO,2%=6;L9h7+&MtS=I8:WF30h
%@)"AC#0-^am7[(B,TAY./41E1]T08Dk`I*j]H5-TAq)`;Jrl/&\7>_Arm=bt2!JV@*;C`o;Hrce;&u&o[3kOPf[;a>dh:/Q%rSeT
%!RInoCq((i!><%%(EQHW"&4^$K?qNc#?T8>32iDpQ4QhrOjHlX8lq,saq'OZ+q)6hK1V#&)$u>/R"Ua?Ngrg-]Ou6TKr)^b_8!qd
%6t$]D8>+J;"!Qid#%De6^`q[!A0i+`891F7WDtA(!,4SU&[BMV0cNOZ/AA3P(4],=6=9WmLN?X8*$'^)I\9SO+Z)*G%AcT,L_K3=
%`o^o(L-aVWMum3uqNL!3bQpjtB?.8h7%RC6&Z<i??9asrJU0PC#a#1<d-SQW3(3CedLG]Ai]pBTcl0:`8Xi1@[Xd0KG5QG#'t+cF
%eg"VEk#E_5j:#D63eNZu8eN>+&KrUh8lP("OB8@OE%uaq!'-d0=\VfV,8o]b3lmW*KEi1VO;fB5d?]"f(5G:=JDGemUhOs>/iZ3<
%6aq;+P3er9,M:S/F'3KJQ'0ThU)[]bhi?!!`P`N10J.Otd!1;enu6![3hBao?oQ.qjB%SWEnH"fg%sG/k%He,24!V,aNSY4pJ5QC
%,i:rYLM72YR/9,P>#<"@bUJ"aV.RgW+GYrsA>+W6kb7.'Kc36dMlE=cao1f][d4n8Z-LYJ55&&m2I!0maa=Vn@^B^!;8[>6B<gQg
%I%qFU8Xqt'MX[DHU%q=I8?O%Arq/V"N7euGUIZ7JaembXH<ZO!V\qCJBs@#nB.(p;AG]hFR-%e=40ha0iC4lDm7:QIgZE'C2C%kB
%VX0\P*EcrR24QoC/7()"5cb&P3Ue$e(<6Gh.tje)BUhiA3E-nb/-NCp2Y*PV#D5F'jtB2q+cq)H9.iL6+X$\[puq4XT_+B5'`LO0
%LfNlR'^`a;G_(S</79@3Pe].#l%p#/W`a@5CbuIE<Z%7N'Y_3A/*)nJn;K1QYf)[![E7804bj_Hn6fL*<XfAHjfq3BR+MDoG??7R
%Q];J/giqbHLRbsldZERZ;\(G2aIcA:nDEh1Ti#&8)p6;^7;^FmKK<\VEh]k9Si@%MkD!`d6X'*`V:p<"-X9KG=HPlsT9Tk5$s+L)
%McQej\g#ZEo3/6@<K7es6;>m2C%E54YOMrOYE4uO6@uedL5=QWi_;I8<e21nHIkL])fk>A]Z2pi;\=RU>/SC"ou8*>?lQWVW(.+B
%`1=Dh`&"7rZY[O%ZIL53fVV%(JX/pI8)i=`'k;rXMe?S:D:(T?!YNLL^aL2ZW$K,1N`gQ1a=&=>`@cZlAhAJ#KP/eH4sR^!?AYY6
%#i2_-!>jP"+@M#+BLuZ*5]Aii$`hHLX%R;+U%=9p999Q,o2J-*_CmW:;rkm*?HI#<Cq*8llpZZAOqIO?))C<T;%u0U8u0JU%DY2i
%)D#Qj'1FFMUV+GneS9B[=&b2k)RQGTo6T'9eSTR\UX8TN^VhObfT!OLad\kuD)H+pPdatE"4oGIU1"/q2R:8[jt1H,&sm:1]FrC9
%\Iq&m=-\&2Ra\]^?Dq"\S5\&d3k[rK(X,5&Eo`0PhY?1!;d6f&V@>$o\XXgZM]p;IbCVl/)I6NUYHbaAb.A.'Ub[#+o'U@85iYZ/
%+)qj#_fLbclj_SZ$REiHT[f@1APO_qZL[u"A.DI:Lci/i@D:oDegq<)"@AIjdP3A/)K>\J>\@B&aR_]#+n^LZd>,kb]Lnd98I._5
%1rV&@-@)Ws%^\5n&SX.-D&<+uocuM8'3c(+i+tkr,Gj`NZ]9,^A1bZaZK::52?\n.'4K?Q<iLA:9DY.aa"m:L7LDIn3Q[0ZK3_5A
%cmqu[A&XUdj*TC!"VWK=J"Q")1g<0m\FMW$N,2SRWo2#eJcdjO<Y5@P&(6-$-$1D4KkERrV*->!d:,+Y71m7Hj;+$L,rom:+(_,0
%o/U[0WYc=%R"j+gUiTr-*&f2-+H)GSBd'lIAIt@[cFel+gTlNdQ,R(3c0$L&fr&5u`mk1/km$7kKWZ4!>8X&e1(p*>&:tf=Y6k/6
%^tF!;2D:I2$X\2B!JC`h#>dBYU#(]he6uf7Y=\R,aV%78,9>nR"W^Yp:1^#6afg:_m[@[17IVjnpo5OEjN:m:IPKceDBA9D`Nc6<
%O^$s"0<C7c%iL'Y:B!o5A\ifX4>pm*[=dkb#nm]G.8C2&Yp/s(-kI!;1q(3Ps"ape'YBdB6;+b]&fSE+a*#l\-m<i<(!=&EqMRCY
%"&@HHBac5jA]k&V?KjH1isK/hPaG"Hln!bNfPJmh#WkU[+/C86q=W/a/tmXqB(:=Z-qiYiNgsO%N]2c=].SiaU0<8l+L@s>,Q'eh
%C.sP\p*2\1Rq""7:pqH:HN])M'>\nK`/h:]Pf@LZM6[7e@-Lm9TL]`0OclCR!V(,\JI$Ym:"I(U'9og&$E<\]Fb5Q.os&%UED4jC
%"&Ub=;5DN&nZFUOK$Q9iJ&!*f^BK<&f]m],&H]$XM94DX6X(1=5sIH26a#'V1>0AS#heu">3pqu:sUF$)aY'E1Wd$6\[)sqOQFnc
%]L)S+Vs(DnjJX(o&k/<-KR%WmH#Cj7N7;0AqmeTILr[g^N][W\3;pq@!?OBW<^*iY,:B%R/6:MbKr_:8q*Yo@!T)&;\\"T[29H'l
%LIGa!AYcU?"dN(eC1XEKTHHmLBW8!`.cd>L2H@AplWFUW[h31pUs.I*bYc2g'b"<_oG-_&>?TL.&[h4B[V1Tjp:=qaMb:(Dk_cAo
%Y:^24[7'7k2058Eb,Xo^JhOG3AYu289F;O_DjC`bX'jc;U2)P3Y[A`7VGoR[7>mYEasG()YE%@BLk-Ct0Tm(M5tG=h(TYFVU"T^d
%L-1IB"[i9Uj>"#eDLKpl3:8-V.O*On%t-H_`94)'oe2f<8AOaM.R)_Ib2ti/UV]U=!n[Hc./3I:YeJ#!-<rQ]JeRsG/0icO3Ms,M
%>BoW$TFUd$Fh!"K,Z2Y&29HP#ejZ.f#-S+T0Z]&>Z"RQ+Lu_2qJPT/$E6U7Hl+-Ra/c6]po.8`*\H]]WACjd[.qn!9+Pu4u"3rQR
%QBDPIN`aDkM):hDb,ILn9N9u7X\MAhlD=\edmsu/3(Y/n-J2@r1q@"FK-8B6ffXsB`U"="CA0Q@@QE*$d.h%<=cC`YG)&%mb3)Yb
%*;g;r"tC^i_MJQAjrIFYkJLG_K\F(m)U"fu:3Gc+"<JKP%[$+a7dPf^,$oY,!0WNUN6SgHW8mgtmoJp,8n?4e0EocW?c2BoLe`Sf
%/gl7=fB<^/L?lo`Z"-K^1M&dm,8GqL!_FF<T8u&G)BZ*jA<Gdf-WfNbkPGW0^n7g)n%NT`Qo$1HI49hl:'<c7a+RP#3!ZE^\q=jE
%n<lH0crM%tgF]kD>J)DL&9P.;b;;[3nu&$0_=b^i>Hpd,1<oAYlr^fnodE`.Z,c0/Nc-6./j<_R,"4)l.M`;Dk0[6ELdSt8.bQ-<
%?jMU-Z9a^'"Bo3,(F]DP,[\D)r>)Jjcc7ci>=_SBil5a-="Ggu682UI&3O63/r3aI5[[_k2t[Uf=A4Z,_?!Xq82aSTlV@m2k0t9P
%5.R_&9>V@_*]\u6KroGPb[i%^AhAT*[Q_l!#nr>4kp$1%8CB?]HO3,RgXA[<a/A#2Nu@&AJ&N!V?FqB/]HlV_e4[`;8+3_RfoN/C
%1S!+Z_dLD"O-B<h3`A?2$eX2Jq1X161uEJ%CDM]hn]Za%YYlAcX!\_HHZ7*,EXBb:7bU4K9569n4io\R^+%dp/21#h:a??%WE,Fs
%84?G[%>EU^m*Y@f\k(-$o>)#&%rGHqQ#J'*U%,ESKP;'0D5D/ZbK0GEPf?lY@SIiK%A5T%[hO,\]1Hn2,mSJ7\cN\l@Qq3_"aD!4
%][.tCdAK`a'bDsUEMJ0hH^BfeGqL1JZ>.U[.ZQ,)5:t@-GD`&a*#p:!@s'%5CDQ1M"9d(&'Ipc8*c9hnjRD9==H4jum@pFVo]4]X
%$8RM.(9I>Uk:>"_a9`0(A]l@FP:]j"Qc&4]nNRCcdrpgWK#k+4hLr*_\D:]+l;T"-$5R8WVBWFDSc.V?71f%sg)>u,3ij8KdK*8k
%4s!jk_a^&5rkR@BXD1Yf$q1V+<,uQ=Yb3TV$FNk#Q>#HU"ud:1E_U$U!bDlL-DSefPSp*FGq.INJtX]^_LfI#EH9I*(<gZQD(Z[p
%]S/#dD0c(]<0/D01oG'rauHT0A^;p.eoPT@BGZP\,B$V'Fsh3s$HB,SiKQT<m9l?abaVS>d8REbH0\^E`;f\i>'6A:M-&S5gU.=E
%^jD1Id`T'A!E3M(61DW8LLJ8EB$9".4t%J1Ph6#o,`r#a$B-@+!["D%77V<+*k)8=M1PH)D1Ur$I/ip/X''9C?@^cFLnbfA+Qf&L
%c[`tX4#X0cI;sS;+sgDj$$<m^j+V6)P0JThoj#nF[M=$:k3(JJ*-A`bgoGEGH&E3d?L*k_*qe8_N-Gs_Nj3G[$er,10tr>D>qV$B
%U4"S:$>'Ck%5.W);84>W5m#mEiFO,-Z?N$7Td;]/R]%&:Wh69:2KQXX^7iniW8Eu+?sJO6$AatYTnLeTCU,!glHhAV[Qrh_<D>e6
%g<qh6+'jfmDgk7E*uG]YYUeUY^3bPW1t!Nmj",/D^og-f0aXu'p&*;rd]#g80/pT?+Z5.P1h%:";i%Ij6)<S\Nqck;O91qd`46+(
%?mg@\4-e03YQqZ6F=#RZi[qg-!K,6cCXkE1RF#V=o=1!!&q\5A7FV4_[HRVPLX[`4ZHNK\65QO\Yg@3+G-RGP0cj+Bf![I`463'!
%-T?0B+i5R>-o^I3%g?Tp1l7`aOKYg,*eJ<(\gf_?Xr3*2q+@36WAR(<;I_q)q>;\$T_f@*at_AY"TeNV7MOR>V,'Q$#'+ELo-M_o
%p6k4:`uTI<N$Uu&/4G-$">%%:?$2D]dPRPX%AE<o;I"Od[;Xi=iWI6d('q'%;nRY(h?p8-o&P69Y,gf0L[2k1+/kA&bJ?*ja5NgD
%?g9oi0]+$.+e\s<iQABKK9[>^>S#Q,VW7qWD+H##;2*L`"`D0:X;BdBKEi_\c)jN(3cK$JQOKiu%;k1s'i[\p>nMiGQHb'o=`jAf
%Cq^^rTh#[.(1WJ\&JFh#;Vq7'N'ITe,2f[AlG[^]:>"ftRu!LK!I4g/%c8_uWYk&Zd0grE,<ht7A']rai&6QNjt#W/"Mp3Jk7'`8
%0EJM7la?X+_JqGOS:--$_$k-6494i*E#/T2TlLu?+mi]e)"$D\Ose9_^oJ;23_p/f^o.>F!"$<ZB!2r0WEQ`NBit^Y*Y,+122TtY
%YL,ro#sgN#B#,(J.o)e@`0$%=U`K-`k-7NcF:m>3>sj'+m;jCL%$:'XCO0OG'[Z3WHY4Il?["X'f(^fKc>q]%H1re]G=HBJkG'?B
%7&tt<bq"darS,jlN:PS2]\%dY82jgg]]1N&GC48IlhLg[r8;<lNqcr$Q0.i8lS@<]358N7n+cXAp^]]m]EGs@):H5OJm"]0dJXea
%h.63\hFCum_O45.+*$Tf47o5md67dWHk95%2=(XgA/*/=UInK$.*dTfE>nL"[#D@gTKpp"(aHF[/ihf"WA84S3_1%9*'S(&rNX5d
%L'Jj"%_O_RfO``5Sa@E[(iSOO9TW$?j_[aNffo3mN%u)g-421YQ[a!b`s.(r!B]F.kl32RS8B6rJO=+$0%u=33=nokO^5n*E<Re*
%@iIRe1RO`+nbFC=9aLlJ:E$jnk1"V[[M'poLSQUX;'lD#a_f.N&d(mm;pE#Wh.cJSTh5BoR#K5,m^1e@me`m#?k)4:Lp"f,9AhnF
%-kG5"iMO,#_KQV=&)ZV?=nk`kc2s+^M-G&V$n&_bcIF9.G&]@g8Kg2(PLd6%(nTM?/4EL/d!pd7:ahnt6:;n6`fo)+_^G_L-hE3?
%=:O>J8]UmWK&\2>-dRWZi-=h"<>$-EDC1G)aWc8W8Urp+9Q9/Y61Vsm"G5$OnmmlH"&aa4a\p769*OHllf0<=RO="Q"1`)):K[jP
%J`eIT,n&qYlNnGDNT^ZM$_2tDjQ;!bBOH/Wd`)#!%I/dVEr`"54UX's.%/&h!7t0'a9$_BI"'F-p;E%P?IdDo2BV1?I1t?KZjaGl
%#RRQmMGp%#pB4&D?1:"f:^5jA)rp<#"6#H#)2M(^G`%+7,8:<]WA4]@>oAl&Rr!o^o9frRJb+`+P6Lf9&Ef-=+nrQnNV(?"%+6M%
%+qs2S'YtVAO?PgbL7'\5l-kQS<@')70.m<SiiNX9Vh[-?)*jg-$tjeoTMMLV'Bg);cU@U\Le+:/D#Pb`T8lQr!G<dSC%41Gn+\li
%b%fE5TP=Rg'M(7b>=UYe(LUU&265mT^clTG$)KV8l3%>JE1^N>*q,:oR0iY&,>hnoIY*XdRC'6LbnI%+-uGKrKcFm(8nlJlTNTud
%Qpn[+0_h;\;GDUFN=8pMCI`3%-t;l&CW'O8H]=U1inPd,[VGCZYt*:W>Xd-H.>RgmY$qV3e+VQJp*]Sh#Q>$5#5sb_D8Lc<#1AgH
%ZD0#@UPrmjc5(Y33^IWf"r,C2>W(b#+'+1R5bL$@BQ3Y:cl&e(8Q_2:?6b(^ok/\K:E9WpE'ZeM4/X"I',$j%#.7`WnhFYW)Urq9
%d<94I*;'kBGu]jK.5CuGPY&[0fAN7!-%c_cVXa_\]YY)1:`]bhC/R]R<#KuD<R0>AaK-W`aBBnNa=%h/AM9#AKW>jY;,lKi/noT6
%`)*`YU&YhI;!srkaZ4N.KPS2+&Mt1iFeqO#L,-aA%G4LSjD[IP$i%Z@`X)h#!`pBC:FUSQ:_9tcTr:S2n!)hT*AJ3jP_g:Q:f%u`
%/5+(eLb^];+Gr?n+[h`M]AP#j-keBZU+@0"'[_SC^k`=L`=^&h9d!;^LAP[-M)((b[H3J^T(t4&n]Zi4"&>(p#+d6h8J!1mUAW4_
%ZVs+dL]uOZN@5.UaZt_M<TPr(+`lXq.o9(SfH\hCU.iYFMLpL;*u[XK.Q2fGR?0cO"YBg.$Id!KE#CtP>SOo!(0qWN!f:;Y8e,3m
%Bc2Fu<ppoZ;5O?*b_-gEI@e7l'oE;Q$;(>1'L\Sf&i?U:>9,^8@8I:rUEF017[^q:e0kS+XAL<V^d_IVAC*f()F^WL`hWttGb[sM
%]c`"_MJ(7XK?SBHEYL>hE`1+YRkL75.Hi/n&8W;aUJ)&I'Qt2Y8d9L(#q>?l5JdsZ5bi"[pJ/#Y4SC0:1Z5#pM%0)S*^^utP_gad
%./KG;+9eTl5RLs9Js=Ms#(r/PO9Zq?mUf9d5que=nQ`jQ7=^L(,.76PW.@>Dq]De!ZjM]?B%0HeMq!K7B#$sJ9HK1XlZ1M:/A>^"
%O+Z8PjE_[lHm@>J,R#o\8;aG.=I;Ydo_f2X8S[jm3!Le1pc*G1;VV=)WOPDE/h(Pp?,m)8PUUdC74&aY$;HE?!^94f4QjLOD*Fa4
%-ZGk:2?TS9$*</cJ5YO+M,5[\Zbm1pLJ]Pf:-hMBbTWTJ.HR]T\2.Mb0tI3R+H9;,WQ>.*Z:OQ_9p&%6b<V?H!Xb?'PnoTTeogo>
%Gp^JK?Bd`+AK'_9'\Fgm?3[SISpqfc'NR:"`-YAd(Us@iW!2o._[L.Vcj\9!Y/Nd\AN(>.c%%C"o:NiNjW7X"B2k'6erL>ro$F3Q
%%3!lq=<$U)C@G-Cp1D]FR:a7$igD[9_Ct"`cSbetD8,CF+II2e88Dsnd^43IL+0!]m>ES!bAG+`+ruie0kD9q^BQFs6&)%o9UVRN
%YFnS..<&3:;f:=i1G*RLOWF])oAMj<5@0RC7-/(o:3-Jn.Xm&-M2EQ,cHVfFW1[]U;)qQi@\RIte`qN1ZDAlp.\8G`W$(.T;;m)r
%eI2nE$41;M6&gaO$(EIs.TD@`Mi'&s"rNVhS^=\I19)Tp%;8]fR+S@j*<ml_%VF'bR:*n,1''ke^dh*5V$9J%YJa=hW0SK+G/>.^
%n.6hB0\J6S0iFFZl<M/90nI1>'TNqB2"m6Pg<.d\RTiq1/gfY@;Jij2?4&T'gJJ_:Q,fLaXHO?qJSHPo'u#kXjIl#S0kUMc]f67a
%b"5/T$^f'n"+\OAAqVYoV$+dFZjbMcP.9"T=D0c,R>!u90OA_+4N8:1J[b-=a%Q*b*'0=FPogn=;'<)K2=OLlMiZI95ZCja)5Jb#
%)`b]50G#0')RBp^-Ne,(o9'3iA"!^a`rm&=O-;d>Ie,.!]g0ghKrc[1dg#rHA28[66-DNs+kN=%B&hr6?`?]ggI+jIN&N)N+E3$7
%dO86Yk,gi,Afa/O8a$S3.W7+s.=S;Rq_Rb@nWJa$MAaJ8W$Y]oJ4!&>m5-E:ph'kO)pPj"N_C-eer>(B?MrJecd]a-jYD]lI,eF;
%@el/A%.C9*Dor&Y78;3WKr0`1;*/q&VonUcktghK0t4=K7L>`fD1u+\<=h^3gErjKBKg>.CK+<DTmW,"_l>'3B7Qd),-#@6&8)91
%FRq'pn:I6_Xm3esnI9;7?\@#LfW(V7/U38Wl<?8b<So98X($,qK<7b?_Y7p\Ct5$a2MtsHG*Meuk??miIUJQZbH&0O?'n]\7?q&R
%GDjU(YItAShj0ULAfu"?b,e1&aXJ('K&nJL\"WoI=in*d>>8%"DJXA0\R;iRL:p9a'pN&p4dP?ZU7s6<igd`#bF6^+on(mNZOLIM
%UhF6.G,SfMo%#@1n_2.'c'ZJ_h9=X)[b004!A9c'&j(RAV7n&0pKNg40JHUGalK<AX=T=7*"%DmIngak->H4Tk)KbjMGs[^-NfVK
%rd"d7PnS1oAi),UJamG2pLcBurhaEgnl(cR5'_c"#7@>n1[d>o<mH_p5cpPM2N_0gK-:KM$;8UA#TB`YDo%G[@'/%%Z2\r[X]RR\
%V'Q5HQ"aQ@^hGOB"PdH^NF?`6<%`1J9^FC*\=T+<<A'jLg<..&k8DWh*2%q2$+cZEbo?p/'/`6X;G?HgRZoqq*bPd/.<;I*jcNd+
%2AM<XR@"#S@S1%d=>:t[Fp2=j'FPUM`,"-Z+r&G45g3VTJIoBs8f*Mu'TcNjY]@f^?CXNPnl4a)K-H-g1Jh(X-p&h+RM?T3*kR]H
%S3tW<^uJ/<$r!7g.tT=>Seu,SW%YF7)2]5uY^FT!as-b'W5.S22$b<QScI-6+Kciu%-=/`gd"GSMa[m'<WNJdBc49;VJ(KX^=uRg
%99#,-Q&c-#$XmMTZLZ1h\ak;%3OiYbi$U(m\aiuKl'C8<6HD_MaSqW=3n(Ku@^Cs0C-oLha(e+)8flJ^SKCMI_!m97.9KYJ$Fm6d
%%P7eL.L-8SA61t=Rtl1K6Z!]W=)glB"5FWT=[71BX"MRk_7Oa3R)*tM7<LHkGQfg[n-Z^9=G*VhS!%Jur(m9$K(>Akl?#TnT>=3?
%?@=>boBKO8\![ur>Bu`?[RIHXoBO:@33P$A%*Xgk]])1](?`(JO,Yn<rC`m&]Ga_:Ob0khWl$Tg=\u4Hg:($Q(KG`XgZK^dMmajC
%>Y5H%WLYNmZD,Gk>/h3@R5_EgD4QTn\6uM`b^.,#QhUe3R]iY396=iRdh_UrWQrehp9qW$ZN*EE;//csD,,pn.[[E6Pq-%TK#)7R
%?(J=&"k/r"d)o?@g@;hX06%<tnfUgU_o.2H%WW<r<d$Z#7+hNF6-\E,ngVZ,1B:m$a"8LRnhCOd+r5Q=fZ++>[P/@Z-E?ujX(Ra[
%">Q3\J!c>&I#9qF)9YOr(`Ptt`ZfYlbNB3hQ4H4&*M4$'QBT!"fN:='A\76O$f%atXV8i3A:E>5Z?`,Rqob^o20^\3Dfl7YUW:4P
%.A4_%`]A_nlU?*k=A\'X:Pp2$=r'8%hs*e\@sOP(LE;A%jt(m2X?:EK-hss0%F,!qneihh6.Y0$MJ#2qb%>])6^ERLlr8PW1*qPs
%S(pan8''P;M'L1X'1eDqGpHOkTIc<Y/!g[1CiKr7ka$:!^C<#&-Lt;D"nKWc$k*tOE#.74$d0+W8=`S)5=HS+8e+c8Rbe?<"%eR"
%,6]iTEi_k$P*q,R&i7)/@TdBZA5b,PU8RRO.C(L*CDL%g/%U6^l`%5\.=)b.1'h(j`<>0%&\5"XY:J!;)UXHL@2APEZj\i0#[-pV
%gsoh)2PF]1.h??JQj$'n'_]]$(>$L4";,;&;\1N39t;7>J[TOM230<sQHCXDNR,XXYm"l2622>'XC;+VOA/9F?^O$(E^;4$"nA8]
%MA>6g#W[='#FT.4##Gf8R)PS*0-QBMa$a:MMZgeT.42o;E>^XVelFC6+fELXXB?,5d(l(R+cA2cMB-64AeR$Q=L5YOQ3!I4(.!fs
%CTJ7>9Qn[d'NoV!Mo_%e.[D^,$IFHr`KH7c6Yp5W1,/klbL[k2e6+-&.PP7C3Tn3LWGuPskMWj!n1<`3o#S-[At`kB#G&i*AI:e0
%);qj6T5C=K@P]P;5ALO:![_[gDd#\'[mA)$d))Uc*RDZsokf]"V(lY?;T,430anKs>2NB$<tbjCh^X2Mj^^daJsIgDNh8S`(<!OV
%-F83LVKGq1WU5qEegi5i1@84@Ysg6LWiSj8H;X.o;%qW?";r^fYV`0\WRPf#D-PBj((=d%Q53/s%bs].F4#<#)>U![:iI5nZsc75
%QDi=hm@.2*77Eg"pM(3nB,:&mUVsU*R%JtUb#tsCR4F`CK#L^+Ou'1.j'/b8C7D8;b&c^ZbU`HAChjj&CAC!'M,qgB49J[^5:iI1
%n63@o@%c*qq+uUFPuIC=$75Ji478K'!4Kk7pe`!dIq."Kk5]?&R);1r78>$;C!/"cK5#,ViDQ>WCqr1]Me\0?6l+@>06(QBD6LEP
%phPCsD:^7&[3G.\$V&U<WA@)2$,M;#9Sj[#25r!T@SN:InSN7l,R`pq.Ej!NVA-@*9hbD[CJ&oE+("h77dFWu/+fL]a21@c`^nMY
%(R\1Z?,N&1Zrh;d$FA8:Ah3+I@Fk%fCQo7\N1ol^#3`2ME"1<$3:7[:gOt[U>aPW-9e&b#D%1Zad'nraOMSZM_U!hkVNf:-3*H%2
%Uo'sNq;F2'LAYNnE0KPr#[G*nj;;"&E,Tb>\<&%/pnjF`9Zt60RXuqZ^)sl+rj3/,qIE)V5[:2I&96ZQB-D83gu^FJE=:!,s49PV
%E@\\PMMi`p!>_#Y)-gF\81+d8>m8+$r@B]VY/CXbWWA+&=5l$g\D.NgChReC@`KDP)KNnXCFUYnXpq$2*2P@YEA?8r5d&t@d0R:'
%UH%hM&@m2fO8UblOfL4T1e+W1k<O(8J^D_nj9j!oagJBb@D_(@LSBOE@Z^c879h!;A2VcS<\p8!">!V(oWi/@baU_"0&G,E$cD(8
%T!EUO4IL6+3X*`%VpdoT"_:(<1)D1V@-/5[eCO%7Wg(C7#&8$Je:>#A`.P3d0QGQ&%H(J"/;'H#T'1OZWhtGYT\?82"auk>UnD_V
%el):uZqj7:h/-Fj@;tV7,3[b\,3]#aT_gBomf2s)s$b<5(I@dV+R&en>Q-T7.f8iF7$l^G"jA6i(!*$,@)[fH9hQoT>u[$ldPZWN
%fSH^G#`MX)e,(0n9,C@:i1_&r\gWk5dtJCZ_W_h+R/#4.fX[h<]&`7@f8`7c)gdODi)5ZPhR*g:?SL8n,Cp_!ma&^F4t!qWAj."C
%3N`[6MSh&$FZQ3rdJ'"0,n9-C"^`7bKVcbnTS7&^_o%'kI?HZTN)AjArI_<.CQM\\*8gHg,[)g27?Rb;_]7GK_DDAE(0q7f5.I>k
%Dt.W,`<M9=1,]e8\&oO9[K3.]4"@E0kVCc.hk\W7RArCM!lU+MU$J[c,3cTB9ENs-#)C)E6(!\)nW\Zj5q[?[6Jl;tP+4h&Je_?M
%TXr/-oG$Ggn\`^p6cY0r?C/#?!u;R%GPGB\!U')gU#I/A+O%sqF_-1_mN^ZO9UYI547j.">s;S(JES2K_X/0B6e>?0U*4VAi8F1B
%9L7$:X;3>5!4nO/rYW9Pd.J)@6@tkg.q"s;<e[.R$2)iuo1.p7I@gX*(PD6/40Ft7\L_NIU9X>7EQWf3!hRRjla^0f>S_0<<85[q
%#s]8Uf1Wr$AW>?F$(f<Jad%G;2B&0>=FgiMN4J4-`eOScb=a`cJ90+t.#OMt34CS3NKSSa$\3;p%1:Vpi*:BLodi$&cGb#P(30SK
%$a.iegEpklBL*?Q$#hL&RSC;6<b931@ATlEPaClDE-&ROXj.)@]Zd=#[[K72S'+2YP(S8n:am*$1f,k6RDK2';rCoP.p&:mPM?Pk
%j&q\!SLYoH6lG>r*1a;NZs@2),5WFnl9Y]dJ9-.M3JEt2;W&J/\KJhn#X.51_L1$s6BP<Q\N]TV^*kpF"o""QUok^b921'$qW;Pb
%YSuQ;`g4Akbf+03%"F/%l_-h!02d>2fZD0;;0]VTa_6o0bMNFUf<[g$NB"ge_f!?1M*4UVd@=YT6`2E3LU`"#3WA.m:(a9/2=\"D
%9B!7Z$(acs`"J"Q#/.u6Ls62''J(k=(Kf<19!NG_U%+sM?-("!(l;-g%K'oqJHdm1kVtLli*12M'RM,4^aj?\`P,iV^fCPJX/qOt
%iFk!T7!1B_5rCE*;1M@TT*=i4+Am\)nfEa&PNV"oksIE*(5%Cg1*hkhH$YJOSVpc1rm%Vi<IlESF!hkj(.UJ(S^G6?A`6&*9*<Qc
%o?><4XU4P#BsTP=%^s05;P"U?>@;m$oRIVYIO.uffII?#Ur-G1A<)LbJ)CC1*]R?3"1TP41HFST1@SqPj8r*DP)&ABr%SVP'QGZO
%A*AETA#ABXG$UNBpol/B%BdqWpGk[f"c6Yl2<6?4=HW#F5]NiPB%JhiF/o`,LeeEB1-f<cQTL@6(n/Ri+QkKhIFFRm<PAqCTJ_F\
%MnNumTP#J3nhq^^Oq`L,B*B`+DLPPfH2c82To*%_Z9N1kkZ4sjc?m;E65L[(qrnE?0%-;qfROZ&\&peclD#"$TaOKRWgcI?(SJji
%UC@W;,.`.93C1l#m*Hj^EtlZYMe5#9!g/e%!`'6cMt3/QW(UZ`qRgM^gBpq[60MAFN*]lljq8uu>7DI-)rhG265N$-R0Lmse'J,=
%BegAEhOO\@b='ZAct*N'E<s<E0bAG\('Y[3(Rs3-7DO-p8T@E,?-pZ:nMOc.4kk@]5CHRE2FYsr9u0.PJhCYgg^XMh@L-6N6Jg$a
%+`sbK9<"CGkZ2]sJoB0i#[LK+5Ys6ZFC>>Y\bi*TFK;KRq(i$Y6l-P&>+-kNfW26$(Il=)>.iJ(kM-_;`6klAUPnFAI,69&bloY,
%jI=I=i!p21?0hg+r+0UPR7j8^o<)LoE'-=ZDd_cY\;g\Gf+S$lB.,Md'1*M5;<3n##0b'"8NErA;?C3c0,P83(5#CDEe%%Om*8tC
%QZ$T6,^N7p>#Go;m**"\\jCu1K"[cP[R3COX@T+mC)gMU,7Y8AN\7\p,tEbJOD]na&_2THj\mHSOtP5YWiWd)KZts[/tG2H1`HX\
%0&NSC)'BBa$Y/5MZ'PIT1'&`X!7ItV6nck)hc>?t64mCk-,@3tHJ5ju?-<5rA_t@fS"kWS(u;4I;huq1N35u,$&G`hQK=+*'LZ"T
%$2Fd_DO#i-f?$oW4-iId.(XHpL8,-1U<Bu(oRt(0]%dBXmTF<:?05r?aX&T(N)XAq8loBsP#gQnL+]L5C^rK?L+_?oEZDVu`-ZG5
%+Q3F5401\hjgS>E6h26.r('SE8<TKj7N#FL1E&ZJ.goW?"?VjOd.gIOgrBLc@T!:r(W7`[PD0E"(KEI]S0b[o,g/eikd%=2%DZ4g
%G5/G-VSF;E6I1>3'd(P=;@$Q-,Z1=kct,hf[s_-[>p1EX-]klPN_sDJ7jeX;"C7U[(geCd5Ys3k?6f`+1M8.i/p#HPgiYp,'t+E>
%9gW5"1ba$*gQ%nVk^qag!/(aQG@+g9J.3&q^7ZMn&A"6*SdQ"$.nYPW@3lJrHsb+V3u!QFcj[@UXiWlr]_]]1OZtJQ"CC+]p'-n%
%<Tf)n$uQgVca$KBghNdn9*Uc$Q#V=j5:sftV502P_e??!@%um@/[SCm>cn8eUk*RF\h_WoJYn>=S/d;3KlC%Dduh51r4%2pJ<UKt
%q8=@jp(Ubu_aVTA&I;O@RL!&'%Bdm"-W^:t27P9f_V!>q\p.h(YJ>;V)/I2Vf2\6#+@4W@Q3GlIOE77Fl8&GJ>o.-[4ZO=Ui,o('
%CY9$*Y03]q2o0WVecJ$m`n&++!sp(e=VkG.Ti`WDXBX_G1+?1.5%e[,@D\0igD]q$!%2onnk;SZKRj``M[:X]quZ[dLP!HUp#ES0
%,-JuND_D.0ou'd%n8L1OB8NG+[RBVd'cJ^"D`_h<L<HHLoXf[.len4&QpTck5"^W*#n;S=\JROfTlA\@Kc16+b+C,fK*2IH':4h#
%Rm=KH"JmEHJT.#BPFV^4B"&):,hY\JGFSZl1'.)F"5u!9L;j519pD1Q_I]npMIf[:4f[j*22lU:5>Fcn2p![IMMTG4?be_Ag4BkC
%^(nPR0gWN"Q!g1</[iM!(bI$^kVRQ8MG-ECcq'h#":u,fS5t645R&tg*"k@9=&9Nn?BifIpVA7'6K(D%\$-BQKh_\kLqB@j]VU`%
%O`%PC$m%#lG,Tu+N$mP6)<E_VR*W$mPMh9@)sQt%,dH>gi$;^9#q2467SO:r#/P:A00qMfe^?8S[=%b/HjX.E[h/)J#ppHOq0`-)
%_7pG`($(&T[$R[WAI\Tl)e#7X2;iCm4cF2EO<=a.q7%,W&#gBLZN/n+^`?rh8:PCn'4N?5&BKSdRC=/`j3s":6FcRuVauYhG+??+
%iGV",R>DQH4/C)oRh?u/cCm>4'q2r"M,ZNEJuQeD_"JDj]u#qGPUmL.OK?L>igK;F*g0s:!5-/V`"%oWG=Kqtoqn8\IZ#In*/"Xl
%/WRM!WfP06'oDW^=Bh>N7L6238]Eq]E-sV9Q34+ne!aAZ@Ok#Yho\tIj6\2G[p4Y>Nl&MqQi%QpQ8_=<[:E\&<op-OP@39W8o-]/
%/)Z"ABD_qP"Sro*)YeagI9Ugr:+@X<[idZ#,"SDG61_=eYG#kp8?l:;$M80ZGQrt@,+Y/LnnU6g!n(bM[n&_-XOPV++mu3%@=ikG
%!Zj%O9]0-J1E]hrEGoh;h$NHOp(hqMLd1KqT\fO\]]ImC!da0Pn>-_8o4$<"8n-K$jZg:-T68HMWp,1.H0pmGDIj//V]uR1Zp`1$
%'ld8IRqfTqnl\[o0En<HU<KPMbYGu43O4d>)R+gMbM0kABg#1#=YQab2Rd(]$`:O0R2%Pb<[X1^c@U3kkhhnnDTcM7..Vte0/EiE
%2PXqcntr<mTCNc!@-620_e)SNhGiWrBcG(A1q%[.>[jh]^D-HUccL,o'#c3G/P"Pd8SOu)(.%:k/#:r"3=/*pVNGbs!`U0e8@M+q
%33hY78@NQZ3B<jsDE2Ec1l#+F"i_o%et:iUqE*rlLn+SNEXQ<[fo_B`>ib%hJf>91\@0[RJ/[FUb*s&r5;!e^fE'n^H3<39MU++P
%Cag41<SW6$pas=l]j?WoCi%iJ)S/f7rJHGPb=(5#9I*32JRSkILZLWGHnn8@CQ'ufdhFB7-fVcm0Kq4WG]G.L/\?DEJ^Gib\)\rc
%I=p*l,,\nErJ;PS_e_&ocX(-1TcIZNKO'C^<=FeG]Lb:MP/%d;P8('k."kfJ0dB6nnnhA<!jt[Ph$Q9"U"Uhics.X]]5.Y_k4?F#
%OH3@TLbD"NLDo\]iIH2iklh=9AaL(`EY_0]M(r75,Z&=rZHC2tRVMn-O[o_[0,]5qJqAph]N>N0M=!(kWAr\#;?nT_R'!CD$"]F"
%R'tWeG%>AU+o,O_PF$*;p*Z75-cgf>M?RUmTSR'Qm4_3'D;31HkjXHe?UP/2L4V_2GJ$5Xai93pBa\D.Wa,jaSHHiR>i?'oGs5sX
%">VDE_2aAT_T1]sX%]cM5nfOL2heZg-sKO$.*i6*3PDIjD/lX-MIkh8:\4\gNU]>WB$Z`p)\j%7f&]T<JS89,RW2d?3f@cUL@D+V
%[,R+c:.gan'S\W*/2uV.jBu%e%(DKgm['iTm5TVD<,4mQg@?+9gD7LXW3)TZj1P[$C<NMj"$WWKK%fdP1YucrTXNj2n>0.hC5^d;
%>i*1e6#G;*bIKkAC<P"tV:MLtQRKSC[c]KG/Vo_]b.nnEQF@Vm5+?#NU1pMH-B!VLHC)a+YC;TK6_Ue3l\"`.!X,`n^ur!L_pr\X
%7rreW\@1J.Pm#Jmi0/hgQWYX0ZHHE+nSAesaCtYYB++JO5EM)]N+Q9*_a]JrroJ-,6&Ta.US-lZ]!+S0k&kE9l'?&GK(dKjpT+g3
%=!2-(MRK>9jHNiFU@fuS\Ul7](s@M&D/3'T[(LD(3#<$K_8qu<!G*aaW#878B2QbdF`Eh`cDpQG]U71I712t-84r8DM+oIeY+gV#
%>/?r@CpU"af[QG5/QcS-L^U(ABACZmJA4'1,e8!H[r4-a/ap;UN)-HmCh;YD&g*/&C&cN%V\=d,IP>(O(9li`Nrk*b)'!CnQnYtM
%NTA`5X:KpPok`;O=80,o;dffgJ,1GIs52\DoP0O6AU$Gfr.hWCAP&M4H!/"^5scIr(@4o_:hl)b#?;u[s.4Vq\2\;;_p$Uj9U31i
%<>d/?^J(OG@E7L"2lW'HDJVk_fV0RAq$KTr"k^2@&6l"s1\9BN[N?,:3noR&Cd1IfreRh5j-KHWa4QP-cns??81n8G._&!f]Lala
%b]Z<-)d#!IjhS'JTX76<"Nmp%[m!#5po=,C.WJ4=f>?Th*#Q;r9'/\&\lS^@#-P@;)X#[,KR93k[MJ9QR<L0h(.j\;ejcbVJ$(hU
%NEXN,UI0+L-!(cqkd=$;/or*\1n4bb/S-ah7]iL45;_o)Bf^fU;td[6MgoKY?)nTP3D(#7!3rqr4Ed3gC+T5HN5q?N'I,#Bm%M]=
%<lNXmTC/6O`:uel*r*,WDJ++K(Bs3Y3tdL8\ddT%.$G,!.B&e&-A%HdGV'WB'V-+\O-r7%UGKKP\Al''\kcpQm2/VL7m,&6C;Ybj
%Z?2lbEf$aaN&oTfHZa-,\e[%>6Gm>"^knnMZln#p3q0SNf.ba!.[R1Bj`WN,/TYHL29kDAr`<V#5jO(WXH4K\$o8/(5?18q<HY8r
%8Qda9'm1HZF[0=YI3bFt-Y$/[a\d<6",&7Bi#H15XO*ZC1dW:iT'IhNF+j=6L-m?eop(o#4:i'a)(Z&[^eDdAi"Os+)2EkXdK,l#
%E#2WaiY?p<:67ip@g8K&ju=+.#8A1IjkMr&Nfo1e^4^71NgT"c0H,<HPnTubWi_THDPUG=4BN_=TN^\S^U8Vk$]V29o>I^FQ@!:W
%ih?#Yba"$l=c[X7:^0ZT-Ad\bE$7PRFfXIXC:p&tVA=eC+ds?)[1jZdVpr$/n0,LW_:2@,-+t<t9.rUIb`-"Fks`[?m[.1(!j^2C
%*)d7(FoL&K[>5Wc]&esOV$(,^LoFtPRCS'0WTBB)W1o`]RN1^Y%\+",[\(LBnfV>sC:FTkQANOPWC;e>I>DlP1[UWV(C)?<+El;/
%ACNs!*07cXC,aBtN.bAVU-htt!iSOtZ!,f\[7dEFhK79ILC!LIa;>7e[,%GdD`$UX<#;Z`Vj^]c]kI2W$uesg)8IJ@>Hq:oH^f(l
%RTB$f>.N0#Xp/sPX0r^LXm]_kDiFI+lBg2>SH`=6jc)$$2=@Q3=4KHLG`DSpL0unS2qI'0i%,(HZ<<)k>>3ph+k]R:41\PJ`>gZt
%[FjifWo'6DGE5#Pm3/@CTX;r3:)K3bV5<TLafJETJ#/\kk9B+eh*M@7q%)^A8bYK6k6sa^a]Z)p$/[s!lZ,Xs'$GKDdtmWTVh^b(
%0apR1`.Xlh)D0+7FH7-2d68hN/%mp%QK:q;Fsp3-/IZdVbD;qlO>Q4FEO5l/SbjS24m"5DXd\0r8@7`PPrX+b;l-+cSfK[[G;um"
%N$@M<8<N7*6_O:8*0]YP(J1t^P.N:'(/E')83N$m<[J]5;2,!SFshe1q=S(OAH@83Ls)PE&%fL&1V?V8o<i_,7XTrO()h2k*qO#k
%L<nGCC]=8'lTK/m3NSMDDZNE[rn+?*>qnp+)KGDM$c[rXTlFWA7a@G3c-_Z\cn[/\#cAh_M0g#kX]uKgd=hL(Fshe1q=U=<YPbh"
%g:?'0Ik1S7TltT)#+Or]lUT88i2e$9$"Z"p8%:m?im/*\NSRLfH#G\9^0%f8B50I8m*?-YQ0\3g<T=S&&J3.1[5ZsjR]h2DU%[kQ
%a,+hVYlG93rIERb#n9W;iAHT<[T27m+"XP=i3XniYGH-!:.pM1BH$b=r?0i:;QXQcZY#EtH_]&m:F<N,'ussM!G-@VemfnV0@4DN
%lT%UZ4KXBGN)(sX]',6<:Woh&H4Z$2g[SN<W"mF_%>7o2=mJ('C.3Bg[ASsjXN)3t;G-?Q9(o:K)Z)6cC:Rk'db5lZ_X+%@9!-mQ
%jag=Q2QEd]N)GRLG9H8m;bQe*lM?46H2+IF3FsEm_plhQ9`q4-';A[ZfdX?$qJZH,LRm>e[?mF1j\l:UD&4*q(;E3&JamC7QJ4,j
%CAILKC[ndVX/t\`-4/ng/l]W&^QTjTqsSZ&XZr&BPFT%SGF;h+ohWQVf'f![n!MhtR+f=IqgQT8I`Kre%@GjnMX7)Vr(r=[0t$oi
%3N'lr`QX3Aaag@UZa+1][Stb8lD6P.L#X''9$19#Vk)!-EDGn4_`(W'78>G)1gA6<mj=ruN^OYI(oMP*`F#3Bs.?sX\++\s?"r%<
%?kbU+R/WKZZT#00Pba`dThuE1.XR+UkHP)Te8VGY>*6LKUkMQcAYCP9rsF1n.0?SK/1c6^:K"W1lr]@4G2:?3_&oI(%]!9TT*VI!
%>!)2YL'8of@IuH0=^G,.XTkEN)<eU?fJb+8nrYRkH#+)0gTn+"oY"JWdNWNEr6CmofQ<H.QZdW><^[J%DIfk6J"Yto;/3jf?P2G.
%D)lb[4?T;Yb,3/$OW'm/>.d)IF.H$`-Gm5G2D(Ag";bX@TTQKe;`63lJl7WNVT&At!QM"UDp30(HuLFW(nDFJ@P]VZI%\RB41UU@
%Cg(k5?AqR9^=W)L@URoc7DFsXlNe<Ed^#?$l/neiE[2WOK[O>6CldXR>1Ul'm:o<ur6WhhAC=pXVULs?=V@&@8NVEikPDI?!D(D+
%\.ic;dDFkhi(Qre/HQ(AbY"X!-2)=J(9K9/P+u\nAZ^rEOtc0;Bg3ok,'chN=?s5QjY-mSP=k5Em0[T.$nZ!o&e[*2Nt`9CONIdD
%4u-f8+U\`F$[h#\"p1q$UB$t#7KkR1?^s@8!5Ussa8!")e\o6+!%hcO;K9MdU#6KN/i1BgOGqZhTY93MX^M4`d`77GBT%p!#LJbj
%j=5qT'[A4Z(;Fpt)?@.kF(eDQd+0a?8cc;?:O'%5iu>h\VS.LRM0S#dkdrn!<bXtL/J%8TMb/s6TRpao^99**n#4oc8qbM-Yn_WO
%V!JXq'VV&6@5cI`O^Qr3,#h7sUYc.D2@reArSZ:*dOA(#:cW#6<9-(b;^UF#.lhGnW(7i@L76q+IZ`eY:F_^:<@D_#DE1c+mG!9j
%'\"At+5bi)2NW;?MPW4!*lcU5'fX4Z9<D$Bcs+Xo`P[8k'H!qE+B[2DXa&^i.#r;<TDt1CN3>2t^eG3]NArlfc"G[;,s"^8P>ga_
%I7i9\%dcCl!ml9aaat%Y/.$0MWMuHk"7/[YJJE7?1I[CAL"l8_SH)kMMnU/C>@85q(,<++(R=*[^d%drIL@.YOWdpG`nm9b>'@^h
%)&sE=O:bRN!O<P"]Sh[:m*LZ6MtpYurqaF3JLuSE[_u;Zd@Si$kpS:_YZkL<Va#!tST0:K#`l)^6heT\`A<g8bV+d4/Z<!#aLp$D
%Z/q)#TS$_t86Xq=DCboJ9D6&-@kZO/@%+Y^@`pC+4:$,*c0;g:YaE);3$>XL3X9iE.0u20N.oL)jcF:T:>)aY&8[5=1L)JA8#4*>
%PV^Kp^0OP]#L6JWOL9Ur78G$qE#&RQ/4Jc)P0&[Ml*gPLLR8AP8h<Bg_^H5-J=B[7E4Bs,dh/iRoo0SndJ0(C,R)-G)!X*M@B3RC
%_o(%P/:E5i?E30lrLT,\MbRhE"]dBph.=<0>Z_te<T-p09<t2FO\uap]W&,Pr>8la&7Mh@41rK9J?>^`)ogn=#E+RNZ.s?q/%16e
%O%GFumVC?2O?Hc[^Hsq:%N>S4S-Kf\e?Q8+$%@SY.4mhNHsd)n<`HnHnXC3g$=!&!UEH*<iF<c.[NaZs+e"\iA`krUrOAC*'fGb:
%A1[.(p+'+XWI%U+r4;(pd5fgN+(Vs+lt^2oVbpb4cR%5K+!Q+c0OI\k!=ji-?P3.h8Zi`d.ulRA1=UiX'X`sFbm#s6a2DdqSRBr!
%U0YSsGt9i*(R+snRY`R.%gP\0'H$W\o>44$DZma?[b&<?Kq1<-<)a$h]Z*3^V34n(2Bf9.M@>7Xit]>B9@Fj>(%%BPQH12P#A1P^
%'oa2*7T/E]Ej)76,uZ48AhDXfeMrrA+Adq`Z2f*^6sSP0gGO%t/5]X)Pkh\uG-WVCY$,DSi[h`k9&#9UVnkC#2=Vq0es4N5h=[6?
%-b-(o_l[[rO!.dBTIQ+'.2t<Vb)rE+f.)p.F6,6T*?F=cZK]#GRO\NHoh("M;V%#I>8&b#[s59d#0TT@J3]iDb.+R$)0Yq,9L[_k
%Y%Y7<8/=UFZB;XkU`Zpi"bnNHG4,]<m+I8QJe;8X'NcjhJ1HMee*-j6Xp)Z%esu$,5(J0%c#>25MsHH^q;WkDhE'tQESgDc4r>h&
%X3?!OfNO37W>2dD!=q=TS[Af\4ORCd.k5mDWJHDnfMFkPJ`F&fLh_X"]2g@i't8]N0a9-TLK0H8`bDPHVr9,BF'_Z)\!UOaNL(M>
%3W[?[&]qGIi('t(c5E,Q=m=u]4K\-U+TgIoEND_hZ-la<0N99U'tjm2"Cn^r-S'C6(<WXA<@>%P7Cnonk4I;s_qL:+`P>o!8LBbC
%@;X$7<=g[@mAUi=8fM'+`**m+X"?'8e[+FLI_fb9IZZ+DCM1.deWm.Fq(V90(*-]r-+LhdLU>DnE,E1=R1W]g*o'O=\.1]*9ubCF
%\/N0uLJSs[E5cf?!QYSMf@8spE1mhJ/"fZ`apPqLc4#kIS_o<2>R]MIVS`JPkcIDWCB<9aF`Aj[A%1G7%S9$s%Nb4XXtfI&._$56
%Y]@a#`GsmL7ZM=C%;40k(@oYo.fsQn50NOLpSP-gH31''kuu>6><'pKi@ll"*1S;V]:t*l@lm`V(Ma:SNf7!a\RN!\r48s1!!D$8
%XfpDWK](6rf<U=uG-Cd^%0(%OUfId531L^6r<R$fP*[3JXC^HkQ&/htYAh3UOYqY6Yfp0]Lb,XFp&Un1SWT_)KsRWQ!]l)EIaU:*
%=g?pX:7W;'Yr_;LWN'"&o3!#E"/S#E$H!@65iYmR!mc7/VmBD<G%9sABY2GSd(sMa4"IKFHp!533D>+da'RbF4k^K$_%[5T-PKoT
%qWKWJlYt_bQXruo<%;>(?pqH!<Et8pK/XZHqg`g!&)<)<hf+NCV6T"AIfEZ.6HB[Sg-#Ls(%,(h_PB"h`^Jlj87T'S<1pME,C=SP
%CR+0HLU!;j$<1#`/=FRafC;sF]m^9Y=%C"5'H8Z%%'.A:!ehA%B\TcVRTGa5$s'HDS,@%-<YPs-gDYVXg$,4C$".>ZD(4sUPO8uq
%pf2^a/3B_j^7)8c3jo<$71Sg,<bJUBf(2#'-j@;!>q7U.XnS7)H=o?0#7d)"Zr=)%?#?N!&@;qHX3GU+S[o0U,B$=_7<Z_6GGhT%
%;j`-I>/],3FnP#,HTiF]3qoi@g?%bNF2-5"33/Hs'@En<-;AWXb9h)8BYtdC3U>0dj[Q*Eat!\04mVb[eUM'LB'V/jR+V\g2JP-[
%YJKc596Y.X7q4R6e(NU7W2<^E%GL2=!R<`HetJ:rIH;<*MKm_$2lcdFgFq,c2AhWPR;L5[Q!S#_)=?!af-\u@9%,^9a4YX=k4O3W
%B)@0O2&?rX6#r,<f">tq(e>Ct/<SB*+ndGMAQW@Y3>JZY\`'Z@;tD=T.gKrAI!Y:5(cE+(-nGl;=$!g1=:Y<*'b&ucE^]JLnPYLP
%J[07VV8@#,mM:&HE:B#u.^[^*/p_$(_B#4MlfG'EAuN#WKp5aQ<NaV=rOPJc06:%K@(B68)sO<CI'j0LK&A=.O6klSP!KZNl168'
%=-7C>j*V(2U/%p:(mUqe>(?\()qM@,\!8ppMT)SV0TQ&]NI'8L)O_"bI+7,TC+0fcZ,>'KAZ<]o<!X/)d]#kp@F<>d(!T-tmR%2%
%;cD7ej?#Xs2l]0:+?1GD'6OVAZjXLn:f<D*-F>Cc]52q'j\[nkH=-`I(3;GS&@GUuM4p0`gGJt.bJ[p`[`Q*9RkPD^9k]q!6q)3=
%0+pf$#nA]$HlO.Ba#3fr#GbU%%u/9O\jf!IDI;?P4=`Se-KD0`Bc^7d!V`(A*)rl89t.2L[Z#>I)NWs8:-)]+s,;U3jeaaiP&u7B
%4p4_XbP6>=N1"BgojHl]#G=D3l%WnG'h'I0,kS$*%IQ'25oBV9h^'4g'`?F;_6HSUJb[^NcTB(PKA]_K8Ra0E5fQd<aqKY+7L-\G
%&k_XBieiJs1[Z^SqUS]cSoXD*oj-(HaO'!u$.)URK1UMAF72(k3;+.YT#+Ye0/=)7P7K/ISmqM<R_gL_R.UbImM&,_MH#g`$@a=r
%'.&@HQf?4bs4!igGA!24<\<"M32]Jol>Xs]A**Lh+g*SgGK_LQa!nY]_44];<lCLP%\UAMXSt[]eD;I5Q]R]5ZTW4fi4H(sAp#Bu
%K10E)9'o+</_Y3pT6EnN;8eBim`Je9pSdNsMf<;emVL'UI23JRS$CYj/Z/#;mH7q3-\K"agt=6^G5FaS/K/NWJW$7-[-<Ra*L61G
%Y8T:mU>,,F^n$`mmDraQArF%KXMqEWMO#9ahdRX>'.VJ[`Qh5Epr6RRhh%rOk2-bURSLtaGA\l.pA@%1/c@PL_EDHJIam"@H'>lI
%"dLjR/P-khECphf[k0llJUn@b_&8G7\hs<=/CM7$c)TQ#Kp*_\I\;lK"'(4.3h6uL8&lM"U_OWD\rSGjUfGmP,FK7[9iJe0P9R7Y
%.DD&ER]gdorrP1@b9NL]CoJc3V8aa^LLhYYNYHPe9mA3Y,GeI"i^dc3+.DioOBMoa!c_Zs7/W^t,IR@SkE.O6=[jHHHS@t*EMU!5
%T[dbPoQb&bFr?5Q.5FGlE#'lpP?DU.-rS&Fc[eKQ*4Vmh;Tk;G%]Rt]KU8Eu2LZ)RS=+:I5Y*%XZ[oSCUj@n?f+Fh*'.(b:hrB1'
%Vg?g*VchZ&*>L7+k"$j>f2Og'#m-eh3#O3%8<;bMlZaj"+6NVD9`R@o6Mi#l%>cUi*XHNsb_[;t/kASP:81s>&<K-tY,^dBF#Y-D
%TC!:DW)7(T91aM$NGA0-#9XaM`Ao-a"HfI4I-S!@fTM5AUG3L;.0a0YRA!AE;MmR/WJKdIPbFs3D]M7LZhUI><n,>E#*L-?.<k%h
%CQY(XD/tc#[V1%=-.CADH"G!!6aj(XC)"_>H`7V3Hk@V:T9]4\Q$O6.+)@or4rgIGM]5`XBmTRDJM0XIl$7Fl(nA-17Q+]m;d]j1
%(aLYp1\+WtC?Z.%[LA&Vbs3/um#pu[^nQo6UW^KJ&0SFG?r72-)p+hW4G>>DT['5J.tU3:fC!n1hZ$SfELfD"Q[Q@n4)7u1JjDI[
%;A;_;!QmqIKe1aa'Ld4*F5VmA^bHjKU0+)[_\l0*fp]rhU5Tap7MT%""PTEGUI8rTDC:9-E0N207+$bnq'[4[,\7THWr13"m@4F8
%4/SXErO*e(5I+X:9eH'TE)IfH)e^NdE_G(>%B2OCp?2Sh%#h<2KP5.iP\:?MVKHDO6F;gt)A&W3EqLCq\ob^M9p^7*B^)1Q,Ts=i
%X];X^.)/nL/dh5GbH@ji;:\U>b@FPplr<@*L>gF(gmOPK#VD?W0kZE\>HFR%Go+Xa>Lq@"/d?X1i&;![d<_j">ZBm^>o3H$.qsiY
%NLG7CoW'ECD8g<_-;u^)UW$Qa2GLd"B_N:[3#bYMa=J*MZGET4Ia:ij<ZH3,..W(Q'SrDY^I;ke"G6VfHC\.^6\$qe>PZ&ckM>e#
%!W\I1cb%KLiCHHcs/ossQ*EuG^K"t?S("0%8H[!2,W6cs5O1o3k=Yr-@N<N'8@bA+r'dTWYcTd>-8k#M[;=`'`L`=iM#s'G1^k_?
%IZ<CbI;#8*Ynb`M^o:j0k<*#Q,TBC_PfIFW&]a&i"&%?BS3:RN'JZ6QTc64am.smh_4e>X623$qg%3j%m!7bqH@<[7mS.cI5JK>;
%r!LdL$N3-NQ<9UAfftG=elJD-c*Mm<s*W;YSR:Wl^1CE:fUi5dPQ&^f>QeCSdi0$gBue+YREWaAFq]XPp'0^d:XhfX9Aa<'P?`"?
%N=03*X3@0UmUFL(^X@1ObI;&,g>)k4'=B#L`1*]7pSL*J3bq[/AnP75Url*LD!5Wnk'Ef]o0jS6SqU2$H[&^"\=I2\,Es^F'&fAV
%OO>=gR(;Tjrs1IEQO`kScWLaWd1(3CWmdNSk(H:fOG`0g%?cYW.Ch_20imoIb_]UUke$/u%`Q,eR@@)7na#hT)jGDm*&/St)@tV5
%1_;YZ3^@.V!-5q,NML=LEE\aGE1AJS1aof[30=Zil&ieA*C+-dc<LNu'2b:OYO=9('=*o*LpK4fl`M5QjZW8/Wj%a4KsPGf[*,[6
%.am^S_9&13@mG"-;4:7qN50^ER-B>Z!,'t1rQk;/pio\3g@:[+o`BOTH_*.KQ:g))V$[d-5NDYcY;ZD2Rg/*ZH.->Zb:JX"p)-ZT
%mhVjkf_^p;b'm7Z@TU7"#m(=[A]i0f]-pA%J#W#toi^VaHW7Vnr&V$2.VghiB5N*1D16,7rh\NH4)=FLC\)=LD8("s\g5O"1r^m*
%/%`#D).*WP9l^IJYh;fL^1Kt!"$5UF>c2?QV-3GS%Z:T@>P";G$h#732%.:1)GMS^'76LrSjj(<>i*W$`jZB$q#B7Op%9p9l>PEA
%rpH\6qYeJ7rq-$(LJ.-ShgbRodm&6Zpb2[Dl18hCoAe.=s7=^_a.Ie^0^R9'?[mCtnaiZNs5OW^5J@!mc[Y^C88s\unA>dOqn'W=
%m;Mt/IUB`4~>
%AI9_PrivateDataEnd
