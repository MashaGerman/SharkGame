%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Settings.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Daniel
%%CreationDate: 5/22/2017
%%BoundingBox: 0 0 442 510
%%HiResBoundingBox: 0 0 441.3047 509.8389
%%CropBox: 0 0 441.3047 509.8389
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Settings</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2017-05-22T17:28:04+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-05-22T17:28:04+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-05-22T17:28:04+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>224</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADgAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq811f8A&#xA;OYpq97pfl3y9d69Jp8pt7q5R1ggEy7Mgch60O3TMHUdoYsRqRAdhi7PMogk1aDbz9+cN0OVp5RtL&#xA;JT9k3dyZv+TRQ5iS7Zx9AT/my/U3DQYxzkhX1v8APG5J53ei6cD2himkYdukvMfjmBP2lxjpL5D9&#xA;bcNDi8yota/m5c/70edhAu/w29hBt7cvgbMaftMekft/Y2DSYR/D9pUn8q+b5v8Aenzxq5rsfQf0&#xA;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&#xA;O5Pjm2jEAUE5MhnKzzf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:AC7643EA023FE711860BF351378AC283</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:AC7643EA023FE711860BF351378AC283</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4b46ebe4-df9a-4442-8a5a-80da067540e9</stRef:instanceID>
            <stRef:documentID>xmp.did:8DCF4BEDC83EE711B776D525864049CD</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:52793BD7478DE311B8EFE231608A569F</stEvt:instanceID>
                  <stEvt:when>2014-02-04T03:55:44+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9a9d8186-f7e5-2841-93c0-3f761fcf5a16</stEvt:instanceID>
                  <stEvt:when>2014-04-22T12:20:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3C711F08A53DE711A0BF9955A1B623D4</stEvt:instanceID>
                  <stEvt:when>2017-05-20T23:41:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8DCF4BEDC83EE711B776D525864049CD</stEvt:instanceID>
                  <stEvt:when>2017-05-22T11:11:48+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AC7643EA023FE711860BF351378AC283</stEvt:instanceID>
                  <stEvt:when>2017-05-22T17:28:04+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>520.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Weiß</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Schwarz</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Rot</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Gelb</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Grün</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Blau</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Magenta</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=193 G=39 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>193</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=28 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=90 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=238 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=217 G=224 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>217</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=198 B=63</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 G=181 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>57</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=146 B=69</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=104 B=55</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 G=181 B=115</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=169 B=157</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 G=171 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>41</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=113 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=46 G=49 B=146</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=27 G=20 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>27</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=45 B=145</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>145</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=39 B=143</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=158 G=0 B=93</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>93</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=212 G=20 B=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>212</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>90</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=30 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>30</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=178 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=134 B=117</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 G=99 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>99</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 G=71 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>83</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=156 B=109</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>109</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=124 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=98 B=57</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 G=76 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=56 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=66 G=33 B=11</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>11</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=179 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=63 G=169 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>63</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=122 G=201 B=67</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>122</xmpG:red>
                           <xmpG:green>201</xmpG:green>
                           <xmpG:blue>67</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=29 B=37</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=123 B=172</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>123</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=189 G=204 B=212</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>189</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -509.839 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 509.839 li
441.305 509.839 li
441.305 0 li
cp
clp
[1 0 0 1 0 0 ]ct
420.383 44.0078 mo
297.684 36.8804 175.979 36.2676 53.2676 42.1812 cv
56.0137 45.394 62.4629 53.8462 62.4629 53.8462 cv
52.5234 64.6768 li
57.9063 75.7754 li
44.5166 79.4741 li
43.1641 93.3394 li
29.4307 90.7993 li
22.3916 103.447 li
22.3916 103.447 13.9365 96.7798 9.69043 94.4697 cv
9.91309 97.5757 10.1299 100.682 10.3408 103.788 cv
15.8779 205.476 14.917 387.166 7.45996 488.854 cv
6.8877 496.566 12.6631 503.238 20.3916 503.691 cv
153.725 511.391 287.059 511.387 420.391 503.684 cv
428.119 503.23 433.896 496.559 433.322 488.846 cv
424.762 372.18 424.758 175.511 433.314 58.8447 cv
433.887 51.1323 428.109 44.46 420.383 44.0078 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.478431 .164706 .129412 rgb
f
429.619 58.8447 mo
430.035 53.3486 425.896 48.5688 420.391 48.2427 cv
300.268 41.188 180.143 40.5112 60.0195 46.168 cv
68.0596 53.6777 li
56.8945 64.1064 li
62.4395 78.3447 li
47.8447 82.876 li
46.6631 98.1118 li
31.5459 95.8853 li
23.8721 109.098 li
14.0322 102.416 li
19.7979 204.559 18.8428 386.703 11.165 488.846 cv
10.749 494.342 14.8877 499.121 20.3916 499.447 cv
153.725 507.279 287.059 507.279 420.391 499.447 cv
425.895 499.121 430.035 494.342 429.619 488.846 cv
420.85 372.18 420.85 175.511 429.619 58.8447 cv
cp
.929412 .929412 .929412 rgb
f
58.4785 68.1738 mo
62.6104 65.0264 67.0986 62.2861 71.9727 60.0615 cv
103.898 45.4941 143.692 47.0854 178.052 45.7871 cv
217.008 44.3145 256.951 45.0913 295.456 49.6567 cv
324.838 53.1406 354.194 56.686 382.81 64.2891 cv
399.635 68.7603 413.426 77.3413 421.266 92.9404 cv
423.333 97.0537 425.085 101.291 426.585 105.625 cv
427.444 90.0313 428.447 74.438 429.619 58.8447 cv
430.035 53.3486 425.896 48.5688 420.391 48.2427 cv
300.268 41.188 180.143 40.5112 60.0195 46.168 cv
68.0596 53.6777 li
56.8945 64.1064 li
58.4785 68.1738 li
cp
.819608 .819608 .819608 rgb
f
20.3916 499.447 mo
23.9941 499.659 27.5967 499.842 31.1992 500.042 cv
31.7002 493.387 32.0459 486.93 32.3467 480.88 cv
33.7939 451.709 33.8652 422 33.8984 392.802 cv
33.9414 355.156 23.2549 238.642 20.25 201.444 cv
17.9912 173.473 16.6016 147.678 24.8633 120.484 cv
27.376 112.214 30.6953 104.034 34.8965 96.3789 cv
31.5459 95.8853 li
23.8721 109.098 li
14.0322 102.416 li
19.7979 204.559 18.8428 386.703 11.165 488.846 cv
10.749 494.342 14.8877 499.121 20.3916 499.447 cv
cp
f
424.99 408.538 mo
420.778 429.649 415.345 450.477 409.204 471.277 cv
406.302 481.108 403.274 490.854 400.176 500.561 cv
406.914 500.205 413.652 499.843 420.391 499.447 cv
425.895 499.121 430.035 494.342 429.619 488.846 cv
427.606 462.076 426.079 435.308 424.99 408.538 cv
cp
f
25.7197 113.099 mo
25.7197 113.107 25.7139 113.117 25.6963 113.123 cv
23.3467 112.411 21.1318 111.174 18.7539 110.458 cv
21.1826 112.511 23.8232 114.31 26.6211 115.818 cv
28.4189 112.266 29.8398 108.501 30.7539 104.625 cv
28.7881 107.257 27.0986 110.089 25.7119 113.075 cv
25.7178 113.082 25.7188 113.088 25.7197 113.099 cv
cp
1 1 1 rgb
f
50.3906 100.921 mo
49.9727 100.656 43.0605 101.23 41.7539 101.458 cv
45.1865 102.458 48.7549 103.006 52.3301 103.084 cv
52.3037 100.262 51.9414 97.4473 51.2539 94.7085 cv
50.8047 96.7607 50.7998 98.8867 50.3906 100.921 cv
cp
f
66.8584 81.4126 mo
66.5381 82.291 60.2988 83.3916 59.5869 83.625 cv
62.8438 83.6128 66.1006 83.3491 69.3154 82.8374 cv
67.6689 77.5435 65.543 72.3823 62.8369 67.5415 cv
63.6016 71.708 64.1504 78.0415 66.8584 81.4126 cv
cp
f
76.5771 54.8999 mo
74.1924 52.9248 71.5625 51.2642 68.7539 49.9585 cv
69.2354 50.5776 73.1973 54.1094 73.124 54.6587 cv
73.123 54.666 73.1201 54.6709 73.1172 54.6748 cv
73.1104 54.6807 73.1016 54.6836 73.0928 54.6831 cv
73.0986 54.6865 73.1025 54.6914 73.1025 54.6978 cv
71.1162 56.0073 69.2646 57.521 67.5869 59.2085 cv
70.7607 58.1758 73.7842 56.7275 76.5771 54.8999 cv
cp
f
62.1396 494.027 mo
66.8115 488.584 69.4434 486.596 68.6709 480.875 cv
67.4209 471.625 57.3516 478.709 52.0137 469.877 cv
46.9912 461.566 60.3828 460.531 62.7695 455.533 cv
65.4658 449.885 56.6006 441.658 51.1348 443.51 cv
51.0537 443.703 51.0439 443.9 51.1055 444.104 cv
49.7529 445.471 50.0195 448.379 47.9375 449.41 cv
46.5928 450.074 44.3418 449.348 43.0869 448.875 cv
38.9805 447.33 38.3545 444.244 39.7539 440.377 cv
43.7969 429.215 62.8975 429.5 52.1777 415.305 cv
48.3525 410.236 43.3291 407.697 37.0186 408.109 cv
30.0439 408.564 24.8184 411.527 24.7529 418.6 cv
24.7021 424.164 26.7158 432.717 20.167 435.148 cv
18.3896 435.809 16.21 435.868 14.292 435.501 cv
13.3633 453.278 12.501 471.068 11.165 488.846 cv
10.749 494.342 14.8877 499.121 20.3916 499.447 cv
34.5459 500.279 48.7002 501.002 62.8545 501.658 cv
60.6348 499.217 59.875 496.666 62.1396 494.027 cv
cp
1 .717647 .388235 rgb
f
424.584 380.126 mo
422.148 377.981 418.916 376.34 414.746 375.775 cv
409.582 375.076 406.127 375.736 404.17 378.875 cv
402.313 381.857 401.418 387.342 407.436 390.193 cv
414.541 393.559 413.682 399.682 408.41 405.068 cv
405.547 407.996 399.854 406.941 395.988 407.543 cv
392.975 408.01 389.295 409.002 387.023 411.033 cv
382.174 415.371 380.441 422.855 386.07 427.135 cv
388.48 428.967 393.879 429.346 396.299 428.457 cv
399.99 427.1 406.924 420.564 412.021 427.809 cv
413.801 430.336 414.699 432.883 414.42 436.117 cv
413.752 443.881 406.604 444.66 400.422 447.199 cv
393.646 449.982 391.59 460.193 395.846 466.125 cv
400.371 472.426 408.584 467.662 413.496 471.436 cv
418.029 474.918 415.75 478.445 412.996 482.215 cv
408.367 488.555 416.59 491.262 422.045 493.547 cv
423.854 494.305 425.773 494.934 427.748 495.42 cv
429.084 493.59 429.805 491.289 429.619 488.846 cv
426.889 452.533 425.615 416.437 424.584 380.126 cv
cp
f
385.637 437.334 mo
385.219 439.582 386.984 441.795 389.582 442.277 cv
392.178 442.76 394.621 441.328 395.039 439.082 cv
395.455 436.836 393.689 434.623 391.094 434.141 cv
388.496 433.658 386.053 435.088 385.637 437.334 cv
cp
f
400.482 360.391 mo
399.645 364.908 402.236 369.178 406.275 369.93 cv
410.314 370.68 414.27 367.625 415.109 363.109 cv
415.947 358.594 413.355 354.322 409.314 353.572 cv
405.277 352.822 401.322 355.875 400.482 360.391 cv
cp
f
377.25 134.284 mo
371.156 122.161 360.438 115.491 347.361 112.017 cv
325.122 106.107 302.306 103.352 279.471 100.645 cv
249.545 97.0962 218.501 96.4927 188.225 97.6367 cv
161.521 98.646 130.593 97.4092 105.78 108.731 cv
86.6563 117.458 75.0674 136.267 69.167 155.691 cv
62.7461 176.826 63.8252 196.874 65.5811 218.613 cv
67.917 247.523 76.2227 355.902 76.1895 385.16 cv
76.1631 407.853 76.1074 430.942 74.9824 453.614 cv
74.2549 468.272 73.1992 485.988 69.1357 501.957 cv
162.646 506.111 256.155 506.404 349.664 502.854 cv
356.003 484.036 362.226 465.291 367.876 446.151 cv
374.839 422.561 380.637 398.928 384.014 374.628 cv
386.327 357.974 385.222 260.023 385.385 243.23 cv
385.726 207.985 393.4 166.42 377.25 134.284 cv
cp
.94902 .94902 .94902 rgb
f
25.3506 393.701 mo
24.7236 397.08 27.042 400.346 30.5342 400.994 cv
34.0244 401.643 37.3623 399.43 37.9912 396.051 cv
38.6182 392.672 36.2988 389.404 32.8076 388.756 cv
29.3174 388.107 25.9785 390.322 25.3506 393.701 cv
cp
1 .717647 .388235 rgb
f
82.3867 45.1504 mo
83.5254 53.9902 84.6748 62.8584 85.8291 71.6914 cv
86.4756 76.6528 90.7373 80.3945 95.7422 80.3945 cv
95.8486 80.394 li
96.2422 80.3896 96.6406 80.3618 97.0303 80.311 cv
137.458 75.0942 178.597 72.2314 219.302 71.8027 cv
222.913 71.7646 226.53 71.7456 230.147 71.7456 cv
268.629 71.7456 307.472 73.9067 345.595 78.1689 cv
345.964 78.2104 346.337 78.2314 346.705 78.2314 cv
346.818 78.231 li
351.843 78.1782 356.074 74.376 356.661 69.3857 cv
357.598 61.4014 358.55 53.3447 359.51 45.271 cv
267.136 41.4746 174.761 41.4321 82.3867 45.1504 cv
cp
.819608 .819608 .819608 rgb
f
346.263 69.2065 mo
263.56 59.959 179.624 60.6021 96.2627 71.3608 cv
94.0713 71.644 92.0645 70.105 91.7783 67.9146 cv
89.5869 51.1421 87.4248 34.3647 85.29 17.5835 cv
85.0127 15.3926 86.5615 13.3794 88.7529 13.0962 cv
176.911 1.72119 265.7 1.05371 353.206 10.8721 cv
355.401 11.1182 356.964 13.1025 356.699 15.2964 cv
354.671 32.0898 352.672 48.8872 350.702 65.6865 cv
350.444 67.8809 348.458 69.4517 346.263 69.2065 cv
cp
1 .823529 .25098 rgb
f
350.702 65.6865 mo
351.542 58.519 352.409 51.354 353.261 44.1875 cv
335.459 41.8462 318.008 34.9878 300.079 33.9292 cv
281.286 32.8188 262.236 38.126 243.382 37.8638 cv
224.561 37.6021 205.665 31.7651 186.815 32.3516 cv
168.004 32.937 149.508 39.9351 130.7 41.3687 cv
116.696 42.436 102.368 40.416 88.2148 40.269 cv
89.4014 49.4844 90.5752 58.7017 91.7783 67.9146 cv
92.0645 70.105 94.0713 71.644 96.2627 71.3608 cv
179.624 60.6021 263.56 59.959 346.263 69.2065 cv
348.458 69.4517 350.444 67.8809 350.702 65.6865 cv
cp
.956863 .729412 .168627 rgb
f
218.579 .0610352 mo
218.621 4.06055 li
218.575 .0610352 li
175.172 .52002 131.322 3.5708 88.2402 9.12939 cv
83.8701 9.69434 80.7666 13.7129 81.3232 18.0879 cv
83.4482 34.8076 85.6318 51.7451 87.8125 68.4331 cv
88.335 72.4438 91.7813 75.4365 95.8271 75.394 cv
96.1416 75.3906 96.4619 75.3682 96.7744 75.3276 cv
137.276 70.1011 178.493 67.2324 219.28 66.8027 cv
261.415 66.3579 303.989 68.5049 345.817 73.1816 cv
346.144 73.2183 346.474 73.2349 346.798 73.231 cv
350.819 73.189 354.205 70.146 354.675 66.1528 cv
356.636 49.4292 358.653 32.4805 360.671 15.7754 cv
360.927 13.646 360.338 11.5474 359.009 9.86816 cv
357.681 8.19092 355.778 7.13623 353.652 6.89648 cv
308.997 1.88623 263.552 -.413086 218.579 .0610352 cv
218.579 .0610352 li
cp
218.613 4.06006 mo
263.645 3.58594 308.588 5.86523 353.206 10.8721 cv
355.401 11.1182 356.964 13.1025 356.699 15.2964 cv
354.671 32.0898 352.672 48.8872 350.702 65.6865 cv
350.464 67.7144 348.749 69.2104 346.756 69.2314 cv
346.593 69.2329 346.429 69.2251 346.263 69.2065 cv
304.163 64.4995 261.737 62.355 219.237 62.8022 cv
178.247 63.2354 137.19 66.0791 96.2627 71.3608 cv
96.1025 71.3813 95.9424 71.3931 95.7852 71.394 cv
93.7861 71.4155 92.043 69.9453 91.7783 67.9146 cv
89.5869 51.1421 87.4248 34.3647 85.29 17.5835 cv
85.0127 15.3926 86.5615 13.3794 88.7529 13.0962 cv
131.961 7.521 175.328 4.51807 218.613 4.06006 cv
218.613 4.06006 li
cp
.478431 .164706 .129412 rgb
f
348.75 33.209 mo
348.244 33.209 349.737 19.1812 349.573 16.2607 cv
345.792 15.6982 319.43 11.6514 319.417 11.709 cv
319.448 10.856 347.401 13.7925 351.592 14.8389 cv
350.776 20.981 349.831 27.1084 348.75 33.209 cv
348.75 33.209 li
cp
1 1 1 rgb
f
113.917 15.0005 mo
106.597 16.5894 99.0947 17.7065 91.6162 18.0269 cv
91.7451 21.3818 91.835 24.7617 91.792 28.1255 cv
90.9326 24.2729 90.2168 20.3896 89.7178 16.4741 cv
97.7334 15.3901 105.825 14.832 113.917 15.0005 cv
113.917 15.0005 li
cp
f
255.438 8.97949 mo
229.938 9.42627 204.438 9.81494 178.938 10.1465 cv
184.784 5.07959 210.019 7.76123 217.157 7.6499 cv
229.964 7.41602 247.167 6.18799 255.438 8.97949 cv
255.438 8.97949 255.448 8.97949 255.438 8.97949 cv
cp
f
215.159 13.731 mo
215.158 13.731 li
209.671 13.7324 204.096 13.8169 198.588 13.9829 cv
198.138 13.9961 197.702 14.0693 197.289 14.1943 cv
196.924 14.1094 196.544 14.0645 196.155 14.0645 cv
196.097 14.0645 196.038 14.0654 195.979 14.0674 cv
190.487 14.2588 184.917 14.5352 179.422 14.8901 cv
178.979 14.9189 178.552 15.0049 178.147 15.1406 cv
177.838 15.0811 177.521 15.0503 177.202 15.0503 cv
177.087 15.0503 176.973 15.0542 176.856 15.062 cv
172.628 15.355 168.335 15.7021 164.098 16.0933 cv
163.132 16.1826 162.256 16.541 161.537 17.0869 cv
159.402 16.2803 157.303 16.2017 156.579 16.2017 cv
156.276 16.2017 155.98 16.2129 155.7 16.2349 cv
149.381 16.6807 144.531 20.209 142.76 25.6738 cv
141.821 28.4844 141.846 33.4116 143.741 37.0684 cv
144.393 38.3262 145.177 39.2993 146.019 40.062 cv
145.63 40.8315 145.438 41.7061 145.491 42.6099 cv
145.607 44.5811 145.725 46.5522 145.844 48.5229 cv
145.952 50.3003 146.996 51.8862 148.587 52.687 cv
151.277 54.041 154.614 54.1875 155.923 54.1875 cv
156.631 54.1875 157.324 54.1504 157.983 54.0776 cv
160.466 53.8008 162.632 53.0439 164.379 51.8696 cv
165.168 52.3579 166.079 52.6182 167.011 52.6182 cv
167.164 52.6182 167.317 52.6113 167.472 52.5972 cv
171.413 52.2324 175.423 51.9082 179.39 51.6328 cv
180.843 51.5322 182.107 50.8203 182.95 49.7656 cv
183.854 50.646 185.084 51.186 186.423 51.186 cv
186.514 51.186 186.605 51.1836 186.697 51.1787 cv
188.718 51.0674 190.727 50.9683 192.666 50.8838 cv
193.99 50.8262 195.238 50.2446 196.135 49.2671 cv
197.03 48.2891 197.501 46.9956 197.443 45.6704 cv
196.719 29.0742 li
196.812 29.0713 196.903 29.0684 196.995 29.0649 cv
197.271 29.0557 197.541 29.0239 197.808 28.9707 cv
198.025 29 198.246 29.0146 198.469 29.0146 cv
198.521 29.0146 198.571 29.0137 198.623 29.0122 cv
198.804 29.0068 198.983 29.0015 199.163 28.9961 cv
199.506 45.605 li
199.563 48.3306 201.79 50.5015 204.503 50.5015 cv
204.538 50.5015 204.573 50.501 204.608 50.5005 cv
206.616 50.459 208.626 50.4292 210.581 50.4116 cv
211.907 50.3994 213.175 49.8613 214.104 48.915 cv
214.155 48.8618 214.206 48.8076 214.256 48.7524 cv
214.306 48.8076 214.356 48.8613 214.409 48.9141 cv
215.342 49.8564 216.611 50.3896 217.938 50.396 cv
219.891 50.4053 221.888 50.4268 223.873 50.4595 cv
223.901 50.46 223.929 50.46 223.957 50.46 cv
224.454 50.46 224.935 50.3872 225.389 50.2515 cv
225.862 50.4131 226.369 50.5059 226.896 50.5176 cv
228.79 50.5601 230.685 50.6128 232.577 50.6748 cv
232.634 50.6768 232.689 50.6777 232.745 50.6777 cv
233.755 50.6777 234.699 50.3765 235.489 49.8564 cv
236.289 50.4761 237.275 50.8516 238.329 50.8979 cv
239.882 50.9668 241.434 51.042 242.987 51.125 cv
243.076 51.1294 243.165 51.1318 243.253 51.1318 cv
244.484 51.1318 245.676 50.6772 246.596 49.8501 cv
246.749 49.7129 246.892 49.5669 247.025 49.4136 cv
249.448 51.3374 252.097 52.0317 253.807 52.2793 cv
254.801 52.4243 255.773 52.498 256.695 52.498 cv
259.951 52.498 262.35 51.5791 264.049 50.4897 cv
264.126 50.5625 264.206 50.6328 264.289 50.7012 cv
266.812 52.7773 270.638 53.8452 273.147 54.1279 cv
273.799 54.2007 274.439 54.2373 275.059 54.2373 cv
278.834 54.2373 281.959 52.9165 284.097 50.4185 cv
285.86 48.3613 286.967 45.3037 287.053 42.2437 cv
287.054 42.2251 287.054 42.2065 287.054 42.188 cv
287.116 38.5059 286.02 35.9785 284.464 34.1318 cv
285.196 33.4829 285.741 32.6172 285.994 31.6196 cv
286.561 29.3911 287.13 27.1646 287.703 24.9375 cv
288.141 23.2412 287.657 21.4395 286.431 20.189 cv
284.506 18.2261 281.44 17.0283 279.258 16.7124 cv
278.352 16.5737 277.415 16.5005 276.514 16.5005 cv
273.575 16.5005 270.889 17.2876 268.665 18.7461 cv
268.485 18.5308 268.286 18.3286 268.068 18.1431 cv
264.938 15.4751 260.929 14.8979 259.351 14.7739 cv
258.768 14.7275 258.19 14.7046 257.636 14.7046 cv
257.636 14.7046 li
254.369 14.7046 251.502 15.5181 249.067 17.1313 cv
248.266 15.6528 246.737 14.6138 244.935 14.5181 cv
242.937 14.4116 240.936 14.3159 238.936 14.231 cv
238.864 14.228 238.794 14.2266 238.724 14.2266 cv
237.72 14.2266 236.742 14.5288 235.918 15.0879 cv
235.093 14.4346 234.065 14.0444 232.971 14.0098 cv
231.217 13.9546 229.463 13.9072 227.71 13.8687 cv
227.672 13.8677 227.634 13.8672 227.597 13.8672 cv
227.071 13.8672 226.563 13.9487 226.087 14.0996 cv
225.583 13.918 225.041 13.8149 224.476 13.8057 cv
222.365 13.771 220.227 13.748 218.119 13.7378 cv
218.111 13.7378 218.103 13.7378 218.095 13.7378 cv
217.588 13.7378 217.099 13.8135 216.638 13.9536 cv
216.169 13.8086 215.673 13.731 215.159 13.731 cv
215.159 13.731 li
cp
276.514 21.5005 mo
277.154 21.5005 277.83 21.5518 278.541 21.6606 cv
279.769 21.8384 281.788 22.5957 282.861 23.6899 cv
282.286 25.9224 281.716 28.1548 281.148 30.3887 cv
280.408 28.2661 279.064 27.5156 277.812 27.335 cv
277.621 27.313 277.437 27.3022 277.257 27.3022 cv
275.387 27.3022 274.123 28.4658 273.788 30.2803 cv
273.432 32.1611 274.276 33.2085 275.962 34.1362 cv
279.515 36.0508 282.136 37.3096 282.055 42.1035 cv
282.001 44.0186 281.299 45.9995 280.297 47.168 cv
278.957 48.7339 276.982 49.2373 275.059 49.2373 cv
274.603 49.2373 274.149 49.209 273.708 49.1597 cv
271.479 48.9082 268.84 47.9712 267.467 46.8408 cv
267.784 44.8945 268.104 42.9482 268.424 41.0024 cv
269.392 43.0952 271.779 44.6167 273.629 44.6167 cv
274.675 44.6167 275.548 44.1304 275.897 42.9868 cv
276.283 41.5923 275.896 40.0693 274.727 39.0527 cv
272.411 37.0938 268.837 36.9487 267.843 33.1333 cv
267.15 30.4873 267.972 27.0664 268.845 25.6421 cv
270.262 23.2368 272.798 21.5005 276.514 21.5005 cv
276.514 21.5005 li
cp
156.579 21.2021 mo
157.835 21.2021 159.621 21.5181 160.75 22.248 cv
160.682 24.5518 160.617 26.8555 160.556 29.1592 cv
159.469 27.4165 158.143 26.9019 156.96 26.9019 cv
156.849 26.9019 156.738 26.9067 156.63 26.915 cv
154.455 27.1504 153.275 28.6543 153.355 30.6743 cv
153.422 32.5874 154.475 33.4233 156.323 33.957 cv
160.211 35.042 163.042 35.6929 164.02 40.3872 cv
164.389 42.2666 164.141 44.354 163.421 45.7139 cv
162.23 47.9683 159.738 48.8511 157.435 49.1079 cv
156.951 49.1611 156.441 49.1875 155.923 49.1875 cv
154.055 49.1875 152.08 48.8472 150.835 48.2207 cv
150.716 46.2524 150.599 44.2837 150.482 42.3154 cv
151.673 43.8623 153.765 44.7866 155.474 44.7866 cv
156.925 44.7866 158.1 44.1206 158.212 42.604 cv
158.28 41.1592 157.566 39.7588 156.201 39.0254 cv
153.513 37.624 149.993 38.2695 148.181 34.7671 cv
146.922 32.3389 146.97 28.8213 147.509 27.2393 cv
148.51 24.1226 151.212 21.564 156.092 21.2197 cv
156.242 21.208 156.405 21.2021 156.579 21.2021 cv
156.579 21.2021 li
cp
177.202 20.0503 mo
177.317 21.7207 177.433 23.3911 177.549 25.0615 cv
175.408 25.21 173.268 25.3711 171.129 25.5444 cv
171.286 27.4814 171.442 29.4189 171.601 31.356 cv
173.616 31.1924 175.633 31.04 177.649 30.8994 cv
177.761 32.4844 177.871 34.0698 177.981 35.6548 cv
175.982 35.7944 173.983 35.9453 171.985 36.1074 cv
172.143 38.0444 172.3 39.9819 172.457 41.9189 cv
174.532 41.7505 176.608 41.5942 178.685 41.4507 cv
178.804 43.1821 178.925 44.9136 179.044 46.645 cv
175.03 46.9233 171.019 47.2476 167.011 47.6182 cv
166.193 38.7695 165.375 29.9209 164.558 21.0723 cv
168.77 20.6831 172.984 20.3423 177.202 20.0503 cv
177.202 20.0503 li
cp
257.636 19.7046 mo
258.063 19.7046 258.504 19.7227 258.958 19.7583 cv
260.732 19.8979 263.133 20.5059 264.825 21.9482 cv
264.266 24.1436 263.71 26.3398 263.159 28.5371 cv
262.604 27.0161 261.445 25.7363 259.74 25.4131 cv
259.343 25.3408 258.967 25.3066 258.611 25.3066 cv
255.059 25.3066 253.533 28.7188 252.838 31.8418 cv
252.498 33.4023 251.503 42.0693 255.704 42.4927 cv
255.848 42.5103 255.985 42.5186 256.118 42.5186 cv
259.099 42.5186 259.579 38.2881 259.482 35.9883 cv
258.62 35.917 257.758 35.8481 256.896 35.7808 cv
257.018 34.2085 257.14 32.6367 257.262 31.0645 cv
260.022 31.2788 262.781 31.5146 265.539 31.7715 cv
265.535 36.7808 265.238 42.458 262.369 45.4746 cv
261.056 46.75 259.205 47.498 256.695 47.498 cv
256.02 47.498 255.297 47.4438 254.523 47.3311 cv
247.395 46.2979 245.964 39.4624 246.333 32.8979 cv
246.531 29.457 247.528 25.9492 249.576 23.3579 cv
251.648 20.8457 254.241 19.7046 257.636 19.7046 cv
257.636 19.7046 li
cp
196.153 19.0645 mo
196.38 20.7319 196.604 22.3999 196.826 24.0679 cv
195.052 24.1279 193.278 24.1963 191.505 24.2739 cv
191.819 31.479 192.134 38.6836 192.448 45.8887 cv
190.439 45.9761 188.431 46.0757 186.423 46.186 cv
186.025 38.9854 185.628 31.7847 185.231 24.584 cv
183.369 24.6865 181.508 24.7988 179.647 24.9204 cv
179.678 23.2402 179.71 21.5601 179.744 19.8799 cv
185.21 19.5269 190.681 19.2549 196.153 19.0645 cv
196.153 19.0645 li
cp
227.599 18.8672 mo
229.337 18.9058 231.075 18.9526 232.813 19.0073 cv
234.646 23.4312 236.431 27.8643 238.169 32.3057 cv
238.354 27.9458 238.539 23.5859 238.724 19.2266 cv
240.706 19.3105 242.688 19.4053 244.669 19.5107 cv
244.197 28.3843 243.725 37.2583 243.253 46.1318 cv
241.685 46.0483 240.118 45.9722 238.55 45.9028 cv
236.807 41.4697 235.015 37.0459 233.175 32.6309 cv
233.031 36.98 232.887 41.3291 232.742 45.6777 cv
230.831 45.6147 228.919 45.5615 227.007 45.519 cv
227.204 36.6353 227.401 27.751 227.599 18.8672 cv
227.599 18.8672 li
cp
218.095 18.7378 mo
220.194 18.748 222.293 18.7705 224.393 18.8052 cv
224.246 27.6899 224.101 36.5752 223.955 45.46 cv
221.957 45.4272 219.96 45.4058 217.962 45.396 cv
218.006 36.5098 218.051 27.6235 218.095 18.7378 cv
218.095 18.7378 li
cp
215.159 18.731 mo
215.328 20.4053 215.495 22.0796 215.66 23.7544 cv
215.557 23.7544 215.453 23.7544 215.35 23.7544 cv
213.679 23.7544 212.008 23.7617 210.338 23.7769 cv
210.403 30.9883 210.47 38.2002 210.536 45.4116 cv
208.525 45.4297 206.515 45.46 204.505 45.5015 cv
204.355 38.291 204.207 31.0806 204.059 23.8706 cv
202.195 23.9092 200.332 23.957 198.469 24.0146 cv
198.558 22.3364 198.647 20.6587 198.738 18.9805 cv
204.211 18.8159 209.685 18.7324 215.159 18.731 cv
215.159 18.731 li
cp
.94902 .6 .0784314 rgb
f
268.424 42.0024 mo
269.939 45.2783 274.931 47.1538 275.897 43.9868 cv
276.283 42.5923 275.896 41.0693 274.727 40.0527 cv
272.411 38.0938 268.837 37.9487 267.843 34.1333 cv
267.15 31.4873 267.972 28.0664 268.845 26.6421 cv
270.506 23.8223 273.705 21.9214 278.541 22.6606 cv
279.769 22.8384 281.788 23.5957 282.861 24.6899 cv
282.286 26.9224 281.716 29.1548 281.148 31.3887 cv
280.408 29.2661 279.064 28.5156 277.812 28.335 cv
275.638 28.085 274.155 29.292 273.788 31.2803 cv
273.432 33.1611 274.276 34.2085 275.962 35.1362 cv
279.515 37.0508 282.136 38.3096 282.055 43.1035 cv
282.001 45.0186 281.299 46.9995 280.297 48.168 cv
278.64 50.105 276.01 50.416 273.708 50.1597 cv
271.479 49.9082 268.84 48.9712 267.467 47.8408 cv
267.784 45.8945 268.104 43.9482 268.424 42.0024 cv
cp
263.159 29.5371 mo
262.604 28.0161 261.445 26.7363 259.74 26.4131 cv
255.372 25.6206 253.603 29.4063 252.838 32.8418 cv
252.498 34.4023 251.503 43.0693 255.704 43.4927 cv
259.055 43.9004 259.584 39.3906 259.482 36.9883 cv
258.62 36.917 257.758 36.8481 256.896 36.7808 cv
257.018 35.2085 257.14 33.6367 257.262 32.0645 cv
260.022 32.2788 262.781 32.5146 265.539 32.7715 cv
265.535 37.7808 265.238 43.458 262.369 46.4746 cv
260.702 48.0933 258.17 48.8623 254.523 48.3311 cv
247.395 47.2979 245.964 40.4624 246.333 33.8979 cv
246.531 30.457 247.528 26.9492 249.576 24.3579 cv
251.909 21.5293 254.903 20.4385 258.958 20.7583 cv
260.732 20.8979 263.133 21.5059 264.825 22.9482 cv
264.266 25.1436 263.71 27.3398 263.159 29.5371 cv
cp
227.007 46.519 mo
227.204 37.6353 227.401 28.751 227.599 19.8672 cv
229.337 19.9058 231.075 19.9526 232.813 20.0073 cv
234.646 24.4312 236.431 28.8643 238.169 33.3057 cv
238.354 28.9458 238.539 24.5859 238.724 20.2266 cv
240.706 20.3105 242.688 20.4053 244.669 20.5107 cv
244.197 29.3843 243.725 38.2583 243.253 47.1318 cv
241.685 47.0483 240.118 46.9722 238.55 46.9028 cv
236.807 42.4697 235.015 38.0459 233.175 33.6309 cv
233.031 37.98 232.887 42.3291 232.742 46.6777 cv
230.831 46.6147 228.919 46.5615 227.007 46.519 cv
cp
218.095 19.7378 mo
220.194 19.748 222.293 19.7705 224.393 19.8052 cv
224.246 28.6899 224.101 37.5752 223.955 46.46 cv
221.957 46.4272 219.96 46.4058 217.962 46.396 cv
218.006 37.5098 218.051 28.6235 218.095 19.7378 cv
cp
198.469 25.0146 mo
198.558 23.3364 198.647 21.6587 198.738 19.9805 cv
204.211 19.8159 209.685 19.7324 215.159 19.731 cv
215.328 21.4053 215.495 23.0796 215.66 24.7544 cv
213.886 24.7534 212.111 24.7607 210.338 24.7769 cv
210.403 31.9883 210.47 39.2002 210.536 46.4116 cv
208.525 46.4297 206.515 46.46 204.505 46.5015 cv
204.355 39.291 204.207 32.0806 204.059 24.8706 cv
202.195 24.9092 200.332 24.957 198.469 25.0146 cv
cp
179.647 25.9204 mo
179.678 24.2402 179.71 22.5601 179.744 20.8799 cv
185.21 20.5269 190.681 20.2549 196.153 20.0645 cv
196.38 21.7319 196.604 23.3999 196.826 25.0679 cv
195.052 25.1279 193.278 25.1963 191.505 25.2739 cv
191.819 32.479 192.134 39.6836 192.448 46.8887 cv
190.439 46.9761 188.431 47.0757 186.423 47.186 cv
186.025 39.9854 185.628 32.7847 185.231 25.584 cv
183.369 25.6865 181.508 25.7988 179.647 25.9204 cv
cp
167.011 48.6182 mo
166.193 39.7695 165.375 30.9209 164.558 22.0723 cv
168.77 21.6831 172.984 21.3423 177.202 21.0503 cv
177.317 22.7207 177.433 24.3911 177.549 26.0615 cv
175.408 26.21 173.268 26.3711 171.129 26.5444 cv
171.286 28.4814 171.442 30.4189 171.601 32.356 cv
173.616 32.1924 175.633 32.04 177.649 31.8994 cv
177.761 33.4844 177.871 35.0698 177.981 36.6548 cv
175.982 36.7944 173.983 36.9453 171.985 37.1074 cv
172.143 39.0444 172.3 40.9819 172.457 42.9189 cv
174.532 42.7505 176.608 42.5942 178.685 42.4507 cv
178.804 44.1821 178.925 45.9136 179.044 47.645 cv
175.03 47.9233 171.019 48.2476 167.011 48.6182 cv
cp
150.482 43.3154 mo
152.684 46.1763 157.967 46.9063 158.212 43.604 cv
158.28 42.1592 157.566 40.7588 156.201 40.0254 cv
153.513 38.624 149.993 39.2695 148.181 35.7671 cv
146.922 33.3389 146.97 29.8213 147.509 28.2393 cv
148.51 25.1226 151.212 22.564 156.092 22.2197 cv
157.329 22.1226 159.465 22.417 160.75 23.248 cv
160.682 25.5518 160.617 27.8555 160.556 30.1592 cv
159.366 28.252 157.891 27.8159 156.63 27.915 cv
154.455 28.1504 153.275 29.6543 153.355 31.6743 cv
153.422 33.5874 154.475 34.4233 156.323 34.957 cv
160.211 36.042 163.042 36.6929 164.02 41.3872 cv
164.389 43.2666 164.141 45.354 163.421 46.7139 cv
162.23 48.9683 159.738 49.8511 157.435 50.1079 cv
155.206 50.354 152.425 50.021 150.835 49.2207 cv
150.716 47.2524 150.599 45.2837 150.482 43.3154 cv
cp
.478431 .164706 .129412 rgb
f
223.463 43.9521 mo
221.797 43.9263 220.131 43.9087 218.465 43.8989 cv
218.592 18.2402 li
220.356 18.2505 222.12 18.2695 223.885 18.2969 cv
223.463 43.9521 li
cp
204.559 22.8604 mo
204.556 22.7275 204.5 22.6016 204.404 22.5098 cv
204.312 22.4204 204.188 22.3706 204.059 22.3706 cv
204.055 22.3706 204.052 22.3706 204.048 22.3706 cv
202.364 22.4058 200.681 22.4478 198.997 22.4985 cv
199.213 18.4668 li
204.365 18.3159 209.572 18.2368 214.707 18.2314 cv
214.842 19.5723 214.976 20.9131 215.108 22.2544 cv
213.517 22.2549 211.925 22.2622 210.333 22.2769 cv
210.058 22.2793 209.835 22.5054 209.838 22.7813 cv
210.031 43.9165 li
208.353 43.9331 206.673 43.9585 204.994 43.9917 cv
204.559 22.8604 li
cp
242.78 44.6064 mo
241.485 44.5386 240.191 44.4756 238.896 44.418 cv
237.202 40.1157 235.434 35.751 233.637 31.4385 cv
233.558 31.2495 233.374 31.1309 233.175 31.1309 cv
233.146 31.1309 233.115 31.1333 233.085 31.1392 cv
232.854 31.1812 232.683 31.3794 232.675 31.6143 cv
232.259 44.1616 li
230.679 44.1113 229.099 44.0674 227.518 44.0308 cv
228.088 18.3784 li
229.55 18.4121 231.013 18.4517 232.475 18.4971 cv
234.253 22.7949 236.011 27.1641 237.703 31.4878 cv
237.779 31.6821 237.966 31.8057 238.169 31.8057 cv
238.196 31.8057 238.224 31.8032 238.251 31.7988 cv
238.484 31.7598 238.658 31.563 238.669 31.3271 cv
239.202 18.7476 li
240.85 18.8188 242.497 18.8975 244.144 18.9839 cv
242.78 44.6064 li
cp
185.73 23.5566 mo
185.716 23.29 185.495 23.084 185.231 23.084 cv
185.223 23.084 185.213 23.0845 185.204 23.085 cv
183.521 23.1772 181.839 23.2778 180.157 23.3862 cv
180.182 22.0405 180.208 20.6948 180.234 19.3496 cv
185.375 19.022 190.58 18.7632 195.719 18.5801 cv
195.899 19.9155 196.079 21.2515 196.258 22.5869 cv
194.666 22.6426 193.074 22.7046 191.483 22.7744 cv
191.207 22.7866 190.993 23.02 191.005 23.2959 cv
191.927 44.4111 li
190.249 44.4858 188.571 44.5688 186.895 44.6597 cv
185.73 23.5566 li
cp
256.695 45.998 mo
256.038 45.998 255.332 45.9434 254.596 45.8364 cv
248.971 45.021 246.359 40.3408 246.832 31.9258 cv
247.044 28.2471 248.158 24.959 249.969 22.668 cv
251.915 20.3076 254.354 19.2046 257.636 19.2046 cv
258.051 19.2046 258.479 19.2222 258.919 19.2568 cv
259.7 19.3184 262.32 19.6328 264.262 21.1348 cv
263.84 22.7905 263.42 24.4473 263.004 26.1045 cv
262.247 24.9429 261.14 24.1694 259.833 23.9219 cv
259.411 23.8452 259.001 23.8066 258.611 23.8066 cv
256.458 23.8066 253.624 25.0083 252.35 30.7334 cv
252.065 32.0396 251.344 37.8955 253.31 40.6045 cv
253.907 41.4272 254.696 41.8936 255.654 41.9902 cv
255.808 42.0088 255.966 42.0186 256.118 42.0186 cv
257.013 42.0186 257.777 41.6938 258.392 41.0537 cv
260.033 39.3408 260.024 35.9619 259.982 34.9673 cv
259.972 34.7153 259.774 34.5107 259.523 34.4897 cv
258.826 34.4321 258.13 34.3765 257.433 34.3213 cv
257.722 30.6021 li
260.161 30.7935 262.6 31.002 265.038 31.2271 cv
265.012 36.3594 264.588 41.416 262.007 44.1299 cv
260.734 45.3647 258.943 45.998 256.695 45.998 cv
cp
165.102 20.5244 mo
168.969 20.1709 172.878 19.8545 176.738 19.584 cv
177.016 23.5977 li
175.039 23.7363 173.063 23.8862 171.089 24.0459 cv
170.956 24.0566 170.834 24.1196 170.748 24.2207 cv
170.662 24.3218 170.62 24.4526 170.631 24.585 cv
171.103 30.3965 li
171.124 30.6582 171.343 30.856 171.6 30.856 cv
171.613 30.856 171.627 30.8555 171.641 30.8545 cv
173.488 30.7046 175.337 30.564 177.186 30.4331 cv
177.448 34.1909 li
175.613 34.3208 173.778 34.4604 171.945 34.6089 cv
171.813 34.6196 171.69 34.6826 171.604 34.7837 cv
171.519 34.8848 171.477 35.0156 171.487 35.1479 cv
171.959 40.9595 li
171.97 41.0918 172.032 41.2139 172.133 41.2998 cv
172.224 41.377 172.339 41.4189 172.457 41.4189 cv
172.471 41.4189 172.484 41.4185 172.497 41.4175 cv
174.404 41.2627 176.313 41.1182 178.221 40.9844 cv
178.511 45.1812 li
174.832 45.4395 171.12 45.7397 167.463 46.0747 cv
165.102 20.5244 li
cp
155.924 47.6875 mo
154.18 47.6875 152.451 47.3867 151.316 46.894 cv
151.062 42.6182 li
152.297 43.6353 153.96 44.2866 155.474 44.2866 cv
157.349 44.2866 158.59 43.2729 158.711 41.6411 cv
158.792 39.9307 157.921 38.3813 156.438 37.585 cv
155.491 37.0913 154.467 36.8408 153.477 36.5981 cv
151.553 36.127 149.734 35.6816 148.625 33.5371 cv
147.431 31.2329 147.486 27.855 147.982 26.4004 cv
149.065 23.0273 151.957 21.0127 156.127 20.7183 cv
156.269 20.7075 156.419 20.7021 156.579 20.7021 cv
157.688 20.7021 159.204 20.9585 160.241 21.5269 cv
160.19 23.271 160.141 25.0146 160.093 26.7583 cv
159.01 25.665 157.837 25.4019 156.96 25.4019 cv
156.835 25.4019 156.712 25.4072 156.591 25.4165 cv
154.224 25.6724 152.763 27.3511 152.855 29.6943 cv
152.941 32.1704 154.587 32.9761 156.185 33.4375 cv
156.535 33.5352 li
160.214 34.5576 162.644 35.2334 163.53 39.4893 cv
163.873 41.2368 163.657 43.1982 162.979 44.48 cv
161.816 46.6816 159.292 47.3979 157.379 47.6108 cv
156.92 47.6616 156.43 47.6875 155.924 47.6875 cv
cp
275.059 47.7373 mo
274.642 47.7373 274.206 47.7119 273.764 47.6626 cv
271.675 47.4272 269.318 46.5874 268.009 45.6284 cv
268.7 41.4077 li
269.922 42.9951 271.882 44.1167 273.629 44.1167 cv
274.989 44.1167 275.991 43.3936 276.376 42.1328 cv
276.832 40.4824 276.325 38.7793 275.055 37.6753 cv
274.239 36.9854 273.296 36.5156 272.384 36.061 cv
270.61 35.1777 268.936 34.3433 268.326 32.0073 cv
267.67 29.4966 268.468 26.2134 269.271 24.9033 cv
270.756 22.3838 273.326 21.0005 276.514 21.0005 cv
277.138 21.0005 277.795 21.0522 278.466 21.1548 cv
279.462 21.2993 281.241 21.9116 282.304 22.8501 cv
281.869 24.5396 281.437 26.229 281.006 27.9189 cv
280.104 26.4736 278.861 25.981 277.883 25.8398 cv
277.659 25.814 277.454 25.8022 277.257 25.8022 cv
275.2 25.8022 273.683 27.1001 273.297 29.1895 cv
272.835 31.623 274.263 32.772 275.721 33.5742 cv
276.044 33.748 li
279.406 35.5557 281.628 36.75 281.555 41.0952 cv
281.505 42.875 280.862 44.7407 279.917 45.8423 cv
278.842 47.0996 277.207 47.7373 275.059 47.7373 cv
cp
level3{
gsave
clp
[-1.28974e-6 -29.5059 29.5059 -1.28974e-6 214.977 47.7373 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.937255 .933333 .933333 ]
/C1 [.937255 .933333 .933333 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.937255 .933333 .933333 ]
/C1 [1 1 1 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [1 1 1 ]
/N 1 
>>
]
/Bounds [.497006 .51497 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.28974e-6 -29.5059 29.5059 -1.28974e-6 214.977 47.7373 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
nb)\Ts8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
nFZMQs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
nFZMQs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
276.514 20.5005 mo
272.798 20.5005 270.262 22.2368 268.845 24.6421 cv
267.972 26.0664 267.15 29.4873 267.843 32.1333 cv
268.837 35.9487 272.411 36.0938 274.727 38.0527 cv
275.896 39.0693 276.283 40.5923 275.897 41.9868 cv
275.548 43.1304 274.675 43.6167 273.629 43.6167 cv
271.779 43.6167 269.392 42.0952 268.424 40.0024 cv
268.104 41.9482 267.784 43.8945 267.467 45.8408 cv
268.84 46.9712 271.479 47.9082 273.708 48.1597 cv
274.149 48.209 274.603 48.2373 275.059 48.2373 cv
276.982 48.2373 278.957 47.7339 280.297 46.168 cv
281.299 44.9995 282.001 43.0186 282.055 41.1035 cv
282.136 36.3096 279.515 35.0508 275.962 33.1362 cv
274.276 32.2085 273.432 31.1611 273.788 29.2803 cv
274.123 27.4658 275.387 26.3022 277.257 26.3022 cv
277.437 26.3022 277.621 26.313 277.812 26.335 cv
279.064 26.5156 280.408 27.2661 281.148 29.3887 cv
281.716 27.1548 282.286 24.9224 282.861 22.6899 cv
281.788 21.5957 279.769 20.8384 278.541 20.6606 cv
277.83 20.5518 277.154 20.5005 276.514 20.5005 cv
276.514 20.5005 li
cp
156.579 20.2021 mo
156.405 20.2021 156.242 20.208 156.092 20.2197 cv
151.212 20.564 148.51 23.1226 147.509 26.2393 cv
146.97 27.8213 146.922 31.3389 148.181 33.7671 cv
149.993 37.2695 153.513 36.624 156.201 38.0254 cv
157.566 38.7588 158.28 40.1592 158.212 41.604 cv
158.1 43.1206 156.925 43.7866 155.474 43.7866 cv
153.765 43.7866 151.673 42.8623 150.482 41.3154 cv
150.599 43.2837 150.716 45.2524 150.835 47.2207 cv
152.08 47.8472 154.055 48.1875 155.923 48.1875 cv
156.441 48.1875 156.951 48.1611 157.435 48.1079 cv
159.738 47.8511 162.23 46.9683 163.421 44.7139 cv
164.141 43.354 164.389 41.2666 164.02 39.3872 cv
163.042 34.6929 160.211 34.042 156.323 32.957 cv
154.475 32.4233 153.422 31.5874 153.355 29.6743 cv
153.275 27.6543 154.455 26.1504 156.63 25.915 cv
156.738 25.9067 156.849 25.9019 156.96 25.9019 cv
158.143 25.9019 159.469 26.4165 160.556 28.1592 cv
160.617 25.8555 160.682 23.5518 160.75 21.248 cv
159.621 20.5176 157.835 20.2021 156.579 20.2021 cv
156.579 20.2021 li
cp
177.202 19.0503 mo
172.984 19.3423 168.77 19.6831 164.558 20.0723 cv
165.375 28.9209 166.193 37.7695 167.011 46.6182 cv
171.019 46.2476 175.03 45.9233 179.044 45.645 cv
178.925 43.9136 178.804 42.1821 178.685 40.4507 cv
176.608 40.5942 174.532 40.7505 172.457 40.9189 cv
172.3 38.9819 172.143 37.0444 171.985 35.1074 cv
173.983 34.9453 175.982 34.7944 177.981 34.6548 cv
177.871 33.0698 177.761 31.4844 177.649 29.8994 cv
175.633 30.04 173.616 30.1924 171.601 30.356 cv
171.442 28.4189 171.286 26.4814 171.129 24.5444 cv
173.268 24.3711 175.408 24.21 177.549 24.0615 cv
177.433 22.3911 177.317 20.7207 177.202 19.0503 cv
177.202 19.0503 li
cp
257.636 18.7046 mo
254.241 18.7046 251.648 19.8457 249.576 22.3579 cv
247.528 24.9492 246.531 28.457 246.333 31.8979 cv
245.964 38.4624 247.395 45.2979 254.523 46.3311 cv
255.297 46.4438 256.02 46.498 256.695 46.498 cv
259.205 46.498 261.056 45.75 262.369 44.4746 cv
265.238 41.458 265.535 35.7808 265.539 30.7715 cv
262.781 30.5146 260.022 30.2788 257.262 30.0645 cv
257.14 31.6367 257.018 33.2085 256.896 34.7808 cv
257.758 34.8481 258.62 34.917 259.482 34.9883 cv
259.579 37.2881 259.099 41.5186 256.118 41.5186 cv
255.985 41.5186 255.848 41.5103 255.704 41.4927 cv
251.503 41.0693 252.498 32.4023 252.838 30.8418 cv
253.533 27.7188 255.059 24.3066 258.611 24.3066 cv
258.967 24.3066 259.343 24.3408 259.74 24.4131 cv
261.445 24.7363 262.604 26.0161 263.159 27.5371 cv
263.71 25.3398 264.266 23.1436 264.825 20.9482 cv
263.133 19.5059 260.732 18.8979 258.958 18.7583 cv
258.504 18.7227 258.063 18.7046 257.636 18.7046 cv
257.636 18.7046 li
cp
196.153 18.0645 mo
190.681 18.2549 185.21 18.5269 179.744 18.8799 cv
179.71 20.5601 179.678 22.2402 179.647 23.9204 cv
181.508 23.7988 183.369 23.6865 185.231 23.584 cv
185.628 30.7847 186.025 37.9854 186.423 45.186 cv
188.431 45.0757 190.439 44.9761 192.448 44.8887 cv
192.134 37.6836 191.819 30.479 191.505 23.2739 cv
193.278 23.1963 195.052 23.1279 196.826 23.0679 cv
196.604 21.3999 196.38 19.7319 196.153 18.0645 cv
196.153 18.0645 li
cp
227.599 17.8672 mo
227.401 26.751 227.204 35.6353 227.007 44.519 cv
228.919 44.5615 230.831 44.6147 232.742 44.6777 cv
232.887 40.3291 233.031 35.98 233.175 31.6309 cv
235.015 36.0459 236.807 40.4697 238.55 44.9028 cv
240.118 44.9722 241.685 45.0483 243.253 45.1318 cv
243.725 36.2583 244.197 27.3843 244.669 18.5107 cv
242.688 18.4053 240.706 18.3105 238.724 18.2266 cv
238.539 22.5859 238.354 26.9458 238.169 31.3057 cv
236.431 26.8643 234.646 22.4312 232.813 18.0073 cv
231.075 17.9526 229.337 17.9058 227.599 17.8672 cv
227.599 17.8672 li
cp
218.095 17.7378 mo
218.051 26.6235 218.006 35.5098 217.962 44.396 cv
219.96 44.4058 221.957 44.4272 223.955 44.46 cv
224.101 35.5752 224.246 26.6899 224.393 17.8052 cv
222.293 17.7705 220.194 17.748 218.095 17.7378 cv
218.095 17.7378 li
cp
215.159 17.731 mo
209.685 17.7324 204.211 17.8159 198.738 17.9805 cv
198.647 19.6587 198.558 21.3364 198.469 23.0146 cv
200.332 22.957 202.195 22.9092 204.059 22.8706 cv
204.207 30.0806 204.355 37.291 204.505 44.5015 cv
206.515 44.46 208.525 44.4297 210.536 44.4116 cv
210.47 37.2002 210.403 29.9883 210.338 22.7769 cv
212.009 22.7617 213.681 22.7544 215.353 22.7544 cv
215.455 22.7544 215.558 22.7544 215.66 22.7544 cv
215.495 21.0796 215.328 19.4053 215.159 17.731 cv
215.159 17.731 li
cp
276.514 21.5005 mo
277.112 21.5005 277.744 21.5503 278.397 21.6504 cv
279.382 21.793 280.818 22.3384 281.739 23.0356 cv
281.417 24.2891 281.097 25.5425 280.776 26.7964 cv
279.877 25.8418 278.813 25.4692 277.926 25.3413 cv
277.7 25.3154 277.475 25.3022 277.257 25.3022 cv
274.943 25.3022 273.237 26.7568 272.806 29.0942 cv
272.281 31.8604 273.959 33.1753 275.487 34.0166 cv
275.807 34.1885 li
279.122 35.9707 281.123 37.0464 281.055 41.0757 cv
281.009 42.7275 280.399 44.5127 279.537 45.5181 cv
278.562 46.6587 277.054 47.2373 275.059 47.2373 cv
274.66 47.2373 274.243 47.2129 273.82 47.166 cv
271.966 46.957 269.827 46.2266 268.553 45.396 cv
268.709 44.436 268.866 43.4756 269.024 42.5156 cv
270.32 43.7808 272.053 44.6167 273.629 44.6167 cv
275.225 44.6167 276.4 43.7646 276.861 42.2534 cv
277.366 40.4282 276.8 38.5293 275.372 37.2891 cv
274.517 36.5649 273.546 36.0815 272.606 35.6138 cv
270.865 34.7466 269.362 33.9971 268.811 31.8804 cv
268.212 29.5928 268.924 26.4272 269.706 25.1499 cv
270.687 23.4849 272.664 21.5005 276.514 21.5005 cv
276.514 21.5005 li
cp
156.579 21.2021 mo
157.5 21.2021 158.788 21.4009 159.732 21.8311 cv
159.694 23.126 159.657 24.4204 159.622 25.7153 cv
158.674 25.0762 157.719 24.9019 156.96 24.9019 cv
156.822 24.9019 156.687 24.9077 156.522 24.9209 cv
153.888 25.2061 152.252 27.0874 152.356 29.709 cv
152.454 32.5234 154.379 33.4365 156.055 33.9204 cv
156.401 34.0166 li
160.027 35.0249 162.217 35.6333 163.038 39.5801 cv
163.356 41.2021 163.155 43.0776 162.536 44.2471 cv
161.477 46.2544 159.116 46.9141 157.325 47.1138 cv
156.883 47.1626 156.411 47.1875 155.923 47.1875 cv
154.383 47.1875 152.863 46.9482 151.796 46.5488 cv
151.737 45.5786 151.68 44.6079 151.622 43.6377 cv
152.794 44.3594 154.167 44.7866 155.474 44.7866 cv
157.636 44.7866 159.067 43.5952 159.211 41.6514 cv
159.3 39.7598 158.328 38.0332 156.663 37.1387 cv
155.669 36.6201 154.615 36.3623 153.596 36.1123 cv
151.706 35.6499 150.074 35.25 149.068 33.3066 cv
147.98 31.207 147.978 27.9634 148.461 26.5449 cv
149.475 23.3882 152.21 21.4961 156.17 21.2168 cv
156.296 21.2065 156.434 21.2021 156.579 21.2021 cv
156.579 21.2021 li
cp
176.273 20.1177 mo
176.482 23.1338 li
174.68 23.2622 172.855 23.4014 171.048 23.5479 cv
170.784 23.5693 170.539 23.6948 170.367 23.897 cv
170.195 24.0991 170.11 24.3608 170.132 24.6255 cv
170.293 26.6128 li
170.604 30.4375 li
170.646 30.96 171.084 31.356 171.6 31.356 cv
171.627 31.356 171.654 31.355 171.682 31.3525 cv
173.36 31.2163 175.051 31.0874 176.722 30.9673 cv
176.914 33.728 li
175.245 33.8477 173.563 33.9761 171.904 34.1108 cv
171.64 34.1323 171.396 34.2578 171.224 34.46 cv
171.052 34.6621 170.967 34.9238 170.988 35.1885 cv
171.229 38.1533 li
171.46 41 li
171.481 41.2642 171.607 41.5093 171.81 41.6812 cv
171.991 41.835 172.221 41.9189 172.457 41.9189 cv
172.483 41.9189 172.511 41.918 172.538 41.9155 cv
174.275 41.7744 176.026 41.6411 177.756 41.5181 cv
177.866 43.1162 li
177.978 44.7178 li
174.626 44.9565 171.249 45.2295 167.915 45.5313 cv
166.78 33.2534 li
165.646 20.9771 li
169.179 20.6567 172.745 20.3687 176.273 20.1177 cv
176.273 20.1177 li
cp
257.636 19.7046 mo
257.636 19.7046 li
258.033 19.7046 258.452 19.7217 258.88 19.7554 cv
259.591 19.811 261.895 20.0854 263.694 21.3379 cv
263.384 22.5571 263.075 23.7764 262.767 24.9961 cv
261.999 24.1836 261.024 23.6387 259.919 23.4292 cv
259.472 23.3481 259.031 23.3066 258.611 23.3066 cv
256.275 23.3066 253.208 24.5762 251.86 30.6289 cv
251.567 31.9771 250.831 38.0405 252.905 40.8979 cv
253.58 41.8281 254.514 42.3779 255.583 42.4854 cv
255.769 42.5078 255.947 42.5186 256.118 42.5186 cv
257.14 42.5186 258.051 42.1318 258.753 41.3994 cv
260.531 39.5439 260.525 35.9907 260.481 34.9463 cv
260.46 34.4424 260.067 34.0332 259.564 33.9917 cv
259.033 33.9478 258.501 33.9048 257.97 33.8623 cv
258.075 32.5 li
258.182 31.1396 li
260.287 31.3071 262.417 31.4893 264.534 31.6831 cv
264.486 36.5518 264.034 41.2729 261.673 43.7573 cv
260.483 44.9121 258.809 45.498 256.695 45.498 cv
256.063 45.498 255.38 45.4453 254.667 45.3413 cv
249.343 44.5698 246.875 40.0659 247.331 31.9556 cv
247.537 28.3774 248.613 25.189 250.348 22.9941 cv
252.198 20.75 254.515 19.7046 257.636 19.7046 cv
257.636 19.7046 li
cp
195.284 19.0962 mo
195.42 20.0996 195.555 21.103 195.688 22.1069 cv
194.279 22.1572 192.87 22.2134 191.461 22.2749 cv
190.909 22.2988 190.481 22.7656 190.506 23.3174 cv
190.978 34.125 li
191.405 43.9341 li
190.08 43.9946 188.729 44.061 187.366 44.1338 cv
186.229 23.5288 li
186.2 22.9961 185.76 22.584 185.232 22.584 cv
185.214 22.584 185.195 22.5845 185.177 22.5854 cv
183.673 22.6685 182.17 22.7573 180.667 22.8525 cv
180.686 21.8418 180.705 20.8306 180.726 19.8193 cv
185.561 19.5151 190.449 19.2725 195.284 19.0962 cv
195.284 19.0962 li
cp
228.576 18.8901 mo
229.763 18.9185 230.95 18.9507 232.137 18.9868 cv
233.871 23.186 235.586 27.4497 237.237 31.6699 cv
237.39 32.0581 237.763 32.3057 238.168 32.3057 cv
238.223 32.3057 238.278 32.3013 238.333 32.292 cv
238.8 32.2144 239.147 31.8203 239.168 31.3481 cv
239.681 19.269 li
240.993 19.3271 242.306 19.3896 243.617 19.457 cv
242.962 31.7754 li
242.308 44.0811 li
241.286 44.0288 240.265 43.9795 239.242 43.9331 cv
237.584 39.7266 235.854 35.4619 234.098 31.2461 cv
233.94 30.8687 233.573 30.6309 233.175 30.6309 cv
233.115 30.6309 233.056 30.6362 232.995 30.647 cv
232.532 30.7319 232.19 31.1274 232.175 31.5977 cv
231.776 43.646 li
230.527 43.6074 229.278 43.5728 228.028 43.5425 cv
228.156 37.8076 li
228.576 18.8901 li
228.576 18.8901 li
cp
219.09 18.7437 mo
220.515 18.7534 221.95 18.7686 223.376 18.7896 cv
222.972 43.4448 li
221.634 43.4253 220.293 43.4111 218.967 43.4019 cv
219.028 31.0552 li
219.09 18.7437 li
219.09 18.7437 li
cp
214.255 18.7319 mo
214.356 19.7397 214.457 20.7471 214.557 21.7549 cv
213.147 21.7568 211.737 21.7642 210.329 21.7769 cv
210.063 21.7793 209.811 21.8867 209.624 22.0762 cv
209.438 22.2656 209.336 22.5205 209.338 22.7861 cv
209.527 43.4219 li
208.194 43.4365 206.841 43.4565 205.484 43.4819 cv
205.059 22.8501 li
205.053 22.585 204.942 22.3325 204.751 22.1489 cv
204.564 21.9702 204.316 21.8706 204.059 21.8706 cv
204.052 21.8706 204.045 21.8706 204.038 21.8706 cv
202.534 21.9019 201.029 21.939 199.524 21.9824 cv
199.579 20.9727 199.633 19.9629 199.688 18.9531 cv
204.533 18.8154 209.425 18.7412 214.255 18.7319 cv
214.255 18.7319 li
cp
1 1 1 rgb
f
29.5967 450.648 mo
13.2783 450.648 0 463.926 0 480.244 cv
0 496.563 13.2783 509.839 29.5967 509.839 cv
45.915 509.839 59.1924 496.563 59.1924 480.244 cv
59.1924 463.926 45.915 450.648 29.5967 450.648 cv
29.5967 450.648 li
cp
.478431 .164706 .129412 rgb
f
55.9043 479.422 mo
55.9043 493.951 44.125 505.729 29.5967 505.729 cv
15.0684 505.729 3.29004 493.951 3.29004 479.422 cv
3.29004 464.893 15.0684 453.113 29.5967 453.113 cv
44.125 453.113 55.9043 464.893 55.9043 479.422 cv
cp
.858824 .152941 .152941 rgb
f
55.9043 477.264 mo
55.9043 490.714 44.125 501.619 29.5967 501.619 cv
15.0684 501.619 3.29004 490.714 3.29004 477.264 cv
3.29004 463.812 15.0684 452.908 29.5967 452.908 cv
44.125 452.908 55.9043 463.812 55.9043 477.264 cv
cp
.941176 .32549 .32549 rgb
f
29.5967 457.839 mo
43.2266 457.839 53.3184 475.449 53.3184 475.449 cv
54.667 477.803 55.8311 478.994 55.9043 478.096 cv
55.9043 478.096 55.9043 478.096 55.9043 477.264 cv
55.9043 463.812 44.125 452.908 29.5967 452.908 cv
15.0684 452.908 3.29004 463.812 3.29004 477.264 cv
3.29004 478.096 3.29004 478.096 3.29004 478.096 cv
3.36426 478.994 4.52637 477.803 5.87598 475.449 cv
5.87598 475.449 15.9688 457.839 29.5967 457.839 cv
cp
1 .482353 .411765 rgb
f
42.3828 467.89 mo
41.1025 466.608 li
39.8057 465.313 37.7031 465.313 36.4063 466.608 cv
29.7861 473.229 li
23.1641 466.608 li
21.8672 465.313 19.7656 465.313 18.4688 466.608 cv
17.1885 467.89 li
15.8906 469.187 15.8906 471.288 17.1885 472.588 cv
23.8076 479.205 li
17.1885 485.824 li
15.8906 487.121 15.8906 489.225 17.1885 490.521 cv
18.4688 491.804 li
19.7656 493.1 21.8672 493.1 23.1641 491.804 cv
29.7861 485.183 li
36.4063 491.804 li
37.7031 493.1 39.8057 493.1 41.1025 491.804 cv
42.3828 490.521 li
43.6797 489.225 43.6797 487.121 42.3828 485.824 cv
35.7627 479.205 li
42.3828 472.588 li
43.6797 471.288 43.6797 469.187 42.3828 467.89 cv
cp
1 1 1 rgb
f
38.7549 464.037 mo
37.4404 464.037 36.2041 464.549 35.2744 465.477 cv
29.7861 470.965 li
24.2949 465.477 li
23.3652 464.549 22.1309 464.037 20.8174 464.037 cv
19.5029 464.037 18.2666 464.547 17.3369 465.477 cv
16.0557 466.76 li
14.1387 468.676 14.1387 471.797 16.0557 473.718 cv
21.5449 479.205 li
16.0576 484.693 li
15.1279 485.621 14.6152 486.857 14.6152 488.174 cv
14.6152 489.488 15.1279 490.725 16.0576 491.654 cv
17.3359 492.934 li
18.2666 493.863 19.5029 494.375 20.8174 494.375 cv
22.1299 494.375 23.3652 493.863 24.2949 492.936 cv
29.7861 487.445 li
35.2744 492.936 li
36.2041 493.863 37.4404 494.375 38.7549 494.375 cv
40.0684 494.375 41.3047 493.863 42.2324 492.936 cv
43.5156 491.652 li
44.4434 490.723 44.9561 489.487 44.9561 488.174 cv
44.9561 486.858 44.4434 485.621 43.5137 484.693 cv
38.0244 479.205 li
43.5137 473.719 li
45.4326 471.797 45.4307 468.676 43.5137 466.758 cv
42.2344 465.477 li
41.3047 464.549 40.0684 464.037 38.7549 464.037 cv
38.7549 464.037 li
cp
38.7549 465.637 mo
39.6045 465.637 40.4541 465.961 41.1025 466.608 cv
42.3828 467.89 li
43.6797 469.187 43.6797 471.288 42.3828 472.588 cv
35.7627 479.205 li
42.3828 485.824 li
43.6797 487.121 43.6797 489.225 42.3828 490.521 cv
41.1025 491.804 li
40.4541 492.451 39.6045 492.775 38.7549 492.775 cv
37.9043 492.775 37.0547 492.451 36.4063 491.804 cv
29.7861 485.183 li
23.1641 491.804 li
22.5156 492.451 21.665 492.775 20.8174 492.775 cv
19.9668 492.775 19.1172 492.451 18.4688 491.804 cv
17.1885 490.521 li
15.8906 489.225 15.8906 487.121 17.1885 485.824 cv
23.8076 479.205 li
17.1885 472.588 li
15.8906 471.288 15.8906 469.187 17.1885 467.89 cv
18.4688 466.608 li
19.1172 465.961 19.9668 465.637 20.8174 465.637 cv
21.665 465.637 22.5156 465.961 23.1641 466.608 cv
29.7861 473.229 li
36.4063 466.608 li
37.0547 465.961 37.9043 465.637 38.7549 465.637 cv
38.7549 465.637 li
cp
.807843 .14902 .14902 rgb
f
368.54 171.376 mo
368.54 174.31 366.74 176.71 364.54 176.71 cv
92.54 176.71 li
90.3398 176.71 88.54 174.31 88.54 171.376 cv
88.54 166.043 li
88.54 163.11 90.3398 160.71 92.54 160.71 cv
364.54 160.71 li
366.74 160.71 368.54 163.11 368.54 166.043 cv
368.54 171.376 li
cp
.521569 .521569 .521569 rgb
f
188.54 171.376 mo
188.54 174.31 186.74 176.71 184.54 176.71 cv
92.54 176.71 li
90.3398 176.71 88.54 174.31 88.54 171.376 cv
88.54 166.043 li
88.54 163.11 90.3398 160.71 92.54 160.71 cv
184.54 160.71 li
186.74 160.71 188.54 163.11 188.54 166.043 cv
188.54 171.376 li
cp
.25098 .686275 1 rgb
f
184.54 171.376 mo
92.54 171.376 li
90.3398 171.376 88.54 168.977 88.54 166.043 cv
88.54 171.376 li
88.54 174.31 90.3398 176.71 92.54 176.71 cv
184.54 176.71 li
186.74 176.71 188.54 174.31 188.54 171.376 cv
188.54 166.043 li
188.54 168.977 186.74 171.376 184.54 171.376 cv
cp
.168627 .576471 .956863 rgb
f
203.043 148.71 mo
168.043 148.71 li
161.702 148.71 156.543 154.093 156.543 160.71 cv
156.543 184.71 li
156.543 191.327 161.702 196.71 168.043 196.71 cv
203.043 196.71 li
209.384 196.71 214.543 191.327 214.543 184.71 cv
214.543 160.71 li
214.543 154.093 209.384 148.71 203.043 148.71 cv
203.043 148.71 li
cp
.819608 .819608 .819608 rgb
f
203.043 145.71 mo
168.043 145.71 li
161.702 145.71 156.543 151.093 156.543 157.71 cv
156.543 181.71 li
156.543 188.327 161.702 193.71 168.043 193.71 cv
203.043 193.71 li
209.384 193.71 214.543 188.327 214.543 181.71 cv
214.543 157.71 li
214.543 151.093 209.384 145.71 203.043 145.71 cv
203.043 145.71 li
cp
.478431 .164706 .129412 rgb
f
210.543 180.71 mo
210.543 185.11 207.168 188.71 203.043 188.71 cv
168.043 188.71 li
163.918 188.71 160.543 185.11 160.543 180.71 cv
160.543 156.71 li
160.543 152.31 163.918 148.71 168.043 148.71 cv
203.043 148.71 li
207.168 148.71 210.543 152.31 210.543 156.71 cv
210.543 180.71 li
cp
.956863 .729412 .168627 rgb
f
203.043 183.376 mo
168.043 183.376 li
163.918 183.376 160.543 179.776 160.543 175.376 cv
160.543 180.71 li
160.543 185.11 163.918 188.71 168.043 188.71 cv
203.043 188.71 li
207.168 188.71 210.543 185.11 210.543 180.71 cv
210.543 175.376 li
210.543 179.776 207.168 183.376 203.043 183.376 cv
cp
.94902 .6 .0784314 rgb
f
192.834 160.931 mo
191.683 160.931 190.752 162.256 190.752 163.892 cv
190.752 175.745 li
190.752 177.382 191.683 178.708 192.834 178.708 cv
193.985 178.708 194.918 177.382 194.918 175.745 cv
194.918 163.892 li
194.918 162.256 193.985 160.931 192.834 160.931 cv
cp
176.168 160.931 mo
175.017 160.931 174.084 162.256 174.084 163.892 cv
174.084 175.745 li
174.084 177.382 175.017 178.708 176.168 178.708 cv
177.317 178.708 178.252 177.382 178.252 175.745 cv
178.252 163.892 li
178.252 162.256 177.317 160.931 176.168 160.931 cv
cp
186.584 160.728 mo
186.584 178.909 li
186.584 180.028 185.653 180.931 184.502 180.931 cv
183.349 180.931 182.418 180.028 182.418 178.909 cv
182.418 160.728 li
182.418 159.611 183.349 158.708 184.502 158.708 cv
185.653 158.708 186.584 159.611 186.584 160.728 cv
cp
f
203.043 148.71 mo
168.043 148.71 li
163.918 148.71 160.543 152.31 160.543 156.71 cv
160.543 160.91 li
161.428 160.308 162.326 159.72 163.267 159.115 cv
168.004 156.069 172.589 155.618 178.199 154.718 cv
189.548 152.895 202.471 152.454 210.543 162.952 cv
210.543 156.71 li
210.543 152.31 207.168 148.71 203.043 148.71 cv
cp
1 .823529 .25098 rgb
f
98.9429 133.76 mo
95.8003 124.948 li
95.8003 134.742 li
91.3667 134.742 li
91.3667 114.341 li
96.0527 114.341 li
98.9429 123.517 li
101.805 114.341 li
106.491 114.341 li
106.491 134.742 li
102.058 134.742 li
102.058 124.948 li
98.9429 133.76 li
cp
.478431 .164706 .129412 rgb
f
108.731 129.129 mo
108.731 114.341 li
113.221 114.341 li
113.221 128.877 li
113.249 130.252 113.333 131.346 115.186 131.346 cv
117.037 131.346 117.122 130.252 117.149 128.877 cv
117.149 114.341 li
121.639 114.341 li
121.639 129.129 li
121.639 133.283 119.338 135.135 115.186 135.135 cv
111.088 135.135 108.731 133.283 108.731 129.129 cv
cp
f
124.722 129.354 mo
126.097 131.739 130.025 132.75 130.475 130.252 cv
130.643 129.158 130.222 128.035 129.268 127.362 cv
127.388 126.071 124.722 126.239 123.712 123.405 cv
123.01 121.441 123.375 118.775 123.908 117.625 cv
124.918 115.352 127.079 113.668 130.615 113.808 cv
131.513 113.836 133.028 114.229 133.898 114.959 cv
133.252 120.206 li
132.523 118.663 131.485 118.214 130.559 118.186 cv
128.959 118.186 127.977 119.224 127.865 120.768 cv
127.752 122.227 128.454 122.956 129.773 123.517 cv
132.551 124.668 134.6 125.369 134.992 129.017 cv
135.133 130.477 134.796 132.048 134.15 133.03 cv
133.084 134.658 131.12 135.135 129.352 135.135 cv
127.641 135.135 125.564 134.629 124.441 133.872 cv
124.722 129.354 li
cp
f
136.813 114.341 mo
141.387 114.341 li
141.387 134.742 li
136.813 134.742 li
136.813 114.341 li
cp
f
151.599 118.129 mo
148.961 118.214 147.867 122.058 147.923 124.948 cv
147.923 127.867 148.765 131.066 151.066 131.346 cv
151.852 131.431 153.311 131.066 154.433 129.438 cv
154.545 134.208 li
153.254 134.91 151.964 135.135 151.01 135.135 cv
145.818 135.163 143.349 130.757 143.265 124.64 cv
143.152 119.028 145.425 113.78 151.487 113.808 cv
152.637 113.808 153.956 114.145 154.91 115.015 cv
154.321 120.234 li
153.339 118.354 152.244 118.129 151.599 118.129 cv
cp
f
340.785 116.25 mo
342.385 114.762 344.629 113.752 347.352 113.78 cv
353.132 113.836 354.423 118.018 353.048 123.041 cv
352.234 126.043 350.326 128.512 348.445 130.757 cv
353.272 130.757 li
353.272 134.742 li
341.879 134.742 li
341.879 131.571 li
343.143 130.448 344.377 129.27 345.387 127.951 cv
346.397 126.632 348.081 124.583 348.754 122.451 cv
349.4 120.375 349.203 117.625 346.257 117.961 cv
344.742 118.129 343.563 119.28 343.17 120.683 cv
340.785 116.25 li
cp
f
361.125 113.808 mo
363.174 113.808 365.531 114.65 366.345 116.867 cv
367.326 119.561 366.598 122.928 363.987 124.05 cv
366.092 124.64 367.187 126.856 367.187 129.045 cv
367.187 130.841 366.709 132.356 365.783 133.339 cv
364.521 134.658 362.5 135.106 360.451 135.135 cv
358.432 135.135 356.326 134.573 354.924 133.507 cv
355.625 129.298 li
356.495 130.561 358.123 131.431 359.693 131.431 cv
361.293 131.431 362.641 130.673 362.584 128.849 cv
362.5 126.576 361.125 126.127 358.824 126.127 cv
356.775 126.127 li
356.775 122.76 li
357.87 122.76 li
359.75 122.76 362.275 122.283 362.332 119.925 cv
362.359 118.41 361.378 117.737 359.947 117.737 cv
358.516 117.737 356.916 118.579 356.074 119.561 cv
355.232 115.211 li
356.944 114.201 359.049 113.808 361.125 113.808 cv
cp
f
368.54 265.377 mo
368.54 268.311 366.74 270.71 364.54 270.71 cv
92.54 270.71 li
90.3398 270.71 88.54 268.311 88.54 265.377 cv
88.54 260.043 li
88.54 257.109 90.3398 254.71 92.54 254.71 cv
364.54 254.71 li
366.74 254.71 368.54 257.109 368.54 260.043 cv
368.54 265.377 li
cp
.521569 .521569 .521569 rgb
f
364.54 254.71 mo
366.74 254.71 368.54 257.109 368.54 260.043 cv
368.54 265.377 li
368.54 268.311 366.74 270.71 364.54 270.71 cv
92.54 270.71 li
90.3398 270.71 88.54 268.311 88.54 265.377 cv
88.54 260.043 li
88.54 257.109 90.3398 254.71 92.54 254.71 cv
364.54 254.71 li
364.54 254.71 li
cp
f
248.54 265.377 mo
248.54 268.311 246.74 270.71 244.54 270.71 cv
92.54 270.71 li
90.3398 270.71 88.54 268.311 88.54 265.377 cv
88.54 260.043 li
88.54 257.109 90.3398 254.71 92.54 254.71 cv
244.54 254.71 li
246.74 254.71 248.54 257.109 248.54 260.043 cv
248.54 265.377 li
cp
.25098 .686275 1 rgb
f
244.54 265.377 mo
92.54 265.377 li
90.3398 265.377 88.54 262.977 88.54 260.043 cv
88.54 265.377 li
88.54 268.311 90.3398 270.71 92.54 270.71 cv
244.54 270.71 li
246.74 270.71 248.54 268.311 248.54 265.377 cv
248.54 260.043 li
248.54 262.977 246.74 265.377 244.54 265.377 cv
cp
.168627 .576471 .956863 rgb
f
260.043 242.71 mo
225.043 242.71 li
218.702 242.71 213.543 248.093 213.543 254.71 cv
213.543 278.71 li
213.543 285.326 218.702 290.71 225.043 290.71 cv
260.043 290.71 li
266.384 290.71 271.543 285.326 271.543 278.71 cv
271.543 254.71 li
271.543 248.093 266.384 242.71 260.043 242.71 cv
260.043 242.71 li
cp
.819608 .819608 .819608 rgb
f
260.043 239.71 mo
225.043 239.71 li
218.702 239.71 213.543 245.093 213.543 251.71 cv
213.543 275.71 li
213.543 282.326 218.702 287.71 225.043 287.71 cv
260.043 287.71 li
266.384 287.71 271.543 282.326 271.543 275.71 cv
271.543 251.71 li
271.543 245.093 266.384 239.71 260.043 239.71 cv
260.043 239.71 li
cp
.478431 .164706 .129412 rgb
f
267.543 274.71 mo
267.543 279.109 264.168 282.71 260.043 282.71 cv
225.043 282.71 li
220.918 282.71 217.543 279.109 217.543 274.71 cv
217.543 250.71 li
217.543 246.31 220.918 242.71 225.043 242.71 cv
260.043 242.71 li
264.168 242.71 267.543 246.31 267.543 250.71 cv
267.543 274.71 li
cp
.956863 .729412 .168627 rgb
f
260.043 277.377 mo
225.043 277.377 li
220.918 277.377 217.543 273.776 217.543 269.377 cv
217.543 274.71 li
217.543 279.109 220.918 282.71 225.043 282.71 cv
260.043 282.71 li
264.168 282.71 267.543 279.109 267.543 274.71 cv
267.543 269.377 li
267.543 273.776 264.168 277.377 260.043 277.377 cv
cp
.94902 .6 .0784314 rgb
f
249.834 254.931 mo
248.683 254.931 247.752 256.256 247.752 257.892 cv
247.752 269.745 li
247.752 271.383 248.683 272.708 249.834 272.708 cv
250.985 272.708 251.918 271.383 251.918 269.745 cv
251.918 257.892 li
251.918 256.256 250.985 254.931 249.834 254.931 cv
cp
233.168 254.931 mo
232.017 254.931 231.084 256.256 231.084 257.892 cv
231.084 269.745 li
231.084 271.383 232.017 272.708 233.168 272.708 cv
234.317 272.708 235.252 271.383 235.252 269.745 cv
235.252 257.892 li
235.252 256.256 234.317 254.931 233.168 254.931 cv
cp
243.584 254.729 mo
243.584 272.909 li
243.584 274.027 242.653 274.931 241.502 274.931 cv
240.349 274.931 239.418 274.027 239.418 272.909 cv
239.418 254.729 li
239.418 253.611 240.349 252.708 241.502 252.708 cv
242.653 252.708 243.584 253.611 243.584 254.729 cv
cp
f
260.043 242.71 mo
225.043 242.71 li
220.918 242.71 217.543 246.31 217.543 250.71 cv
217.543 254.91 li
218.428 254.308 219.326 253.72 220.267 253.115 cv
225.004 250.069 229.589 249.618 235.199 248.718 cv
246.548 246.895 259.471 246.454 267.543 256.951 cv
267.543 250.71 li
267.543 246.31 264.168 242.71 260.043 242.71 cv
cp
1 .823529 .25098 rgb
f
92.2085 223.354 mo
93.5835 225.739 97.5117 226.75 97.9609 224.252 cv
98.1294 223.158 97.7085 222.035 96.7544 221.362 cv
94.874 220.071 92.2085 220.239 91.1982 217.405 cv
90.4966 215.441 90.8613 212.775 91.3945 211.625 cv
92.4048 209.352 94.5654 207.668 98.1011 207.808 cv
98.999 207.836 100.515 208.229 101.384 208.959 cv
100.739 214.206 li
100.009 212.663 98.9712 212.214 98.0449 212.186 cv
96.4458 212.186 95.4634 213.224 95.3511 214.768 cv
95.2388 216.227 95.9404 216.956 97.2593 217.517 cv
100.038 218.668 102.086 219.369 102.479 223.017 cv
102.619 224.477 102.282 226.048 101.637 227.03 cv
100.57 228.658 98.6064 229.135 96.8384 229.135 cv
95.127 229.135 93.0503 228.629 91.9277 227.872 cv
92.2085 223.354 li
cp
.478431 .164706 .129412 rgb
f
108.34 218.527 mo
108.34 221.333 108.901 225.375 111.482 225.487 cv
114.036 225.375 114.598 221.333 114.598 218.527 cv
114.598 215.75 114.036 212.158 111.482 211.989 cv
108.901 212.158 108.34 215.75 108.34 218.527 cv
cp
103.625 218.471 mo
103.625 213.364 105.534 207.78 111.482 207.808 cv
117.403 207.78 119.312 213.364 119.284 218.471 cv
119.284 223.635 117.488 229.163 111.482 229.135 cv
105.45 229.163 103.682 223.635 103.625 218.471 cv
cp
f
121.103 223.129 mo
121.103 208.341 li
125.593 208.341 li
125.593 222.877 li
125.621 224.252 125.705 225.346 127.557 225.346 cv
129.409 225.346 129.493 224.252 129.521 222.877 cv
129.521 208.341 li
134.011 208.341 li
134.011 223.129 li
134.011 227.283 131.71 229.135 127.557 229.135 cv
123.46 229.135 121.103 227.283 121.103 223.129 cv
cp
f
136.252 228.742 mo
136.252 208.341 li
140.04 208.341 li
144.333 218.359 li
144.333 208.341 li
148.655 208.341 li
148.655 228.742 li
145.063 228.742 li
140.629 218.752 li
140.629 228.742 li
136.252 228.742 li
cp
f
158.78 224.14 mo
159.678 222.063 159.678 218.079 159.566 216.17 cv
159.342 212.102 157.49 211.316 155.273 212.129 cv
155.273 225.066 li
156.788 225.571 158.304 225.15 158.78 224.14 cv
cp
150.896 208.341 mo
152.607 208.285 154.459 207.836 157.237 207.893 cv
159.678 207.92 162.148 209.043 163.242 211.4 cv
164.589 214.291 164.561 221.951 163.354 224.869 cv
161.923 228.405 159.707 229.079 156.086 228.854 cv
155.021 228.77 154.01 228.686 152.972 228.686 cv
152.271 228.686 151.569 228.714 150.896 228.742 cv
150.896 208.341 li
cp
f
103.068 314.9 mo
102.563 313.778 101.637 312.881 100.374 312.74 cv
97.147 312.403 96.0527 315.378 95.6597 318.043 cv
95.4917 319.25 95.1826 325.929 98.3818 326.013 cv
100.936 326.125 101.047 322.646 100.823 320.822 cv
98.8867 320.822 li
98.8867 317.201 li
105.032 317.201 li
105.369 321.018 105.565 325.367 103.601 327.865 cv
102.451 329.212 100.57 329.969 97.7646 329.773 cv
92.2646 329.381 90.8896 324.189 90.8896 319.166 cv
90.8896 316.528 91.479 313.807 92.854 311.73 cv
94.4253 309.457 96.5298 308.475 99.4761 308.475 cv
100.767 308.475 102.535 308.783 103.854 309.766 cv
103.068 314.9 li
cp
f
115.635 316.079 mo
115.635 314.34 115.018 312.459 113.166 312.459 cv
112.688 312.459 112.155 312.516 111.734 312.6 cv
111.734 319.783 li
114.428 320.793 115.635 318.605 115.635 316.079 cv
cp
120.012 329.408 mo
115.214 329.408 li
112.211 323.123 li
111.734 323.123 li
111.734 329.408 li
107.357 329.408 li
107.357 309.008 li
108.507 308.98 111.229 308.559 112.52 308.559 cv
113.839 308.559 115.382 308.615 116.729 309.316 cv
118.946 310.439 120.152 312.796 120.012 317.033 cv
119.731 320.484 118.497 322.141 116.617 322.814 cv
120.012 329.408 li
cp
f
127.445 312.881 mo
126.322 321.832 li
129.325 321.832 li
128.146 312.881 li
127.445 312.881 li
cp
125.761 325.535 mo
125.34 329.408 li
120.57 329.408 li
124.189 309.008 li
131.317 309.008 li
134.937 329.408 li
130.307 329.408 li
129.83 325.535 li
125.761 325.535 li
cp
f
140.854 320.176 mo
141.19 320.598 141.92 320.906 142.762 320.766 cv
143.968 320.484 144.95 318.998 144.894 316.584 cv
144.782 312.628 143.07 311.87 140.854 312.628 cv
140.854 320.176 li
cp
136.476 329.408 mo
136.476 309.008 li
137.907 309.008 139.927 308.559 142.79 308.559 cv
145.259 308.559 147.448 309.793 148.486 312.123 cv
149.777 315.014 149.581 318.914 148.598 321.102 cv
147.167 324.301 144.052 325.508 140.854 324.133 cv
140.854 329.408 li
136.476 329.408 li
cp
f
150.951 309.008 mo
155.497 309.008 li
155.497 317.174 li
159.201 317.174 li
159.201 309.008 li
163.747 309.008 li
163.747 329.408 li
159.201 329.408 li
159.201 320.822 li
155.497 320.822 li
155.497 329.408 li
150.951 329.408 li
150.951 309.008 li
cp
f
165.932 309.008 mo
170.506 309.008 li
170.506 329.408 li
165.932 329.408 li
165.932 309.008 li
cp
f
180.718 312.796 mo
178.08 312.881 176.986 316.725 177.042 319.615 cv
177.042 322.533 177.884 325.732 180.185 326.013 cv
180.971 326.098 182.43 325.732 183.552 324.104 cv
183.665 328.875 li
182.374 329.576 181.083 329.801 180.129 329.801 cv
174.938 329.829 172.468 325.424 172.384 319.307 cv
172.271 313.694 174.544 308.447 180.606 308.475 cv
181.756 308.475 183.075 308.812 184.029 309.682 cv
183.44 314.9 li
182.458 313.021 181.363 312.796 180.718 312.796 cv
cp
f
186.552 324.021 mo
187.927 326.406 191.855 327.416 192.304 324.918 cv
192.473 323.824 192.052 322.701 191.098 322.028 cv
189.217 320.737 186.552 320.906 185.542 318.072 cv
184.84 316.107 185.205 313.441 185.738 312.291 cv
186.748 310.018 188.909 308.334 192.444 308.475 cv
193.342 308.503 194.858 308.896 195.728 309.625 cv
195.082 314.873 li
194.353 313.329 193.314 312.881 192.388 312.852 cv
190.789 312.852 189.807 313.891 189.694 315.434 cv
189.582 316.893 190.284 317.623 191.603 318.184 cv
194.381 319.334 196.429 320.035 196.822 323.684 cv
196.962 325.143 196.625 326.715 195.98 327.696 cv
194.914 329.324 192.95 329.801 191.182 329.801 cv
189.47 329.801 187.394 329.296 186.271 328.538 cv
186.552 324.021 li
cp
f
213.891 470.013 mo
213.891 475.513 209.391 480.013 203.891 480.013 cv
93.8916 480.013 li
88.3926 480.013 83.8926 475.513 83.8926 470.013 cv
83.8926 350.012 li
83.8926 344.512 88.3926 340.012 93.8916 340.012 cv
203.891 340.012 li
209.391 340.012 213.891 344.512 213.891 350.012 cv
213.891 470.013 li
cp
1 1 1 rgb
f
346.733 212.186 mo
346.229 216.928 li
347.043 216.451 348.108 216.283 349.119 216.283 cv
352.262 216.283 354.282 218.612 354.366 222.035 cv
354.506 226.525 351.953 228.938 347.407 229.135 cv
345.471 229.163 343.451 228.798 342.02 227.872 cv
342.271 223.298 li
343.422 225.066 345.021 225.767 346.594 225.767 cv
348.053 225.767 349.371 224.954 349.624 223.214 cv
349.933 221.165 348.979 219.65 346.789 219.818 cv
345.752 219.902 344.741 220.352 343.844 221.193 cv
341.683 220.267 li
343.142 208.341 li
352.543 208.341 li
352.543 212.186 li
346.733 212.186 li
cp
.478431 .164706 .129412 rgb
f
354.335 210.25 mo
355.935 208.762 358.18 207.752 360.901 207.78 cv
366.682 207.836 367.973 212.018 366.598 217.041 cv
365.783 220.043 363.875 222.512 361.996 224.757 cv
366.822 224.757 li
366.822 228.742 li
355.43 228.742 li
355.43 225.571 li
356.691 224.448 357.927 223.27 358.938 221.951 cv
359.947 220.632 361.631 218.583 362.305 216.451 cv
362.949 214.375 362.754 211.625 359.807 211.961 cv
358.291 212.129 357.113 213.28 356.721 214.683 cv
354.335 210.25 li
cp
f
131.704 376.742 mo
131.704 359.293 li
135.497 359.293 li
135.497 373.334 li
139.745 373.334 li
139.745 376.742 li
131.704 376.742 li
cp
f
144.185 368.006 mo
144.185 370.406 144.665 373.861 146.873 373.958 cv
149.057 373.861 149.537 370.406 149.537 368.006 cv
149.537 365.629 149.057 362.557 146.873 362.413 cv
144.665 362.557 144.185 365.629 144.185 368.006 cv
cp
140.152 367.957 mo
140.152 363.589 141.784 358.813 146.873 358.836 cv
151.937 358.813 153.569 363.589 153.545 367.957 cv
153.545 372.374 152.009 377.102 146.873 377.078 cv
141.712 377.102 140.2 372.374 140.152 367.957 cv
cp
f
163.793 359.293 mo
165.521 369.662 li
166.649 359.293 li
170.658 359.293 li
167.466 376.742 li
163.889 376.742 li
162.353 367.069 li
160.841 376.742 li
157.241 376.742 li
154.072 359.293 li
158.033 359.293 li
159.185 369.662 li
160.937 359.293 li
163.793 359.293 li
cp
f
121.75 367.71 mo
121.75 375.994 115.034 382.71 106.75 382.71 cv
98.4658 382.71 91.75 375.994 91.75 367.71 cv
91.75 359.426 98.4658 352.71 106.75 352.71 cv
115.034 352.71 121.75 359.426 121.75 367.71 cv
cp
.521569 .521569 .521569 rgb
f
131.584 446.293 mo
135.473 446.293 li
135.473 453.277 li
138.641 453.277 li
138.641 446.293 li
142.529 446.293 li
142.529 463.742 li
138.641 463.742 li
138.641 456.397 li
135.473 456.397 li
135.473 463.742 li
131.584 463.742 li
131.584 446.293 li
cp
.478431 .164706 .129412 rgb
f
144.4 446.293 mo
148.312 446.293 li
148.312 463.742 li
144.4 463.742 li
144.4 446.293 li
cp
f
160.313 451.333 mo
159.881 450.373 159.088 449.605 158.008 449.484 cv
155.248 449.197 154.312 451.741 153.976 454.021 cv
153.832 455.053 153.568 460.766 156.304 460.838 cv
158.489 460.934 158.584 457.957 158.393 456.397 cv
156.736 456.397 li
156.736 453.301 li
161.993 453.301 li
162.281 456.565 162.449 460.286 160.769 462.422 cv
159.785 463.574 158.177 464.223 155.776 464.055 cv
151.072 463.719 149.896 459.277 149.896 454.981 cv
149.896 452.725 150.4 450.396 151.576 448.621 cv
152.92 446.677 154.72 445.836 157.24 445.836 cv
158.345 445.836 159.856 446.101 160.985 446.941 cv
160.313 451.333 li
cp
f
163.624 446.293 mo
167.512 446.293 li
167.512 453.277 li
170.68 453.277 li
170.68 446.293 li
174.569 446.293 li
174.569 463.742 li
170.68 463.742 li
170.68 456.397 li
167.512 456.397 li
167.512 463.742 li
163.624 463.742 li
163.624 446.293 li
cp
f
138.185 419.402 mo
135.497 411.865 li
135.497 420.242 li
131.704 420.242 li
131.704 402.793 li
135.712 402.793 li
138.185 410.642 li
140.633 402.793 li
144.641 402.793 li
144.641 420.242 li
140.849 420.242 li
140.849 411.865 li
138.185 419.402 li
cp
f
146.56 420.242 mo
146.56 402.793 li
154.433 402.793 li
154.433 406.081 li
150.4 406.081 li
150.4 409.897 li
154.24 409.897 li
154.24 413.018 li
150.4 413.018 li
150.4 416.834 li
154.433 416.834 li
154.433 420.242 li
146.56 420.242 li
cp
f
162.736 416.306 mo
163.504 414.529 163.504 411.121 163.408 409.489 cv
163.216 406.009 161.632 405.337 159.736 406.033 cv
159.736 417.098 li
161.032 417.529 162.328 417.17 162.736 416.306 cv
cp
155.991 402.793 mo
157.456 402.744 159.04 402.361 161.416 402.408 cv
163.504 402.433 165.616 403.393 166.552 405.408 cv
167.704 407.881 167.68 414.434 166.648 416.93 cv
165.424 419.954 163.528 420.53 160.432 420.338 cv
159.52 420.266 158.656 420.194 157.768 420.194 cv
157.167 420.194 156.567 420.219 155.991 420.242 cv
155.991 402.793 li
cp
f
169.047 402.793 mo
172.959 402.793 li
172.959 420.242 li
169.047 420.242 li
169.047 402.793 li
cp
f
174.95 415.441 mo
174.95 402.793 li
178.791 402.793 li
178.791 415.226 li
178.814 416.402 178.887 417.338 180.471 417.338 cv
182.055 417.338 182.127 416.402 182.151 415.226 cv
182.151 402.793 li
185.991 402.793 li
185.991 415.441 li
185.991 418.994 184.023 420.578 180.471 420.578 cv
176.966 420.578 174.95 418.994 174.95 415.441 cv
cp
f
194.391 419.402 mo
191.703 411.865 li
191.703 420.242 li
187.91 420.242 li
187.91 402.793 li
191.918 402.793 li
194.391 410.642 li
196.839 402.793 li
200.847 402.793 li
200.847 420.242 li
197.055 420.242 li
197.055 411.865 li
194.391 419.402 li
cp
f
121.75 411.21 mo
121.75 419.494 115.034 426.21 106.75 426.21 cv
98.4658 426.21 91.75 419.494 91.75 411.21 cv
91.75 402.926 98.4658 396.21 106.75 396.21 cv
115.034 396.21 121.75 402.926 121.75 411.21 cv
cp
.521569 .521569 .521569 rgb
f
404.312 435.852 mo
383.911 435.852 367.316 452.447 367.316 472.846 cv
367.316 493.244 383.911 509.839 404.312 509.839 cv
424.71 509.839 441.305 493.244 441.305 472.846 cv
441.305 452.447 424.71 435.852 404.312 435.852 cv
404.312 435.852 li
cp
.478431 .164706 .129412 rgb
f
437.194 471.817 mo
437.194 489.979 422.471 504.701 404.312 504.701 cv
386.15 504.701 371.427 489.979 371.427 471.817 cv
371.427 453.656 386.15 438.933 404.312 438.933 cv
422.471 438.933 437.194 453.656 437.194 471.817 cv
cp
.317647 .686275 .27451 rgb
f
437.194 469.12 mo
437.194 485.933 422.471 499.564 404.312 499.564 cv
386.15 499.564 371.427 485.933 371.427 469.12 cv
371.427 452.305 386.15 438.675 404.312 438.675 cv
422.471 438.675 437.194 452.305 437.194 469.12 cv
cp
.392157 .819608 .278431 rgb
f
404.312 444.839 mo
421.348 444.839 433.961 466.852 433.961 466.852 cv
435.647 469.794 437.102 471.283 437.194 470.159 cv
437.194 470.159 437.194 470.159 437.194 469.12 cv
437.194 452.305 422.471 438.675 404.312 438.675 cv
386.15 438.675 371.427 452.305 371.427 469.12 cv
371.427 470.159 371.427 470.159 371.427 470.159 cv
371.52 471.283 372.973 469.794 374.66 466.852 cv
374.66 466.852 387.275 444.839 404.312 444.839 cv
cp
.54902 .901961 .384314 rgb
f
401.986 489.16 mo
401.114 490.122 399.603 490.211 398.624 489.355 cv
384.013 476.587 li
383.035 475.731 382.94 474.239 383.803 473.269 cv
388.591 467.882 li
389.452 466.91 390.963 466.812 391.947 467.658 cv
397.789 472.683 li
398.774 473.529 400.289 473.433 401.155 472.467 cv
416.337 455.553 li
417.204 454.587 418.694 454.518 419.648 455.398 cv
424.944 460.285 li
425.898 461.166 425.966 462.677 425.094 463.639 cv
401.986 489.16 li
cp
1 1 1 rgb
f
418.069 452.78 mo
418.069 452.78 li
416.842 452.78 415.668 453.304 414.849 454.217 cv
399.667 471.131 li
399.563 471.247 399.417 471.26 399.359 471.26 cv
399.287 471.26 399.183 471.243 399.093 471.166 cv
393.251 466.142 li
392.457 465.459 391.439 465.083 390.385 465.083 cv
389.123 465.083 387.924 465.619 387.095 466.555 cv
382.308 471.939 li
381.534 472.811 381.148 473.932 381.222 475.096 cv
381.295 476.26 381.818 477.324 382.695 478.092 cv
397.308 490.861 li
398.106 491.56 399.134 491.943 400.202 491.943 cv
401.448 491.943 402.639 491.419 403.468 490.504 cv
426.576 464.981 li
428.185 463.207 428.062 460.441 426.301 458.815 cv
421.005 453.929 li
420.203 453.188 419.16 452.78 418.069 452.78 cv
418.069 452.78 li
cp
418.069 454.78 mo
418.634 454.78 419.2 454.984 419.648 455.398 cv
424.944 460.285 li
425.898 461.166 425.966 462.677 425.094 463.639 cv
401.986 489.16 li
401.517 489.679 400.86 489.943 400.202 489.943 cv
399.64 489.943 399.075 489.75 398.624 489.355 cv
384.013 476.587 li
383.035 475.731 382.94 474.239 383.803 473.269 cv
388.591 467.882 li
389.06 467.354 389.721 467.083 390.385 467.083 cv
390.94 467.083 391.499 467.272 391.947 467.658 cv
397.789 472.683 li
398.239 473.069 398.8 473.26 399.359 473.26 cv
400.023 473.26 400.685 472.991 401.155 472.467 cv
416.337 455.553 li
416.797 455.041 417.432 454.78 418.069 454.78 cv
418.069 454.78 li
cp
.203922 .611765 .215686 rgb
f
106.75 439.71 mo
96.2734 439.71 87.75 448.233 87.75 458.71 cv
87.75 469.187 96.2734 477.71 106.75 477.71 cv
117.227 477.71 125.75 469.187 125.75 458.71 cv
125.75 448.233 117.227 439.71 106.75 439.71 cv
106.75 439.71 li
cp
.819608 .819608 .819608 rgb
f
106.75 436.71 mo
96.2734 436.71 87.75 445.233 87.75 455.71 cv
87.75 466.187 96.2734 474.71 106.75 474.71 cv
117.227 474.71 125.75 466.187 125.75 455.71 cv
125.75 445.233 117.227 436.71 106.75 436.71 cv
106.75 436.71 li
cp
.478431 .164706 .129412 rgb
f
121.75 454.71 mo
121.75 462.994 115.034 469.71 106.75 469.71 cv
98.4658 469.71 91.75 462.994 91.75 454.71 cv
91.75 446.426 98.4658 439.71 106.75 439.71 cv
115.034 439.71 121.75 446.426 121.75 454.71 cv
cp
.956863 .729412 .168627 rgb
f
106.75 464.71 mo
101.634 464.71 96.9414 463.424 93.2822 461.282 cv
95.7197 466.268 100.827 469.71 106.75 469.71 cv
112.673 469.71 117.78 466.268 120.218 461.282 cv
116.559 463.424 111.866 464.71 106.75 464.71 cv
cp
.94902 .6 .0784314 rgb
f
91.79 453.92 mo
99.7744 447.997 110.002 445.516 120.031 447.75 cv
117.522 442.973 112.521 439.71 106.75 439.71 cv
98.7324 439.71 92.2031 446.005 91.79 453.92 cv
cp
1 .823529 .25098 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.0.2
%%For: (Daniel) ()
%%Title: (Settings.eps)
%%CreationDate: 5/22/2017 5:28 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Blb4`Q7i)@&c*%5iWsnf+hFs7/$#[5E?h^!I9U$pZ?pufoRm8m+UMWce>5^Jm9fmb/[q_]=BoA<FKn4G8//@M4mR/aIe(VQ
%id,s[ftNk\r9LP]]$R496J7LLFTJ\;5PsN*^MU\hIq[[rc76E3(ot<PnTH_><EVZA33Q>Jj#?-;Vq:CggT,6G02C+@50PY)0.oKe
%FYru4[2j\'H39e@7fR+LIX^hQBR7BRr>E=*q6G7QgmkR7(ROSk=!KfPW)17'0E:MB^',80CFUuEIJFA1?EUK7TQ*dehYtW@?VKKM
%67H34rn"W[%j0A!n`A*_m=0V?[naZE>kQ;5qpjfnC3-Y6b5OG"E.&'8NooZZX6]@-Ic`'6"Y[&C)dsK]hrpR(=Rq$WA`5q4Y"UHs
%V^c'3XqQNh_JS[Apc9M]Ol>JNqs>AqOn0#?)jpakcK,G6o`-Q=PT#B'q#1'Fqt&@gR\io\;NIr6q9!P4/t27b=(!B=p8W_$`_W_E
%A".,X+(H$#_$_`TYCnoCs0>f-qUa-PeuQ.MV+g:;o'5?!GF1]qA>:?pV"hRfoC_2UgW^IlTr#&`BB?1PZh6>c2LKpu^7on5\kN.I
%*T+%QhlO"h_-WX=j.nrh1\]SSfC*%IITthF<:Z,hhQOEG?i5Np>&tL&<R;R!d'_Y0DW2);;KXgiY#_V*.r\LT3*5"SUAX.oo4G?-
%X&:roMSdM^rShj=(7&a(O"1-i3\de3hqJ$$>G:4]=6lu(]ZOU+^5<\T2ZDuGI.Ulp2S43h;t'hF:=mhufF@![DrfC:L-C5>Y2;lZ
%W8Q4X(\!.'(+Xk5ltcU%HM-\$2152<ji-oi0=S,<Sj3*oEd%!%HM%0tl4iY+IIkqfXA<7tI/<O$o^2,5c0=!MH4+ZQo9\'uX7^_F
%H2lP,og(Mif-C8/^.rV*mq_jUkPMJlJTc\R\Fa_>e>5/i?Z/a>n+DIdeaMrZcE>LPe&D$Ip%cT(ok:`r)u\sbnpR-#I!`T]XtE6:
%JU9^gn*%s^ebX=Zo@;uidC[ph%E"+K0CZpq$u<$o^f#Ih_b"40Hd\hZ]-7$Lf:uAJDh7hh[q?e1m??q,F.C)4m@2[_;+LE\51RFG
%mG1PSkF3"NI-#@)J).H-0Wa#I[bTrelORo(hd9WYqjP:2rW"miheYNYcPrtjb/)ssW!E-f],i``S=^h@,A+"Jo?EcJebchFe#oVH
%>s<bO=a*&Ga7jq_Y#CdhY,B!]^]&Yf3q%H*qeHH/0HBf<Rk6>=&J7b;&?HWRqj[86p!rM45Uq?3iJ*+@/>FkOlAJ_/mpgZmEq9-r
%)GR[q^&R)4Fg_<on^l0d5A[g0GO)T_)^u]i$nCNn#'Q8mVJ"5IrR^XRrrJC"Pq/]:CmiPS=Z4OiXNG?[A1#bC'I+:j?Z[[NZ(QI5
%XpJ@0^FrCOUtXV[G]*c[[dVH(k/@u$<QfchQY'AOmBTttbBc0O:7&<KHjLn,C);fJ^%]4hN';ME]qgcU/rl*S)On=Vig2@IYL:iJ
%n7CPC;J>?8R:Xt,g\q?ET?b?%](t(+ZU#/Y3R(p70=I4W)ZI!eZNUYENK`-M6ntT]F.A65Z7%4jYDOk]8pjXg]$BP?SZ.K2bt:n_
%H=:3mC3imI)H?ht;D>O84"Ft:CbhL*k&W[=k&rqV_oqjbOY?@D^f<!:\>G/j?*hKi/t@t2k/57kj$eHi5D-^16RC!*.A-.."^O%_
%^Q?e:]qJM^Asr\N95#s&]V6-klYq]qE%U9t:;:j`(LC&:jd+J<<RcX6/dkac!3$n9a.@"VEjufg\AFSS@>4V8Rnr9m6<?l_799d?
%Ki`iWo4N+HQ_l:29@8H?Ak<dtE'E<S.:!T(H+YVo"2$0j`QZP6#2t%@<t:RK/"=CrT.[!^rp"SdS^:BS<D?,rm*rTeK6Q=aj=bnI
%C/XU]K@1`'S)Z#tCBCn=l2MXO3;*;Q:hr4JPr1.j)LfpfLL32EYk`=4"Uk7!bb--S4+[DZPBp-Ss5g&L?SetVX!`dR1]4?kc_&$M
%0&UqG^NEi0YH83/eb#?_)?.KbcX7()X"""uoNP?3IZ)?JH)9I9Q9+r9_31;*<6nu<B'#hibH_7n\?mQ")cPmq/eq2D>]pJlloFu=
%/3M?]TMh'ECM[lGr+6^ZK]T]lAh_'-@T$/o?'L%shkDen?>*0IOUa!OlDH=I'2t=QPf=X>d7,"LOUG>,1Hj-NL/"U>%Fo6h[74?5
%`5Mu)AXZEQJj#XAU[oZgE9TL2ZWuU`&D&4fOG1FqrO'%q$ca`pnPZcpQ?)LnS]Wg@;6-`)7]iJKK2kS)Vg83?N(+>u%S(FEUPIlb
%2d<hcF"i&&JindtU#m+,hLnA&HN&lC&-`G&M-[@n7M7]hDEJn/=@=j/Fb(";dBka!RRYbc-]TU8l-rCW=Of+.-&jG1#ihq)E+j'S
%IWVJA^(Xd^j5@`WhS^WI4DH=?N*?V.q=uf`.-RlWC&ENZ<^9uA%+&Tb1lQBVC_SU(@&ok.:5'-$,6Z^-U_TAOb`LIc^E:eXO<u+c
%6L$?S>#PH-6#)"Y@h,!A#22nhcGfa@3u)oam75l]5a\FSgL,N]9A3N)fhJi/@.2<Ip+)LQ6[N>EHXeQ&U4>D#BJ-2>LB[&F-*r<s
%"B5Qe8Ag=/COJN*K'PP><DKlNF&9bP.V\O_c=Q)"4R+WW-*;&if,EeeNB!*CR0'*J,7[GA0o'L4PYiWRTKk=-!Xjo;22O7K%kn57
%?*r6T4J=&f=&,)s>W9r(s1)slWm]:[n$mQ>[$n!M'Z9i>['.H/CYj?q(s\e(Zdq"iED:U]FaQK7iE`kO.X,.+l[g%5*LGH!koCSD
%!K\Y`.t;[NG@Q&GTm9,f[fB8.Dc&?L)V-B9#n*dMBgtgtGm^SjfCf8I3RMjEd6uXqfE\o*.\]@&q56WOk!5b>aN\DOjKOQ(NYTJe
%9&q(59jjTe?n`teAI2Y^c&r`G1^7V*lq7_uZQa9D+Y#O*?&M[)8OKD3GA/1spk/LG,2NM,"DICc"I]K"A2jV4_MAdo1dokG0nK`\
%"Yb(l(c10F$fn3>M$c<J,T+XG5s,so0=%Vbn`(MWB&NV1^h5W+`4N:R7:h=J=2^j\`33dg]28-)dXk@^a`%4g8I1W,+j(3,'S(_r
%bt'fuJ6J%sN.JmH612O+=eLdO.8WV66!4B1\V6YUSknJ2P%V)oZafK\W;Z'_1ilSSCG]Zd@k\.:^3I*KI\q.W-(,pJ+.f%"T,H[%
%V04Wr'UWN$q73_Y*i<fbA-TC_rQ:0`N]W:^O#Z]Z2r534ek86Q4NaKBiL(clji<WV[<<ekr#,!u,nLFfHqD5].mPd:@3TKK,GuYe
%c9^#d!g-?ae29e+"mI(nBHK%gF:1q.1>"EDn303;[0:!7Jr-%[*"H-YW-]E'lE$Hh^cPE%Y<gm7P%FbV6)"a]/;sX&&REC`3kB?]
%.CoTF>KXp""nm!IrLK(h4!gkM6Lo"gP&E3$_.c4TKN90e^aT6BKr\+6":PX=-n'/qfJ=@WXJ@3"?&FkJct-nX,<&[l>Z&(:OE<E+
%a_jG.>t%YrV:d^Og#\'$LU,`0A@n:@]2E/>QL"*0Y+'^I%V.Vn![nq"-de&eSB>na,g59tbCL:]o"rW<1Es78\Rr4TGd(to8?a@C
%=qKT0]pR8!Ar@&UG"dTUP(W"e&[u0N#'R?bhLW>T$;Y%jYCVem_"[<;o8fe=:[oM$kG-Y-)Xm1/j5%f2h)k#e>0Hr7<e*NW=RqlD
%'mPEHrcMIHpqQ5Q'E-H*pD^[sY*nTHgOLku/LEKrS'7fu3Sf@H(RHj/kUA+T40U'aBR?,q?!%cET0:E_0!#@IJ3D-@0!#B#nfHr#
%T/F/r5m1N8]o[`@:l[CeX'k)KfEpfWA:Q,"VG0MtW#M,MKV#tDCq,nV[@dne3_M,UZh?tr+;oYc0hOgW&hcl^4%kO=,j&5A"6GHO
%Ouu2B9lmna3l\$Fd/qrc"ku?P<c#E(Efh%a-E^6![O9RFYt9m9,EH9&):V1m3AIB_72KCDT?G3N2j-cLKj:iY]McC9Y?cI8^XW8K
%q6OYHpX2!*VKkIeBh>T(Z8Z%(T:s8FcW0AGlE1M0%.>N%>gr=[MGYr[[7q$<C9X<O!(?kpi+R`1<#6Nc@+rEGTrfq$Por*g6I209
%771WoRSa@H."uio,]$1hl`fZ)f2@9,;BUK6Yh3PUOXNW!@hFc%MH\MeM26es%8"BLdhAA[D5raHJnP]kA"bb8mXA\IHe:22lZ[1%
%6t2b?)9'\TN"bQ_@\\^G8m%Gp'2;6A-@EdA-]=Wm+Q\HK'3TJ]/.2[8R%`!d?uQGsJFS4W/ttZX6F6lQ=Qg"p%JR>7(2A$=:Kuc$
%*Eq0aa_UXR.1Z)+?QRd5M8Uh4M6JqWP+JRCS'+?HRu<&r-4S4_<i/G-b=E;9MuL],([,.tPo6K>M7,8T.m!!!KkOT2gWaB*=]LSb
%'m(p5N2]PeCK-E[e^UH/?&G_e[Fej6g1/2FY.QW^D;f;f[GD\BG4:3p`n"[]Ac&t1p@!]e2PSqSZGm[:&t:1Bi0q)Wi\HNFg=A'&
%e*s_)Djq@AjYHD;"g8kP/6m]B'm\\gs,F5'$g351[NA8$iDY,D+@\A@gq;U0Ru/%_Hf&)YnBY5L``Oo.0b%mA]rt1VF6ZZ9Fpmlr
%n`B[mr"H_f[20pAqhaFO2XD3Y[3DnV`-)JH'2>?QUCbd$7O/&SIPGB*!#'^3r<5'U-2YZ[Q5J2_?kYebqZOJ.@c/lt0tb+a&8_cW
%S^s`;P`K![5H"bo;$WU0&1[a[i%H9=XLhHeD[Q?RqO8[X.c/3t^"[C&nU:"i([&I[T*k*pJ1!R.-!!%?TLP)tVW+5?$&3tYp[#q-
%Z<psdr9Wmu"TdPc!/2Nu@#Y`?+KUkUU7d=]CAC)%%GX"^H?5K1TR2>8Qq0k#l2stfSESB0`WYOb-BHr8Hu_-NC]O]6m/(H@G..?0
%OhE&Dohc$.HTomA$)ujUKG.]oUk0Nfo`BP3.R,)6%t_8mmZAH]fZekYj:`3s:SZR%Q9"YF)t@NAj<gI#&<=l,(G,7#R8E6&`DTs(
%fSpl0rT>SNkG".&,]^63]bV,@N#;BN([Rb1?bI644o=b"n`ruic];=S_$C$,")'t*&5iMHm?3-:<nq>^]]8I4Ym/"TQ9aoGi"-`h
%:r5E%Yb*9')0Pu>DF+MSMLXU@!iYW/p/[3WE+d"&-%B@<O_n:lh`D+t/5ib2<f/2D6=bAe<_G:.!,p+Nd'Vd]Wl<kcHAUDaWZjgU
%N7X0c%Zt\nq(jbhP[r-\-66aKaiID@2\olT.3l%CS@q7pZ4s?]jQj41="#J?$ZX?=o'GBl0"cMn'YLDDn7\*'3Whg34[KWI:l4Fl
%Q+XXds#:)lRt(iLEFm$81mO>]"NtMnMJV:2J']5K@2#F>aE/M,I;4'=K<6l:-X&:pQ%"]lhKh=2K-+7)TuOWF2)<T[f_EML^L.&3
%LkjB[*)4pQ4H&(o7k4epM)51:nP;i.@e_`goUC)/K*jfF"'bj`pGD'3bi:f]/P$^4_l1:2:D9bo$_eLC(./8s2+-(_F2F.Aea+UL
%q1A>9'NJ]!e%CTIYL^'bE?ArRGDJn]!jtH\L0Vp=Ua'68',O"';_5MFia!V]VWTm6Agt9``\;K$CR8,6du2KBm1B]q[ED3Ln$j#!
%44G,(mIK&AIJbn1cIs*16G'F,G.1b0Xh:+Yr7QdYL_(5^6$DZR[u'j_=n/LPIp1uW37d)Z*`pJOGQ'Ck^tsRLn/>SkN3]203R(;F
%T!MSSEsC.=Ln9r'aKdf4CK%MSZ*rh7;'s:OM:Uk^519@Z!^#d&nYV-Qkd3UQ#I5\4fI.us.-7j&ed$d#Mb`KC_LR`j'9(Gr@ALPj
%==.]<O->/u>mPI`lENEG?Z[2rc:A_u)X#d)1@?bcg6rXHZQ`pl_6OjAKqo1'"a=)Wf!6F3%e[Akd$/V"fME'1&L6,5+DiYGX<]#:
%mq<;`Fjat;\@Y00ek)c6i9h?]O:aQk!dD*ZJ/m<X'A.4882Qit!)M/K<LqMoU+Cnu74B67-Nom4*>ZUbCa%MNB/!c(7o9Q-2WI7s
%0+s-Rcpa<O'J3/*_#E7KTbpZ8bg?tm1f#6S]ToAr'1JR-"E>]3N:P_K.6tpu92EY(b^`1gH,PP]RlgAk8(:+<5Qq/0R\/@"HrV3r
%a`'caD>P"[3?q/t_'4F1<6<^P2uY#Spq$r%]EEH[(aRJ4!'&+DN<j3#&-F0q\;p/oT`U-%l]Q^`[&l4%cZ;u[A$m#9:kX6Fr.RcW
%j"JKtA0R;Fnj&;0>V<\X89sl+M5'IO5/mWL,?%"q[4*>3ZJ=uQrLSufc+E]h6rJM3L[i9/S_D)Fr<A;#G``mmBUn5aE^4rb!g(-R
%@)sXV6FXju">F*m.npmqiPEK,&siYPSdDoo(b(P99>iObN6s/?&M+Z?+RI!+mD9#U(]6?>A])@2n1P-G-3"Sd\ah4(r[eE0?'&N3
%B^Zj;?hgf:FiK!IEtW[3_naZlKhuaDhZRIrOtnlgqg;-GdaWnXVR#A4d@N!_S2RbCC%"EKg;D!Q<5Hqj-4G>hhDPS':MHJABGg_b
%8>QF)*L/b@lR:!/!\UZiO/&XLn8d1?\A(lUQk0P4AqWFe:lBZ-.D7OUcH+cqU&AU1N,6RcKNoL`a,E:*24:0GJgP9_@O^eS8OcJQ
%W@3.e+G6L'W:Gn_b*?VK'F[7hJVe$FNlAki#'rG-<E7FmdN7C4'19AH=MGJ6s&>Zh"bZSaY*]i'%,?VXcZ-%#N2K'@/WFQ6iVEso
%Y!'C=bVFo.3snRKI*X-`S'@M_g]<`l0qWZAPs&+.7_j$I2gtbb@_d_[aS5bN`IJDK4o$59`IJC@"4RDQ(BZPuf'e4k(B\LDq6RfN
%`<]r.V4d3Ua1>9S8-.JEBSg.@^5D!Wa[KYNe6'jn26K!N-HS,^>dJC3dqPCYMoM#aj;[rBg-,95;)\@9j>+hW1bP8&A[k8jXr:B4
%>SFgq=Rj8SN`1>52rta&7,>qp;4;dopqlb@^++QZhT/ss2S-?$\_2PUkE3m56-=2F4'4KFQ.^OeH$K.<jMmTH,VDVYaun&+6-YB+
%'qJJ>W<2Q3KLuO6I-++],d96aA+%_h%Y/GR8$]\Q_9f+@A"*kuGsNVdRi[4Pd<JL!K;CYN2]EqYS1`qpU,$8B"F26d\.bYt"j%gE
%5&p?21/9`u2]p.`k_rPF@]%Qc5%'_^M=H0U(lTjG_\n+SOV)9lksj-dj%I#/1J&ufM_]NKU@KIn0!pc^^!=U/nDTTFYLGYAhC8.n
%[0Pe71r#FhOK:j`D^tNW]l,Cq6+rls0H1`(kKbC^Z-27dV;+/CUSP+CVq+@14^f1u9(0,U<p)c:pTC3QG,cn3"T+QQSe`S%YXVWV
%]MR%4)PR^%bsDX$,,;]:'0"kF`#5^KI]-uC91$Bq=t><.(bI@c#E2Z3Fks\;n+3=0s+4t015@Oi(`<R,rNkOOG'rQWhO?b$)m7l.
%$YkWC]%u!!L<I,L@24OKNN9Y\._@=30taj;bO;;56o?2R,&Q8S:sI'EJ1<Z(WYso!TNlgh=#VmSJ/,mh6\(GCW*+,<7@;1.A0l*_
%@90&a(TgN7J<t(]-$9o<eIK&44<t.;M6*f^ok6IB\eO4I!(>%8J-ZC8?n__b)8SO56kZ*ug6o_e:$sSgCs9e?LM1_Da\m@nRqIoC
%P<PC(@?V?H.N&IX=oh7K]qLBM[E7YICOWr.H2"3q['Fs_00D@If6!aD7B>+DjXF>])XEc,7(`(E[t`ST+7u``1>ceQUjKpO#OO&*
%?a0gtF>0VH3BbRiOA.j-KqKt^D_f_]EXuXL[_rBee'1EK9XatNJGIjf'DT%(E!GQgK2=NmKd?bc$>M4?n>^":@`^A/FFn'4Q8^AR
%?7k,B.g>bW8L?7!Be0G?K'm37@m7=?rJ55_XD7"Maml*@0>A4cH5F=*f1k&To6I9SQNXNoNptDtej]'WGI;n4482K8gtb`7kKiQ#
%`80g&PE[/u#3,&o\k1&**H!ep1'10UGW=tf5cBr]5EZdO;So49@HLER(^?+g;:qo]^o.mdkL)HBgMZ]B=P(e_eQ.cHlsBDrFp?tt
%GUh$>1I/>^cN%prQ?OHl[,7g/.uBWD"_onB91plO%BV*r"l3Shos3Z&_t2llq[djVF]q5(73o0n5]^0'&A!HVjH^PnJcaHYRh1A<
%G?[J*28iWaS/&sEZ9V1G+FOL96N3#E:R"k!*jEOA3u(&+C77:24ufau))RCJ?kpJGT_2_A7Kup)_Y.pT,,%:I'WsU[j"gho_8+$u
%Jj?M;\s(R(Y4s[34a?s`@_94H[8L@7=(G>V:+Pl<me>J4rjt<76)q3e]?LU9#BMcZS#<n(O4.I`?\snL6n,>[S0HTpfL)*PGf\(7
%+A5Cua9n4Z7047cLBSQQkRi/TVaQ.We3+0>8b.M`"?)_\4[W'r';-l(4'\!bJJ2gnLfc[a8+KYq!hM,'Yp?h0=q@MPni@F[fE,b>
%q8[OeJ9?3mJ#rsoZ5(d_gjt'p%[olD\[gT^r4>?fU\F+8!3Pkk3@M$'J)Q^qiLT_i6sdhVnhs\2/D_I?dWOs95koO=I$meUHT1-'
%T@d$JS4^Ge!BOA0cNr8QB*+Z@l?\.0G6mFiVR2+]:3ZRPjn/*J:uj7u>W8UdP.5)/3_HE:`LckdfKU*LAe/,\rEcjXi1kDr>g/#t
%,/luC4/MVU,\kI%l,qJuV8/f5!CVj;,IB/UF(QKgX@Zb/)U?383)38A0VhjEbbUd3/Z]613"ou#,2QN84LlZ..!"W"6]Ge='a/V0
%8XD_;#)OH`Hu_\C:^RV(qfG/]q.:+o+(HIWaOpfP<frF@T[5/\;"^L..R=V.+LDJ#hB*M:7K0'Rd&P1<2%_6CHo6=KATFXHX2MIN
%2&6Yi=6^Z=rhLm'1hY67@"?NMfC[[khRm!32*HMQQOmo%1q\W=+(L^DWIH\r?'<)4C(.i$eFU48)-?*LO/tR/4*=o)XdMhej_](f
%#k?oiUR$:'!V7M61Ck[8OS?nkcR(hQ+fF!D4V#_]*jlB4k)_#RO_BD;l+j#^82S>[9l<4i$2i9qjF$2XW!tj-m?gM/p#3W)E)]O>
%OcX9Sik@G5dpW,L4ZKkCCYu78\";Euc$W-uKjTI2%p,TM-(\q^Enh"AX23'Xio>Y2fq=2^Cdm/iZXuqM(aG%V;*'K3<trVZjthsN
%kf+q1%Wj1sb<.hP36.FT3_mY9b0$UY/#6P3*nenD8h19)_(e"Wb,FkSL2=5>;2u<nPa2FVngZ(:W62a;3/?JBX.n2.9QEb(@(RX;
%+g))Ufr/=gDkO!2,0Yn7+]BoUQ_Ob"@X)s'T6"G5RXWZZ#?)o:cl?`[=$Dhrn1+?N@]W$_jjK*XSld697G*AT5aPr+S9no4S4o*9
%7&)*=<DDUJS&D^,7&qTu#^Kuer+[.V>5;=-S4D._p,HEX-8EL`i+H@RQ^j]MN-.hF&["`2SV>8e8a.0l7[kUXR3Xe5["oR%K>e"I
%476Iq1G=I;"E]"3qMDh*kojstgF!*1nd(mg'?I;K/<dVp=)5q>a]UaZR9E3pT\X3BQ^;bZ1KDo*(_W$O+2qACB9Fds85@HuAAC(,
%JoUHYl^Ht/TWt+^#2@"-j/a[oD,(GRN0FNG1)R`[j(/NHR*jR9"9jJK+;-c&OXMp@.?20.LngfjVTOO8CBr[\0lVZM&BA(<"(G?W
%bT;Mb-q^ItU6MBGL]V/0]eRM5r=5&MNQj3)5A-'L9essULs%%SU@A^XkON[h^H%-n+Ub#cr=us(h3(_ac4/tWJ`I06R/SoIU2pX<
%8PLPgNA<.cYa9ud`DE7GYY[8`-isfS>Xe]a.6lBE!]tOUL3CFg?k,5k6[gpkkYNXO."r2J*&s-b-\TRe=99WaE])];+]`>C'nr[t
%ZCQ2*>s/((^heioU#?&@FUtl;?EIZTcZugUj:#A'Z3Cup<`H#j5iGrbU#_,&F`LWR=_Wan-Em&bW2HnP)QTco7QagM:Eq6?(qZ]&
%MRlGPNRcNr72:8C#mb%o<)uB+7Ba!<JYPpsC/g1"G+GYaq`+K/6_PbF7Y5Sch>#hg@XDO/m6LF6_Y1R?lQ?p$UJ1@m$OSe6BZ6Gp
%dPm42N$BnGrAa&4GS<AmpfprnSh03B)e[6\"tYSRN9.BS+ndtBY8:"Y%N",d+`SR:Ku\tU;eEg;8<RRa*\fA=#r>h(4@tjdJJa5H
%Mdn<^<WZ3.QBFbseJ#621F$<d6;3'ZYuAt8GZA],LL@*'J_&DUJiUidZtu"+(*pt>e&GqBG??D/$0J#V8D1NbTp.8h&KonFNLgMO
%.S\^R>]9/HD6LDq^'RgJm,VPEFm+p3n$[CXK\?u(P6G3.qS!=L\PpR4"<nhXZ#`^)DUY6d>Aoj"pQ!q5#X!8\KC0e:^s13[@mHo&
%);NO7JH@bLO[7]PXg?oHgk#n:-bjlsa,^.5Vs\GNNiD(R)"70*i)rH>2Q:X6N'@imkD]gOUEj32cY+>l!&3Cdrln-f!>OI&,dGHF
%1n[4YS9q`$@jSdq/'ghbNWB^X9-l:-b&;:4AsCna-8q^2ZSM>EWESXb7dO#R(jP;%Id&Fu9_^maO)/-$cO?\fmTgSS#:+-<f">RR
%?P*YhHeUC"--#EC1M9@e@b5)tTB0%T??S2s9T!%$/?4iU.F-u7Z8c"@qp7QGnX>WaBI^Hf\_+XOs%BdpZ(4MdcQ_+E0%MUK[]J!H
%V1e[J)d9J8.;p_p/8/PrS!2lX/n%VbS9.YdXj0goY]#E=(?Ye?"8;hr"2"0qE8nd`_a"p4F_'XZ!0E`/CR4VKi*OWqBbNn4oPAkL
%)QTTK9J1B]Q"Y\hJT#X5&.#-63aeI4#?>sgl%8.+$;SO'HoZ.+``n-J3K^!$+<!PaS$7fKnh;M%\\rH6kn(IJeeCtJlB%$08Pk3T
%aIiXgY\:t,d?I*;ZP4-0Z?$p_:!W_V8!1g;:l^qMC!A((BQBm"kb*Y"a=0>Rm5)p"P(.4Ar@A4b3[Isn"-"`5;T_"2$pgO9b5E#e
%P_!+343>jlX(cc/gA,:?*2H_Z%T:B5ms%6%^5k>;(#C[?J8;ZB+5Q*&`O=-Tm3>_#SK$!;+q<4&6FIEfOE<+s\e4Gh(%OT^3];]!
%P(V,l.!+iDBkR8j]sBJ7=71/GFh<Q8%O8gXG_Zmtb2>&?FrGM7NS9C;k;FNNC7"7bds8=<IC.1KeEoRpS4Lp_(o^>!NfciW0bPM+
%3-*Q/>\t]efgtBH\Z/-%VGTN,Mm:N+0e2i5FJV)\6LnRNjT@%%=(dYTWcAN\9KuW8UFN*o$DnX-J3UWJh'qPt>NN(CYYJ;j73UQi
%`i:`7R,-`Ur7i:cONm%X/;"FHH<Kh;e<S`s(M`_9).*J^\h\U2I;6;[s6FZ2B'-8pQZ#+<b,EA3jOJmc%&rfK>$,FtW]'Po>Ni)_
%(?2ffZ5)5U1l,`^7AN&DTuS8Qa?iT:?5T7KY"4QD8k2hU&=)dqAJNELIN.Kf:%r7fKq?c9n1,-mH]D[t8n"/PW@/kOWf0I7!@k_]
%=QSQUR(rf`PuRHRCJ9d(#d+]L`h^b4C7uM\&;;45Ki05+cpD4oI^t,9FWi"9fY:<!][0eY<B)WI-6]R@%3V7\$gg-cgje,^o)qqM
%J_%M6G)t%U@hdYb4$$9_6`d%&l2k)ul`=(ZE$VhommF5QH43.1K._GPZ-T]3d@&hJ?$ob6nEoK\:[=%uN`7uq4UZ"K*_!'P]Qq@j
%bZuO[F7:gGaL=G&C<>9tBqlulPB4%MrWPZH[6m:,,`O=,*1W5(oR<^+o/hM,)Z1%Fi]s&;@bq/C1uSkAHo.RW.B4bT2i`r@CrRC*
%PeDbrN-6ST7&R>8?]tSK2SDgZO&MCK.If;.pro;EP5:]#f?'TG<%#C-kC&df?E![A5pl5X2c$<]<g>UFVC+I9eF):C-TU8pYJs.0
%mV9Isc[kAo&ebfqH$!NL8T=RR>_h"YU@c>(CuM'NK[cPbUhIhN1ZoELU22rn>!&?Z.A2m(LR]muEj>hud&"3p!0(7A-:Us`9AVO$
%@*HX%R>WL;o+FOs.#BK0F;QJ09EH1^`+)Mi/Cm-3YsO\3T`iFV>@L/YVI]#=T96>&B;`:_DAp"!VK/!@JtbJ7T"CgAJ9*FJk+p-U
%>bLSSC9/8IC,$=O'#V[c+UBrmM>9bQl6NrYks<gEoSP:c#2GU^h.?DFGS54B\@_%OCU3hX4tO[.;_48nja9(`@ju.R4Mj_G'1P&p
%5#(DCBEmr'HN).#^R>Y:e--UL_7U_g$T\@$3]P#N&k0A#DQ7D$K!HnU;Gn/1/Xn(WI!.nR7d5a3^n`3(P37da]aomG\en&+Y.,SA
%4@,QKC@;:R*q8>6JM'2`2KK':3h&4=%mXOG=QYU8992_YA@b.+4+t14WD>WW^%R8)G>[C/+-mtc*a`2;B(tBt9%gTfgT*%sfsOnV
%GK%uR)RYX0F/q$=aEF]+i0FgK-?78X=b=&*mBp#+aEb-C=a":L'$.%J9Q,7@Cl%@nX\5B%dFshMfmdk9X4,/K!Qb\.U*H*W1gZq_
%X-D27*+U#>C3-e_OLMp.@cLH-X^#o?K_=)+a-4e+h7=4DkC8VK9p_S)+)*U`2(6/8*lB\a=F&bMT@;@W>g>,<P^u3Q-%,k0N>tn-
%<&A\.NIggOWql%rGtX"jjltN,=-p]%ZRj?slcV5fm@2Mlf;$*a[T@7/YkNPS%FJMA*g_.QZ+8JPg7UM0)I.jG:sl0uN!6mmA3ltl
%3@K/1^FCZ01mjXPY-P!G,?N^BeM_H5NEfa6=4KiVlBmcjWD6F!qc6]ZBZ#]4CY+1sldj8UL[B9XDLFEh,=Ni2X1=u>p6&e$s3Z*g
%7g"k>-2JHVWVn8qb3+6FXuV[:6Va!TanrKl76Aa@&\=nC44HM*q$7:n<6V0CMZ_;ilo36se%kb@BjPmr=6$g<rOD/1H+cFN<u']d
%@o%FbHgS\"]?[.UM6C1bDSYV-#E:c%[d8OU/\7*Vq$GJHik@a>M$tgS$_Q_1V0d=Cf'.k![#]SiqS]:\j<t*HBeU&h+%aRQ4ro_/
%T:>P2JW,XS0Ed-cS[*?(rk"2dV%S8CC7t#I[kaaH%dC<35+S!To1Zfon`u8X(LJcX]U\WcC#_8uM([\jTQb9A35&enBiO-Bs..<i
%p2cZ/_!!`2;@aX.NOjcJoC$`=hs-k,OgFK;1A57p*VeiYH42f!?/V2:g/3lQXF*4Y,ijrGXTOaI6Jcm:kM#F90(>Bdc\]%VABmc_
%F5?>r#'eFW[V"+hNhZZN9IARU*CG"H3&ac+hSmbkMBU;F&6+Y(1^,hL/,**Nedb!ibJnOlr^b>#Cc]Qm&eu;3Fet18B!B'm798a^
%:"F!.XbhVG?S\[kg%%9U&YF!@X<A7\dTN-)XZ*S&dkCNGo'`h\]uCs*f76c)8t7=(Y=ncq^bTpt!X7@Ih#ej))QH>$B7cb,/4<c!
%hYl`M\%#mh\%i(,Z)'OL(>5d&,ICPkW>3Hf3P61J"re.XBF%:qJ(u22.g`g1F$Udh1&#9AB<lU@\eLXcPS\^@+!prHU\Y`IT@ZcJ
%)%J-W!V4Kfb40;JfG#AK;a0SB]:&O]%0rE,P!BCK\ESTP6HW"I5qpP?Md=F_j)>jRUs9P9.\SPN:n&1C9G'LEkdb_22pBOW?PR-_
%AtF9!@=5dpLuk[c,'4na$>X*P9],7@?=dcVW2q)6B6ge;ij05dM7V\[;3tspNhSs0WcGSKd[8E;MA_u[eDt=QniU&b,aZ@tX*sbs
%8>hStRO>8(*Jn's[&umH]"6FWb,?p8UD]6B)$UdU'Te_BW/@h5["bqu1YB)^gkqKUYSnkF7HS&@GpQjGG?9I\4?=iGmoU%EIF_*Q
%#&Ae8dl'B:[1PRGlQJmT(6Z-!?P?jJls:M"IHuJ]I\k]Th<OKl`Q8I,CZL3Q^iZ11_R\ek9aY'`UIcUDE:)*T:H`ihH)KJ'9T/Gk
%aAr%uU)OiH`OjEClq1Mo)eX/Fo_ChO8/H6mg!.$C]7X__NC&AB)cNgrQO>o.:aa<@6KjduT6!UO83['??+DSY00=,oEZp_/.[p2:
%=2q/IRT!BD`f+![HDTh63N:IcE7OBph<%;"'8fdtm\#CqeBAj[_B;?Q!-&9>r[3Jm:dRB?f8&V[l5P`Q]1h`R,e3s[imoh]qpi%s
%Q0GG.=1?*@8h).46nsO=;=FSj.ccm4f#4d>L,C]eM7m\6O7S=;i\?D\::FB9K@Ta#jeQ^R0kE_4.^i?"V$UN6"&R.l*C(10AWcP4
%QZ(bcAM85*lqeb8ap+,Z:tZ)=I8JT%Q$lK^#F0^6fa!dj&B+nICfh@gRMaVoA#\hp5po9jP]A^X1bfZ\KG8P!]V9MgZPIl%q^a!Q
%("T/S>A.`3ZO$p:0"c;okF543'&62P$e`JfRgugt4@p1MYgR^X)+][!AaE#NiY!oBBpT!W:ZnhB*ilX>3T,+_Pag83V&A\rnuuo+
%piYTF&%a\C-QMp2%Nu.`>8rf\bpQ#]-#JgB=lu7on(TZGURaBGOk^UnG8A5/pcTUp&MkRGA'[/9nI.<#0H@scU"_qT1#k(gVg88S
%@5]F:C77[t1A`FT)Nr1k5,3Uj7)n?XLMc/da\5oqA6]b5bU6b3-BUkK"3igH__-ei:(!-1LoF1=P0sY.n3Ji,9P?jB[0UQBFmr[8
%DjgL4L7-r&;]k$r2rbmN7ahs#j.[RL*o;1&=Zb%4ZSG"T%b#);Ues,-lX?Bf#@%`;`.oO?&[tmV7a?5IV`Q.1Hf>/qeg2.?/&Ut:
%\PL>r?5Yc"lZUBoju[gCFpW?ig=XA1G4C[>2$"s@,mfe\:l93I6nL/^_26:pjJrT`E\HXHX"4<3LNMsO>&Oa@VA'@NVfYFdU7oCo
%7:qc\=jlTQHC7DMAPAkh'/e\^b'ZZQ6$&$l4Em]V]B%'jK:G!5U)=?<P9!p=qc3>>N;%]17D>1:\+V/F1U813P>>`M;AdY'\8-K;
%/aMDm5a6+FeQ/?f3mm1lj1<dec1Zq6:=3Xt9Pmk?80\U$DbhSI]@ab^Nn]agr%;^%]oDp*:7t(:fuOKTAQN]>hRb/I17d,=TA4e:
%m)ie"QoL#B!np1GM4EoF"^*0%1qBAq*4$V;Qc#7/f#4d>L,I@o9dD^m><-`1Z-)>n]7K(u'!Ku1:>9T$FM0d&1V2]A%d`PBD12JT
%\ZNH6ekk5=RJX*"2U9RFFR7[=P&n"DELL+0)(ubgn#+o1;)!HcK.j#h:XbqX7?&T'5#QTVM_EAR*1VD5$b7duI[oPRS:A0!lam;s
%oBH/Rgc_4meV2pn+p`pR72NDrio!N$W^pI$J;Jk)Ln.@PmGm.l?t5!?$^"i'*V"&N'`FoN5iL#EERAYMW@2JngPfMP'(puG[H%hB
%.GdclAl08U.q&dmj<C-difbZ1R7k)H1!*2sfec8O@#,$JI`HGZegGNYmn,@5P``#JPT\?,43]*YE"B/;BH6?hkB6@/$&s8ua4r*E
%l)XIJ\;$/Q<B`)O/o"m0Aa/Lfm_82BQ'J-X>3`AP>_Fq_:a;$-0'c+ge.>c:EVSi%fT9TI'_''HYT_%&A0<W<?pfr+aHY6;hDXHI
%)W5H52e\mKAoR/o]hG2g[h.`b6]*1u0SqDu`#$_^1RQ4NO"a7;%,4X6g)mD_[A"(XS=ua<:Ep>'Z%biMr]"&1/(tOjH8O+Dmn)0h
%8D,(2m2,(GX>2hdf\&F:[/ESUIW%+&FB+OgWr5rnX*sD]H=j`!jG"S45D)+ZM<p1Yg^t>_O5hE1aP<nVIZ]b>@jB*nS]"%lNK2d+
%*slDp4T*G$22s5WYdSA)4K%0=_b:r@nJq>&C*7.'pa?G,i`rgpUis6996pc:1^4NR=U*jo`F.hR71!To!X-k^3.kO;m)TZWc[,"0
%4m(RVa.*-jZ0\t&AsIKaU$Ir\+qPhF3O%%CYa(Eh39f3lUb=$7<tiA.M:EY-blUFJ34d0upni'[pem?KT_bnP1S9",g2ZhZ(!oh<
%oYDL*B[[5rZu!P*G`5=DLf@lcR^iq+-kU`FJB,)rB]PiY(uRrh1k0%58=_Y_:cs5F!^j--YsgrR&%ul]Y+UPQ#N3`sE\f)N46Yk%
%$3+g/Xlt_iWWBWpJm<TRPlkClYE8FoBef5?5^O"]g&W-rGhA)eYT`:?)`X'P^nEd4PrldqUu[C0?piKqjg,HTd+eYW,5%FjmqA!C
%s)@[6/:fP1-^aNeRQVBXkYUji1X``QgO>DOB`I;CYhf9DIJeKJ8'j\NA_h:udEgbRS1G6G&pj<Q-O[k@,j=b=qUfE-<=+_]/@1Y*
%"@32[`d-3RDM[11G+3KK?@5&oY(Kk@6uC/^$]Y%36jB8-VmOId'GZ'1`.)VUJ!;I4+fQ/`E0]k4_se5Fh3XDmDH<oEkluGW%FSt)
%!G0Wu:[Jrk0-><i0;mO/d5l'ULDcuZj,YGN@lYjIBjXO0_:P&d0I[_J*>2:*CFgdcd#ob;_eBYPCAS0=Cb\S-?,R%D*j!X-<o?G^
%^93Oc]+Id#4u>uj>&8M!?i[`2aC,\_Lt]"pc?#C&KZL\qg6UTE-Sd'XhWN5Y*j]$-SKsc(1+-rP3c;9*G-FBLLon>+FX"kG[_b#`
%&>9X\<)8rSXd<A;8G!;sm]_$E7sarAH:4VCdaN?%YCl/=C$0L[=O)r][bL5mBi_HCd@&N9fHHI6Aj4+ub8'.pRsEa@"%SNeAkHC?
%5QIG.9`DN.<\9HsMUlU6h$aQKSZG$<b[qmkc*X:WG3>nNCI/6e:0+"*B<.foU(s*;#W@mj;]5l!7bJ'+,..XlOhK5sHJ.T,(>mbb
%)D&Ges,"5*]%7GA0o5lO0"9LZJnP=GqD?@?(>pA-/Bu5$I_(UlFE>U2Q=aY8f(ipl[eRSDm\I4P\ZIrK>F`rt=42c?K9-^#N0!]c
%6oO$*`I-;djp5h<,kL#cAo$P2S\`2-CmrY,)(_+`X,O-DF0\_g-,$B@D:EiIUMaYY,7>Yd3:.]1m4<KsD[sGD#[('PA'=N46Y)NF
%Zf!-1BlP!X5=ThDZ:VYqA35g6-0#li`+5I*_&+09X>F]K5BfhKoaYb[/)b0>[<dV1\hegXbksXtorQ&'I7*]lW3L"7^:i+^a?C&K
%BkRFZS[Rd>^Oe>CEYm+L\D"60$,T_;E\=;kD"cBn_k)u>R*SJG>GioNOf$bb+5a8r*E)H7)>X7EEmZ<Z(JP3]aC.0kYT7c:%QS?\
%*4?*@_tJ%)[GE;.D"\u3D"#[bD'rDl:%Rbf'aLm$E5dAY%UANh\`.%:U-mqcpYh!@-W_knH;fQOCdUOt+X,U%ODRP02C)fP'!_rQ
%fnP/r:X2Bh,i9Nk`3:SC20!SNim,C/WR?4LDa'1+[la5pqIi\qaTj!9Y<)h,HU7NKCp+<8e&cqQ#YSU1%:ENOjm*!A`J/2u2'Ib2
%:c9-Rh1i5'\1W?<O^KVh_)?nN`PKN1+PXiL(8L]C6aui8pCc]G]r53iW)<o<CdODU5c(;55Mg??D]>Y)0]tV,1oCR4VbNqnZGquS
%1!`LEP/'Bc.@r,N/cr:-1QH+H9p*t+(Wj7$7?9gPl:q[ehjK)8`l4TuFb@(X8m1'dYLKqhLOqt?^*kSR%^<AO-H2NTYFT8l[HLpU
%?-J]'7<c^m;(&OerJQk=3!ttKV'ma?6d_c@_7A_WdN=2k]k9M2&Ai;r_=eMIRn-\?Qj)8VPT-8+m]o:.DTE8`GBp/+`%NEe?)4]!
%'"`t[Znp^U9eb=TZTAr[O]1"SH(s">Qj+<K"eB3cYD\jKdb)-UZZ,=b!qK#$V7^RQIgCo/cddd]lUrL]nd;BF,#Ur^M;tQkJ^rnI
%<(`?qZCpu-/#a^B8hn;if$fX-h&4?,+]:7\1q$gf4@(34k%YI>l%3'.Z^_ZM`1LF/YJl[mD5Ws2#&B[6p,[P=l1<EK`,?`%Hqbjp
%2*B"Xe=hU`jI1(@3jqNrCM&(iWJ?u_A`6oD_3r1!nV2G,AET4/*+X[:#KqeEBUGu58tKRJ]S:uAM?/l#*WmF%TU#Xn0GM7;@2h!W
%0Et:-8f=*8`V>GGO[W_,NosmZ-OiFT(57X=]<7BO5V=m(.H+($(Z5gE<Aq@RBL.C9E$>fI]D"#Y[LKa_FIVj!aDacPPMfbN7*A"a
%$o&u_Va"Jf@0sk5H+X\r.1jcO9!7N5ri4`+&8l8LBJ-t^3P5"=o7NBlXSJ#+I%L*O)'S(R68"1_o/jrh?6RU0-D$q8Z/7O9QcnY/
%jn07iA.`DIZ9H<qbOah9IFXR0AeM8-j@e^!Y4Z*Y\cqLW3uOYL.ufO'Wf7%E`%aV&_?d*?hnl4c_l_"O;Fqo`(6WIDSB*81l[9W<
%@e)jZ`D@eG9O16^G:r>r&ofhuI+NTR29s.D2t-[VWs8=-d6_PW^ja8&o0[,[65(4;$>sK%]-/<tAL5*HM6&3N5e#FrA!S*P.HHCr
%r)/?pEB'hPp[;+&Pp(nsE2sPR;[A_2)5S25'X1>PDCHC@'66c$nd1V:i1GD2.3I;CHW&cmK8m043Fl*FpL/_S%Q3Bt?"[)#(*0o]
%-@2YJ@;7!SP":oFeW`!Fe[Vp[C5LtjL8JQ69J[liS[0c)NbQGQ5`J@:9Tu:YEU'<;GNFtCV/OD7p]0I@[McY%1+Bjo%Z[]Js7FDV
%gWUkr%Zm9H5WW(&gH6Z%%>sPOG)0pV.Wdqn>+ah.:i:4.,ID1#R\n/(=V67?jlGMS05']+VdGNe'I-;l;WNFnA^%6f9SAle,];8U
%X$S"d/\Q1e`:VpX&B@<!h%3*1Ek\ns#E)-B:@/:/U'Cotf5sE!.a%M?LuI^)-;5$TAniN,A/ka+PR#p+d$Z/^Z^#eic93#+YV8j,
%B<<#sS]99!o4qfFfO7XM;1fd*Q-XBH.Fr!;TuNQXqK:h,G@^?@F+>1-fT*=$79uXA<nEb6#XJp<U;lOV+=:J5@@XPKcE:$(X4!Fr
%--n_i@]V&\@T?N*QW%<b^2^=A_NGMA."Go,4bZb5`4IQH`8c`tEa6CDLmrMdas>$"c72I(gnIi(+Ku`fJBAaGC<SS(;3`Hi.%qQ:
%I%6Z]O$bbm;2Z\M!a8d6*?D)&DYU'-X,Kp]<m]S.COiQfRFmE)2$PNBcd[AXq'_OV.!bLY`V/'0c1YnYI<0EA>GU7SSj3,K4aj4'
%ZYroH=6n&s?Up`;\%9:WDh%^u=dmOclZ9F:22aqI>_!5D;JN:MOcQLDQDgfQANbde@'T7Rg]JjNq!g:ls1dOcs$5hP,;]12oO%Wh
%NR",*q2aFlkDa667:fBikQR80SsL5(DnkM7Oik+<<P5qD'tkQoj_fPmWH`/c0t8nOV$=qFKH,gg4<SfY'Me#c;O4Q'$f#.*TL")H
%rOB^:9JN\-D#D/1O]?D5FU`2geHe>q5UlKU\]+6u.+C7nAK/A_U8q$=Hl[^2%BOJ]9_,PQa*h'c:J2&Ne(iP^FO_8#ArAC$HbKu9
%>#E0af4@#BY)]:h2E7r94DdEkcM#`Bp`rY1`g'g]G(o?uam_4S$r:Z!%m<Y;5RNI`H+bXi<k7WQiift+5'^2W$$fQL-I98K/L;p#
%<deQ.'k/[qo!q?X8.+/[EF44C<G-[(W"*[m3P0Q2]/`NQd&]#cc0a_*YEdYJ1g-Gr0CuFMFX1fjZd/9nP.g"LG4V/G:J8,rZd/9n
%P'M+EgH@a'coitKU1Tt`($Y!S<b*s"Z6GJf=ckYHVUr\M6)VmtDR-ht)'r?,-#o;H$!NQ0S)>s_+U4?ca=\.Zrlsh+A9U!-k3_GG
%Y!8')]j^dO,'R[c5,\"D2A,6#3r0N]h5mA9>O5/0GI,8UCq?c\NBQ!ZMDqPM4X92fet>&eWHZsc9%H=gM7IboY(^C&pF"hB3q'p8
%q@i=hX<QQB.f'hI:/]_CQuJ8DT6Tf?-Me*Bm`mA3:?Oe-4kuYUF\9re)HYMRmQ5X!Ump%S;MSKPmV/59G3iZ%FgC_s(adG*56G`Q
%Go(YYfj`RBc9",=I\`R"f$TMBX7t\]NN0iOIX(j.nXL=b:c_$nI"#-K[,TE/Qe*>9qRSeFN/C,%5#S"9cUMS\*W>d!o4Q\M,$$F.
%"]Ju=_dr`:UpO\B4jgWFi160X0;<YohN],MkY>fX)GT)KZbEsR*Z5+hrt$Ca0]fesN8hG-I3F[IKcc33MC\7W0VeZsr)AI?CADaH
%1OZ:@G@C2oO>2N98k8f>Z_oSXnDumK=DlEXWoq_-ia7cG$L`HAlG_?kB5;fVhje"i0".h(her5Qo?jK9H?[)W%o8jLQ^aVMYLXdZ
%)uVkR34Z\,2=EPR]/`*f>]8keI.WaY[o_NUr9rp[pM9WpduuokjKm6@?:(LC2sF&OXNn$2Y(,iK"W&K@JIgr;*,[-Qld:RH*j67"
%o]a<Kp#aNRWuaED2]d-dIbgN"^$X2d\aQda1\pUljJOs&fB93`[o_n1YI7NuY;TH8:Z!A,fY16BGB@oWUR-5S^\@'7U!]!h(Y>"O
%lcJu"\#UR&Z0a=agW,fPT?aVnDskX,qSVuOT=sH+I&ub'S,;d8l>436A[B8Io]T.uHd=R]X79q3j)8c0lh)'plOP'qX6k$'X@7!`
%57**+5A,DSf@_CSY<IBu,=\1dU)_R!gE/QN\p42M_tn,oDR_&'Hd'2&%JB*:GPO6+A>htf?CYA-rq4mPS#^ZR_Yi0aY1lj39_T!#
%k?d!>n:#f^c1S74Fc<uJkcr(/041nXf.Tp$rDm*BqkNBl=c\TZCgNa;/f4P6J$E9tqb1)g/!&8trr&<lCd21,DUlMkPp99g:=-Im
%r0@]tO$%aC`C\pi)o).2`p\s@@siX.fj;AUB4q&7O4T>WZ;k7fgi/KEcRnMcGq\t956:jo&9\!A*pjs<W&#7Yf9`P=M]R%nkgi8$
%8$e+tmk6lkeeSab!q_RaIdXQ0It#=Ahh/?8]W7Yr+4NU"P<\@sIF*a4&%`6I8KZ.gd+or)L<SJg\6Q^s]/b9@4Rmf?p$HM#;is+1
%VRX4m>ePQp^?RL=Iqn+jN(WSV/A8OGI#g:]?`c!=XDoMH;VLA26([4dI+21ZAd\m\F)qH_11.d;IK'/[;*RhVoCEY-5M=LPr:K:"
%&KuVMB_Ba)T#VEVIeo]0l.,FcH@#j5S6kR9g+@XF_fg+oTh":/]6j+L6_fK>f9\^-T<G`%4e/hUXW*&7=8lkRH:!M5/nI$-bP(eg
%2lB`X?e0YVCjbiL0sP`L_a"%IlGIpn\c.*1YW2Na[)W'*e[b(dbH&n<kq6G;?l\[Mml0FC-8)k+ObMiaD^$*TXf_4?&VD7l&+@j&
%ar"*g6'WBg\V'=qZ)Mb,+Nf<dpCpT;f9\"Lm*EG\fR+O#\^&J_[PHHE.itB>f>CWGk]2;.2s>:70%]=*TZ[eU*(d1%p"Sk[qe?oY
%lVA3lgg^UDj5Y8(2WJZp8D:uRkA54Rl4^gRN+D=VMp(j50?u6-oFT=Q\op`XAd>ou@gE:M2UJj_XrR[O>?kL)D:Y&+a>SijLJ?LR
%YYYSI2GghD:prZ')hbYNZ43&cWDL#V<nIB$])6ODG('1Ylcn\KhsnJKqXU=C`5bF5L0S`9SpJaH<=XAU`t/Z+C=lJ,RQ45@!85u-
%'8MV8/"RNbY?,q.#M]!^Mt>i`XZig>YBQj7)?>4^%,gm0<7meq1Cnp$%V`8A[+KP8<+&7d4f$>On74"EJ..470UM+3SuEN]4Q(]o
%FMdjm`L.tPs64oRqX`kp0"Q;B3o+'>p=F-9Mt7oW??#2l'A-5Hqf-H,BSd,c.!O'ELtiSmhtui.6YE8<hQG-VI[rWah>]ube0.$7
%&2OCu6M90HEOL/kqRTH:k/#MshE<lfNSbsc;*',`""%4/Gc]cp4C9I!Q)@+WRpS/5g#E7epKX'Gm`4VC+)kK00cI]imP-Drh`(#,
%H[0K+SW>YQ[#'*>oK%6"@!e[p?_>6JSeg>LhFA?Rjr5N&O+.Y^S2n_h++s,PUcEXFeC-H;jJbcZ_\$k*&TAch48L2[Sto1>a@(YS
%FE9g(Zf-'67ur$U>]8k?OS&ffpL*?Rp@gT!ld3t6lZ9eoTq;qKB-)4"Gpe$eLY[_Q59m>GfAuG3i`!b[%VN]hbjjU.bFp`4i;hDZ
%3BiUpFmoh1iuAq]i*@4Fj&=uta(RcQ)i1m$-@F$o*R7MFk5"eNXZ4H<nH9AF\>96(^mY4^q=BZ0rV,h:+5KL'_l89a7gpbF4O+YS
%>=!BpnerJO%9K;uY-(j?jQ>=Ib<@H(h09?Mrns3q(\$f&HVdL.*8=!"='t@LCPPV2SsFKj7"`O7*#XOFM,&@fH3^&fj5_Y"anU*]
%VFTmr2a`ab6f.Q]R@YYmQ/"]2489hLQ?Sjln"81YSccjt&F%$u(>D^RSK;3m8$dKj\50?S+Ab;Z7XAehkf;<@bN7mW&a^Zq2T&Us
%TDHe";-54;;%N[1Fnd&,c&^!&O%`96fA"dCNfo>`V+!9p8(m+*0=*<dAbOd"9Kdf52LSPD#cTd#o)/IJCAZt4T>M?QE6[9$i8EOq
%*k.?^N^E*n8c![`k@"-'9HV]3K"Oh'cNapBXrD>1=FM6Gj[X(%dlI`5puLQ@HK`BlRAY!4;Qih8cS7u(Ni"k/A!$]h:L0EukNhAD
%07<E.-]o:l60be4a*jI"a)s*+;ZTG]l,035_P`&d456:/qP<pK7Kr1Fk<ohkm'/MKTbFUn(kG%%?;Cl,1D$aB-!n:#WJ?M<I0u@7
%T6^Xn*'Vd8S^r:@d1/I_+)RJer*Fj[B*UOJjC/YTimG_:B79E8+\m?>PQ!O?Zn%PH4?%[%p-3Glra+[^n8T:@K6?li<eo!^HZ\7\
%=QcK8DfGDn[GA"3?`q`,Vu?8bp/`<9J%H9'YljaorG-oEOh&_aoATZDl?)uB]tO8Wp&6@BcBClF&^kTV=t`nHo&^E(9m2P'jSe"^
%<"GJPiU`uhSN&N+cEZOHl*[`*IWtG2[1@b2o]X6@88rtelM:U72@jZ6]tRaTJ+$f)ID+<jc>=\Ic6$tb=6I?$IbQ.LUl4q]FkLid
%nstilV&ik1lCs?,GO^JU?B6Q2C&OnF;4%.iR#8Pj]Qi%@VpK:A[]FdKa]Y8*DnbPB\oGI;Y#db]D*;0qT71q1#BV$CqH0<B?>Os"
%jONMZot0NQOFt&An]d-FXiiT$hE?1.G.+s8r6hWQrmo-T<=bK@m[ALtf@5YHqj61>W1(\?]6W"D[Jg!CC;CQS9lX&?8<ea'cq^27
%&uAAONm2r++AiWj520kB*;j,m$:pCFSN%[#bYq3gT+*gXs*_\W4<FCa+^,on(8Vh`5("p(dpSbC!K5C('1]r&#;"#J76(pFo<bbN
%l;)q!ksaG>SjtpI/4uO0*1J\GfWcj<(=p=jNi.Crl-kKaOl-]PMfK54RUa:co\+8nTGikOQcFMBEA&0c0GDKnET;9jihNsA0jF.C
%;A`0CI.cmh?gI:oml0S(=&6Xk>\'V(LSDr?pg#OY27iOeH8VLglS1qslZX.,iDTiUpX(_/:C.QdV_:O?,ZQ)^H(L!p!WQdWq#)1=
%_r&f!K-'2f*0%LIZTVO-hJ@E!#u>`oqt95hhJ;\VHQT;(+5S4\Gea@k=Q%6beP3@!T+D9UBVNo'b$Y%pD?JWJW@IkXEAZ8&Ej4sQ
%!=a9GLCa'R",BXs:>HdGhd#X(kJp+(L*MH`OUC`bnbq6Uj8]%5qn@i6n)n!T9_tD';=j5'LKta^U_!=+k@#0i+R+N(]KY+K1-TrS
%GWTMX<4q`G7=@=ZH1u?#p%I5<WfJG!Ve2+4k_Qb1U)b5hK*1m&*5G>n?uU&b-TrFh^mu]+3.M5=nDF9^C5FS$4Suc=jW'f)O72]]
%&jQn$hneRS#A?8Qe+ZZi6%dX1LJ0WdI0Z\=;g4@qD-jukIM.Ekp[6/NOFSAf:?hE;@LF+<[SNf)hfu6ZrO+mS^\IKa/tR"<]Y/n9
%:/3P;[mpsu?T@!.it_9nB+gcrmRP`AHgmltbL[l'p[)"-HV_@tB^B-2O:;u25DlU+O^-Yb!'YmR\R'2=#B=MWq.=u^H#rNO0:Rmk
%p!r5lla+nj/m$eu:8u'O2OMboe(J+iMcO3r;/rh44h@knWZL#YeaJuOf2oTTK-o(,mX2*YB7"`5I1G^l>&'dY+5'=DhiO0!!]S]*
%JlCg5[_@hDI[&%TM3s5c]O.94qmq/YTR)\XT<^'.%oD!k[pu^O(]SdldTeFU=o0_1f"iE?`O5CTB#++A#/eVlGkhVN)@S9)4aC#E
%MjRZ"n01mMZG-g&Qbi/H(g[Eab@#Q4$nk+ZGWFYkQT->Y_I,Y">NTEQjJ=7e7r:P<C,*-*1*mBaYp%l?+U6@9CkdI-cSj/u;o>;A
%S*2X=6ahgR6@U$W=1iZ>W<;=AkF8Mj=.>aml!n7]6^EQrAr]5.VScf%6RntN@#h]qZOWQmp1GdD_]+@F9RfCkG`;Xq>:eDMrR-dV
%l*6Q=jNCUX:Z"L8lg9lqI:l)Le6?qlF2d5_NE"7L"kjO7reR&Aa2t]$^\*.9rUtJOXA9pa*#qX2*VQp+Gj9GAqXoX:(%-h"oiY(R
%Hu,]XIm\Y^1MQr7RGFd?%NO3HHpm/6nP%)uUE+uIG+sjiDI0#bq"5l;l[GDg,<.i\gn]&CUD%RtrD6bu`^f?Tl-l212eTg#NcO#e
%FXFP-4G>W?K-b$3A/r')_[_ukK,0$=-Xb'[dtbc&ENm%B@*(AD:-2Q5%[Dt`QAiYCE?phYeBtEaHM_Zm9;*=^ZmV`E]tRaB?EMMf
%^=`'DSb)Sn*#N&]UNGbmJMB<Kdtsu1,O*[6UJ[BTA?a`n^\\5DdkAC48]3PP<i<6CO2OCMXZihQQg=Zq^##@S;)fNh5??[M(GDsM
%=++3(#J0C$c$?L<9C=uAZ9P-(\r#!#Ek7raO+T6k0)G(sMZ]k0Y:hQcoiYaGgLKp;l(gukZ3LilK8/_Y+/;nc`2#V+nt;%TqYC-e
%nu(ep)!bZi$U1+$.(p>G6eAo),U"7La$(qNBcgm2JO@0JFQ(RI?eNm0I.cdMnGp<&Z+g-YF8=;]r-J8&eZK2R@kq^-/qk@!FENdT
%G&.Wlm*HD$AG<n#*2+B7)[tDLKHY]hk5H(K>X+B1k];A?2s>=84u_\HImSRdLV,M.F&,)oH\)g6-`5;aa;8iL)I8D1%1:pacj^?<
%T[4,Th'4=iT1lsufrN*cbU[j9<aa=UY:m?A67m;JdYX2an_CbOPNU9+IdcQq%q#>0m\bta'K3.%s8L?mR("JYIe\?)3ISNrN^bCk
%Ip?7XMB?)T5kR5Y9qFSm7R-nKr7Nt+K7`jms#9_F)J+$hp`$sEhsfo\T^:9mb!o`trp.>*d2>pQj*/hASWoOCj%AWH<7Y20HH/Ht
%>h4Vf,'\#]GDjVaR4`?OYT1pOH_JLpUDM1LH<f4[N0=#FId`a+n%#Gl7n$OFXm9_,Q'mnU_0aY23[lVYWji<QqP%-R3Y^2l]adbe
%pTsQq5ulC+E.%JM^;X+Ikmq!'05%%=Q`II;)O@2t$pPdPPGudA9/X/'DKD3jrdP:@+h-L+XSDaNHNVSnV/L--/dpn?'P?Se5'T,:
%rp8N]mU8(T"\m=_>1I1bEg*//7:*kf`s)HrWlJ+?<^r.!>Vuahe'u8Xe74]CRZ$Z`&Il$C8i6tS+;aE2/ttWaWi@*dok/DWOR)T_
%f<U9A_;ke]i4c&R<n0d8>EGQ"0?C*5FXXC7H^u]Yh-Q0]X'4M!c^Q!kD?m/>802#r[4fCf&T3.+8kW\sj!#AlUe(%M6Hq4Ukl@$O
%en8RH:=6Q/]h[lf8kM%e\hTjt&bdNQR<tB]:MVed*a$_fp;?K75O`jmna-'-48STUd?"<a"`pAQGs^-,kc<mgp;g\BlCsR^aG[=/
%<EtP/PE5=*$gY(*L*s`V28I#hFld3tP_[3kMVqK3F/?k.6@ILQ]Wl_PG'A!dCd>=!XlN^UhR9FZ$N3H#c.9UJO"e._F:BXQWU%PH
%Zq"rPPcTdhQ(K3?J`4h8/Cd/&Zo)^kFTT&2%s/$,A"?b9J3f(R8n4k/.n,folGn,-Mf=/``eCShI'5A:=IjUl4h]kXVmh$rO;DD"
%9b6kA2s%6a;kNZ5F)qLI7DY;KKpVnIZ`qDf_ITgdXU8)pATb'/<UjPmbiG4i`WA_51,mmr"u;M+1bg@[Wf"Bd?mB>)S-g'EcEd\4
%!"/D?O+i&aX9TY1Ho\7I=]&<G!8L><0N6Z0deF[U:>YYT>N?,p;ruDnC"D_Ii+_'RdjWqMXr@oFZhMQlOD1mrWVr#^T:Q&1"3t&i
%WBmE1#ssB]]=82n4lGYrG=R/YqVpePp$'HW),(Ng^3B)Ho%eV7rm_>sn1VFuo]^2_jVK\KhnQn8I)hl$UHmP(S6c'"IPpr,IKcj&
%H1fqfqGhdS]++f#Fbun-=%n(d(":s`4BA$Z/!;_fY#RHDTg?kcU9)VJ3f<]jgKg!F_Ys,diZ&0_93$AOq:GK@g\'[op$!2!c$rr7
%cf>4U58HKMX=GB,MuQaOSS_(,4@=UVadOikoulsOl2'N+l5Z,-(RLVt^TZIT(SYh9GCKj,r.h=G=t8Dke`4Zh0=IpRcIY;XMW<Gs
%c$[hRf:+SDb!(*9\"A^/h-XJW:R7]Qh'<3,7<FOglGq$1ldb7S&WFWRh9*d2FrZn'TfsCrUXPJWC5oFf+u?)?rBi#NX4E;$QBNh"
%*DYB/(2o)ceBF/74=^X7A'dFErF;2n@:K212Gq$K+$.#"s/>e[+6MVJ+/Yt8;8rB%;mdhJUFO\XBTLepr<)/(XX]FLSH`OqV9>DJ
%#Wu7ZEE3+$hkLbDj&/siV1Daq,dc7&JjAcu6Nt$N':UJmNDEO(fG6``HfuTpP<A4\5o(9MBGBQ/MU]?aBL#_N??rM9"tpU;-JWA.
%3*2\fWlDA`:h@dA_/@Id/=.i'O<M2<<]4#%j!1Z@$.Xt5q,jC[H]eIO,":#mDS5Q3%(8`1d>ZNp-+">#`H"nF4^WujWZ:b+!AYnF
%_He6H^%J/VTOo'\i'(o"K5!'r"+L=99@kZh;e[m2r_mRY?>cgW^e3Alb0-Hj%*Hbd]F;s+I?bUcT:#5GC34;h?N+'g"b^SK[,-Z&
%Mj2gBoU_ei%P!L`dit5@@\<q%p=tc5%1NP+'Ao7cjDK9:L7/MD1:Q@)#J("XF9Y,RQq>C5cFSWK7Dg#8MNV2"4XnF*c:b#Z1uZTW
%/-A(L[!Vts>/ti<g*:lEMS=t?(-M&0H1:GA%qZie17=Hsp/"uc=;_:drW/NBHcCK\?636r;1nR_BC4f$IJWYP:gXG"APc_<ojps,
%#2dV^HT<MI7=!me*@8eeU)/f`i+UeFPkn]A$Sj`ae\UtmBNj\JBfu8&3m@"`G('r7q/tu3#[8GF\4#3XemS(g^0Au!'QmocDti&O
%m@X8qHn?NN%YFU$aFbUb]tG?^&;))i#kETj57$h4+?p/&LF1+>Gm5_f?,OQfns5?0UI`!@E\?EE&^?hdD1^j_].>_&goAg1n)T60
%_$IOt.ta3=OH9ie'uq>P9\g3"3/K6`eQD(K_X8>2DhSc>-tUTh[e"jG0Q+56pMfWjn@33$`t>[1-ZGM:m`)IAW?uu=Y`JKK&$C[R
%@l[#<jo8Xorj+0#l-G"!EXW;u&8XPo.>+5_LZp6TYk\iH^AEI'1"\SrCEj-Dc`qIYiZJN9VSVE^.W3fkFp=FG@:9L2rD[L,3Q6>8
%_Kok5[N4,H`Y$rb<ugV0U1j"u0,I5[_DL'FDNC@^IOkt9?'_M\fKV::]R/-=5h-]<b_Hc$h7CUHouk>9V@1T>DdKIEd[Q^=`Q>D8
%D%:mXfIC8o-*F-YaJ:&<X*lIRBknj,\s0X:+g>]t.W9(Gd&NJ&W#Q1rlWM@tJVDg`KTX*A6u\eq$VTLp=ka:#()C)ECQe:?R$<I8
%$Xb=r9*U(uX;W:rRL?Z\W#So1SnhKp:l-d*Ap-fW?03(a.u:?4'Xb&U[o<I:Z;;kYU0VARj(=BEJSCHj[8cABK![gYM#GQIB%^TX
%#E(-o4%PFM&WMQt6l2W)Z8$5nDT4$H9KL6uo?1Z*5b]a$8Q"HjM-kO.WV#<m[_<s7>6,olONDTl$4RA8]AB6XXXKVsU[(EMN?utU
%5I757/t^%+`9XI76Z4Bn_OAt$DGJJT<0!9tP#V^_[*o53+9h,#L/a+ln@Y4@#2eljahX@m\r*Nm#u$[r@>pWd`mbaGXPgR0h7+>h
%G\3bu=OpgfBSq\TkHVJ'E]!h)2Fbiqb4<]ra3'WGW7]SEKjeiO.X*a<jgb8iLoT'l1+\`[4EkWe/XH>7'l`]_IXog#euJp67l8B5
%[1sDZK_WDaX'$gpUHM1cOPQKuHe;BA#/4't.Wj$nP*,hZ9SXfZ,$3<sEQ`=me3uF>csTcdNO`i.[FpQt\6nRTc,khtkRQ.aPk\=@
%5h7@TC';Mdaico'\RgiGXo>ahJ%]aj.V;ZOO3F`IXH@-XmBFb(dSgf]TEX']J1d1_qP%%['=ZDhmKN&T*E<+,WpmL5hTZd>?p[#\
%d#H<8kb7q9+pV"AHP\T5dVKp1Kt*=c'dkkL($e2aNmu84?p+U3/k0iMW]F,tnNDBJpIoH2h=pT\@hh3B\7b7'PAal7kkidcg+:\D
%%PEa`fjFgkE1S4P[ScmULE^61>i_!k.I\Ns39r=YQGBeV2Uq^AeDkW0"Aq>9U?l,R&*5I^Fu2HpYX^qoFMVJT$["Tb/@.%1Tr;'B
%c%+TZM=?QV$K*#K--hZ3'iiuS_L7Jk`[o&t/\1bmSp7?rLVfE[NhuLd`eD,[?))i5#oMu778<C`40;q"]Q:3U1(%/MWC/8.$k;R&
%XI):WkpgdL=M$(GFY:=c\RBS9N!o,6bLMd"`L:tLRI=<]m+..-!rU3(_Mh<oWLT5C'kP[kc'GAq_P3^.dqHYA*<!otYWPSr_GY^D
%@*Sd)1jh-]/EPNi/t"l=O>3NNFm^;@;Q\.a)?<<K75h5lYH#b&S>1,i84ULJM(=f//4_Kah71!4CVtc29sc+$JlKOf`@dp*9POP3
%=BNc.R:Z::c;@mUPKd*6VhNK)<VW[0Puh3,=)0?a(0^9?.1HrI*+VhbE*!.C+2_\Bi7>=l12(QJ_BQ58("V)@((#"ur&TBm))C)b
%)"sIY"&+e+99H+[<>SP8BT45Ci`Dgh'inL<;[osoMLmcL#]j.j2o@lsN?Sr/K*7C&.oghd0taR/!n8h]%&JL=b%9]lg9NP":HOa\
%Lu'GY"XT@%)7?"%*7U/\AK37#\D0)j%N^]nqNk2-)o:ab7R)#NYUq7LTLLA3>dcos[@op>/md_]bp@'J['m-m\7]C^b(`Tr/VOI=
%7r9jd!dAB_=MnJ>]a3^J7pG'r#OQ!L-Tk/r]G?bEDEnS#X',m(dA=;S_ie&leR1D`<6hQL*WAN/>:>.nC2-8mUN1S_ZJ-e,(5=o7
%[1_3O$>#Y5PW`"+Ash&;a@'!E<1($9.LusueOEh[Nrop?DLp5rJ=jYBGk%\n*rg\/q,<XLW'7f^#h0ZV\i)N0W"<Lj$'.mm/"Sl+
%n-%Ba:,,+<"c?Ed6h3j^>W&MC^<et"8o*IVKCXYZ1TCQbOoD[Dj;pgF65Ek]Uuom@9'!RnrC#b"G8ZP67X;%q0>n4`eT%].D$/3[
%Bo=+C\T0Of1(s[sd^%__kkS,t!88#a&JYWraW*="DpGqoc'iL:\Jh96?n8'Pl(`9,U3Z!<QH,]CPr"U5D0(E/:;)pQ`&I"bC3?il
%ZQ8*"_@o.A)KhX\L,:@jI90NHA^XFB)i*4:%&jk2+h]o%W]"Y$@HJh#.8P^U.M$q<O,HIVZn3<Hd#n*8h,URp[UHUSh#*6XCG3e3
%P7D;+*r;I<4`t8!cjV1D-:<Z0/&RcsURP7b[Aqo7R2:"U4<;kK4S1d!/fLS5[WG&-8)g"4=1+pYL=qT,o0\CU"'bEG+cXW3ha-h;
%<L0PXUqKJV*E"9j&Ys0sS9Iu&2qoI@0jgL^BiH/M*Zc,W;J98qUnK%'bsb^A7C*H0*TQi;<kV<iWNBVQckM14]g.#t60Dk-/j_FI
%#V"L7/\3??S;<MpBGoNQ$eA[[63PJI-a6&$(+=[kC2h^T9URW>K%`J;%2Gn[qu;4W"O5Tab)+'VlaMjo<$$10s%.&,L<@WsQkl!8
%B@BtCRK1L;0:Lu;K6ia%TdCl`E+k^koXcj(<>h'Wh,ok4'G])#ZkkHWYf'j^[m_5l3-.QLW\kn_LS0>=BakdQ&i:!r=I$?e/(%S_
%\[aN0K2ubn$O\=IWiS+<DT48b]?0ITp<r`@'":FnW_$Wie6Fi.lp\89c#<M>^Cn+IM$MCcFhHdWY!o<eb(JMHP-;rUJp%27VCuEb
%/!X`^A(#q@^s:Pk_?puE*W`5`fV9t*q%g('^Mr9i_M(F&O#(O_6C=c&01T^c'l2r0ZY4ooWXueC4f5,fdgXqCTm;7@!kGLD-VmVG
%o3FaAbaP:08im)H]^J2'io4uirU+i_"r^[1UX!kN-/r9lc=jN'+DqL_c,hH#US"]Z=(kV)`*.7SeW%EI\lO/\-'W15!YhE:>#:ON
%_HCAR)l1j8&G!-XNLS=I6MijE2C_DS&=&"T8(E?s[E%5_p'C"beo804AG!(Q#5dR[gTKG8cUT@Xl1sVUWP5?NdZV2$/\_ALCTJAT
%ab0LD/[&pAgI>"*BHbXA#TatP>2BXj`skn!>70Oh$M?f@rh3fE&*4SL`>d`M6uSJBX7XNJOKH(-L#M0iO073>Nh?#4ZYKH,gn?F]
%cK(6u:%JGRL)>LIPb?BuU9nU5JDGgm&sSc`S6+uIM*o*U7Ht1^H)Mak:;O'gS)>V5:="+^;4sG(8@nj_acPoqjJ:srF[jN,V#btG
%[!@b<CPE)*EaEaYD%YJ/=DcV?6un(FCVN!.]ZAe"PuMOM0/jXo(\sn1k%%tf)efc4/G8cFj21TUEOg"&>\V]ep'Alg7[DbcK<d7D
%%,-/P$-S&HgI>1S4#DR,S4#$#\2W1G&;G5^LLadf<jd!LU:30.<#_!M97\oB60AYG[$ED4fbbJYp)HpKWj&l5D^XRM"Sd-DMq\uP
%&=)i^0,3aQp8Wg52p,G>PB(+a7ZW]n@6etl1!3JZFd4Fdk?GI,5X1'/B3]:Y(q1Y@pC3.`jaOVKT-?In&'GO5TJBuc[S3YSX?KW=
%Wt0od2V#MDjCLksb[;pTj!'15:RZk,`&G_9fN0".2Wi#GqZb*kg2b^0GS?pj(:sI;K3"CMXT=(aFJ&_jNIIM:GpkEYKTF83Pfud5
%Bs1/I:1r<O^_7S>IA,i'\^i+@fjM$0q>[1(UI&[Iph"q7!E)TT8ub<V[hA)P\%rd`(B?BR\iFjaWjY&#4W1:UHe<jHj&3r,^N=<%
%]sWj0&=fXJROA)hXiPQq0Kd[+KQ8IoJ2RdY#F<"GV\M6e;6abLLu?B\Tso#P"abNiRgWl4N2mDAdY:\=j,ig[!n^RYADT<bg>E=7
%#2eA&k,<'hg@dKg`#O?.#2Gr9p`4Y?g0;+C'kKF#-\MN$ZVoS5jNr;+/4XB(/6h`kkMF-/i@D,pb?ti^.L`=GW@PY"F_jAu`79T/
%'0B3hEm)h7Ug!D_f!S6,i!TFi8;!\,UTT;cgZ.c7dt0P3PKDs,DgZof_jXG&-ff'eCBc;@L5\Ia]1+db&;d"s5o>QSK3?Jln&d4m
%=%K%ZfGfS3`A]#M1!OH]Tkf;TQFl_)WsYQS!Y$lq9&&82"):4hJ)TOgbG!Y`3'>-dTJKa8Ju?T$EUD;QIp/&7`A6lg\^5K8cjg2_
%)UERnH0.hR$H"oL/#$>mjt;>&1,4kW5=laUFc()A;+'GVUY8NmD=BE9EfY\UeH0#QX:[p=O?sK%E".hFNk=YYD2lGcYT6i:V65OB
%a;`af6Fj#Y2G)A6V^?b\5u[<cApH77-+c0G"'-`&Jq9%aN(g,$Eq3DD6>q2$]Pli".k"B.;/I_G2Olh6.clI-ea-9FeKQgskCCFr
%#$6'7>TD2Mph&Ek\D#Ln4:J+g-)&\Ge*riKbiEL8,m#j!$IL2/[PlG1iQEI8DXDjAPg,,Y#u\L>C_7D.qN>L%8oIb,ZPQ)Cohal+
%i2q9&%Pe3!N_ZSXje0\C8:\(`'qRJ<[kuap*-]Y/gGKHOZ@-,M-m<U$3b^00$Y+dP=^pL,MpR#=-rt(<m0GX+BEAlh\1W.K6H2FC
%+?2ltc3Np7ED)hK2kjB8HDe:n^89n&pm"23PRW_TE]V1gLu]]=Mu[T?k`MY)KH([Q-PNo0Ufo)b73s@X]XE8Z6$ZbWC2s#'JoQq>
%!A);AnM47&`CIt:nId7$V48ph!s1&Q""H--mR#.'4Hhia_X(l0$C8%9ppa!c7Dm,bP+ZWg*3cP"(T4m_oMiZs='8g,&ulUUF9k7;
%F$c'mc)J=_FapV,AC@1ToaaQsYS)FN@?s1P1/]4a"bhb29EYb,r^A,e&Y+gZ_aOSM(S;:t4p6i^7=8[o;Vps"6=UTi!'/@bZaC8l
%b/pB6cDh:-^HJ133Q_p\Jas5$T?uHBr[)JuEfj3U%,F,7h.AFHQ^.12K;REW=WiZI=Va%WpQ,6aeN?$-1uR6PG_>Z$)2N!g-1l14
%Hr.(sj\K!UCb$djQFP>=OEE[D#!]q>-sTO.Z@Y6.H`sI??<&Q&7)W(8$Oh`B-g.=)'b$aj65?/QK`e1*S:-,>P1%C.Ss^=]Qehn5
%Ll=ZI('HS&Kh%!q;0[E,jtQGQ$)=[D/0$*5!^0R%6W=KG/<m"U$%ut,',;c=*41ERkWeQ]$D"G]'?P&h%Rl#=Z5u)kcGa)2&gl8;
%2(`A&2>sA%*#*4>\grHPZ,[bDB++W<jj1.`;7/Tm7.fdWaR^0e_Ou3dH!Ye2Z-b=bL"::#Ji+COY<Z/Oa]2>QXQ$T;."KHBoR:9A
%45udR;U2P%rG5:K6W=,A'(pT2&K4J38dt@3*^IcGcL9n/gi/ka)Uf0kDpr[1fe=0H)/S/n:8.X/!iNX0$$(6XfOH70AV47HcJq8G
%0Us<Xh@\!PT->=)Y4I<cN'MnCB(Ko8@q6G^oUt(XKaWHu+9LCjH'U1i_*Wn=UOQMKh?N!raJY*?TV,:-bW.0VDidWUVj;9X1=ir`
%"mACkO`C`c:s-o8-kW]e6X"ToTUnSA&L9WZMMh4Om13=8pk-6Ki?7Wm2Bmo*<T[$lA/mg"+tDmc%>.k?(,7u75r#/<M.aYe1ao.T
%D*s:`9MXuc\-KQrhXYF$>Wui&=2^(aIak-eW5te8?RSS"\/>?oaTc1n5WTVdk?7m\^oaUcRg_XTH+#Cc-u5;t>tU]r)NT_+ObB>@
%#-IM4Wgq<eK9Tt*$lD%jJ^+6[X$@$3%Bkm9iS`:#=i`\=gO:hf>dIp$V\3m&kF0!JHU(]UMIA"M-G&4jp1lC^9I32]!Lk=h:;<mR
%3lCSZ%mch*4d3oZSsh,Mk%uQdY[,c[(CaOVPFM\d#Lc8KcD:lrg-E+n4bu%(Se5e`J3%5+%\$?ERB[AK`.cD@Ts-q0MA1*`[]pg>
%jAkGr,=2_oD-'JuW`aG]8@)QKT1Ddn1#PKo._+[ZnV9EXc=:@seK<h,NMDr1A]u:h]MP1bC(>5,&kf*NhBk+82.A\1iNtN\Ul8t4
%`[r*5#9kbR*!Ti.9i#9+2PITV,#fP1d[lB/X*Ej_jW%N[8QBY5.4f-L!=df\";?!=<E1bf3e:GQjB\SK(sH$"K'+kRQ9[Zgi]oXP
%[KV?t&uV]Tm3g6ue8\>`dRa<-N\;?J/0>c=ZEkfl,U#dTLeSA*UcXC\kk/?7oZ1c`nLIa:+_.YC8p%]]g_4^^C#:gIrZql'6,oiY
%gK/jP(9IoST]b-S167\]nb+Rp66;1BYdMLg'J@'8a[MI^.b5p[<QX_3,348_<=._tZlT?_3;^Y"$5QP$^`5?>Kjq-&Tj1>V;";LQ
%j29G=WZcq_V&D*+&Wr5I8=fPj=9uKMrtF,'cjo/Sl_JA1Zk=W%k:VG`'311q#:JR7'1*"L;B2q8N>9"IAl7&H.5uk\,WCp0M3i(V
%CC\a'RcmI@KI:;@VY*elV'8pF^`4T==jn:1E=ZL"+D(iO"<q_;C)cW\_9?t)'qCHG"9tl6f:TB1eL80J(ifqj+_VYM`7W^/]1d\%
%7-"`C!J6BPX"^tR"1?E?G62IoB"Ra'65?0m_HIim"t-9)b$1DBG_+.GMfnZ;0%2#?nA(3K-6X5>j-s^T1bNe\f!.;8Y>:)02-Md@
%QHU)WBG#QC1D&"W6<:\R6ln'36MR2t`_EsJDuE/`"fKP;S2Z/FWFBX<?B__nE$Df=.pEJDEfYFi@@'$nFC$I&m\N<.<(Hui/gR3L
%g_jq[R&DBVS%'+"Z=3M^HZNu_$4Uotlp]lCT.,I%$/Og^'fR4<(aMs*\hPJ#3HJeX$jOUOj\pr6(8D)2!R*;8-s^@9'$Z6-&4<HX
%MDp`digI-FK5ScP%kti39:#p+fWq6>)=<&`d^clCBS<?*:*`7Zrh4/),s&;+9P%(<K_e"-#-eoJdd34B5mPhK@KJjsG:Flrb`?1+
%b/1-E%eZFR"Gu8q1#/_Lf,=`hd'2*sopf9WQnJlVWo=k/gtiq&D\U?nBO`5dV;KaaZ65mG`/$u?1*L)pr[nqKQOM?+.]:/VCcXkD
%FMW6=3C@=!_F2N0o;m0B)<mHnHE;e!_n^r.,G',O<9iE:`gdo=R$7n#DPe\u%M+[7bsRiC7>>63n9IR\A2oREauLN6$T7,D^n_q_
%]oV_V_%n-S%4ac/(ghohr5uN['pA/26T9_>JLC`tA.h&a*IY<TaM:afZ"2',gGEt'O[TtG@hk,+"C!ma/sVckF.L^qOM[I)6-RSl
%I1<S.Rh<4=;*CI1f/0_FMB>?CGSWjSqEfp_Oo/C(E=\HDoY?%]IY6==@4KWtM)bR_<"+`)E6sNC/'88s>.-,Y_$oodihXH,=WAR%
%"@/<MS$'=8$n*N"C^^OUCb\N(W2O[%TQdgB>t!'j2YlIUog$=<ftN+K<9,3TL!]MCNlMcp1$HWu7qgVX5TK1f+s''UEmP[!*lKha
%UV3HL=OnEgc)aXSPDBr;7]ZEY7!tnX4BC_]KuLD$"ZZN"LEE3Ya+6P:E`5TE';/+.U)4TgcXCW7/\*D(n=%eTNLR>k4ebP9OaDQ(
%WbSGuBnt@5Pla%LCkrN6@'^Q=3d[8OfAE*?f2^Q_#(%adaZpB^JZSGM;q]ks'"2G/4t&o]g/?".#36cQ_l:;:*#Tu1.8^I"k,ClY
%EX?_7\[-sJ\u(5kabi4D\H[&;N`Fd*FjMa,<QfY%)i9_rq=*XN+0M-ec5e3PcVU3^6i<<U[(S#.fU"fZ9tssfr;+DqJ9QmEqsNRh
%B'<J86K^O=g(OSiF37M*88_^hH74PClZ.A^+AH!r1':cdM[;i8/q!p=MGZ?WS3OS&o.RSQ%>CqohXBULaWK\d@QK(7l=bf#oR`>b
%35.E=W4"i!]L@![NZZ#^n\^]7fGL6PDD"^nOlii2)gtJdPo6`0pb6!Tm/I[A4DB4-?lX510HSE&^MmM7bkNMfG($)aW*L>0XRORe
%cu)GG_Gg*>!Xu.Me/A>qAu(mc=E37`$@6s,Vmn]H5pojM0Yi/"?(YB)a[,@cUn]a"PRbQ5f.NmDjiSbJ:`BnVC%lq^@l.NeaSOWd
%@H2n_4/CtS?1C1"`3a*lZXUhEW7)1:T_!k0hb?Of7or2XPu0KN*-b:#:38b!W$.!)b(7rU#I[R-A8*0f6"c["48SO-L87V4k<k<W
%lN2-$J#e_d$T4dn`,5J6",^HW^0R::]fsImG#$qtGD$ahq-9I_%+[fH8nYE/1"Mh.LuEkUKubCN1&$4dW).+ZMD?W_5mkqPX+`$_
%MnohJjs"+X"qe7g.-5R\4&u4J`^OKKDFD4d5:.i'6<n.Ooo5$5PYT6Ek+Z#A)!s?OJ7CB$@k9$(RIFG5<-I.r'F;,q:e(Wic.NBa
%1YPTWc=.0q)#iOt.IcYr`o9JFqsB7d:8CVoC$W2<TAJPcUq_c?f/OELj<Mku5f\)!>)"[;N3a@@:ha3H`9BoM(18%7$8\OB;G6Fb
%lWhH+F8_4#NBt8*>*61V8@o2mQP?/3?IiI3c#_2/aAiuq0LrSE``afPf1P"&0.hXLL]GWMBp3)5TA3r9_U,$Q[.Z2m:utFK.@e]C
%p61P'9m0_Yp4$%?RIn@^[dp9I[)+[0PJ17A"%@o808c^GcF"^nFG-O!gR;*Xmm3J0dTN%;(.P3jCj#K>\1j=b?g8RP="0\VO&:g1
%\M;eO[$mk?NkkG477p'[DSfS;Smi=I#]6r_'T4Z#BJ.,n3p4HBcs'_9MZD"#QttN]EN>AWZAM8d4^pS=XNB(]'Ip9%;cN(>0.5k<
%GDY4%9krP?-%X'[/a;EGVau^-0$,<OPBh%F.uLp36J:GP<TC+pmm+lqEFb&DG(Z#CZS"-DJLB0)_/@TLbfMSd[A8UMo>oG8jfDD>
%CpO0DE.s.kYn/'s5+-3+'DDI4pSV;6,g.)Sr-n(Ap4&1Y'/iB\Al[Di^d\E6Ci!UsZe`&$!b?t;20A<D+7='^nO-p=+:3V2HhVOK
%qjt,h*urEX1?OD:b()h/E\]Xg6rYANO:<,<>Z#qR%O`Qplm,H*fGJheA%nh')`@rFXWW8Y(7Pc%gX\1klIZ&@*DunD%O+XP(7*9^
%HZ>dXPq?6p+O]s=P5U.^:T9un&8b/hDY!brcdii8>6nNnre_.jkqk6`LNm+@@[E\e0*:`C.u!O'0DT!]2Q3pA_'F1kpQ7E^#2`(j
%@Ul4B;[RT`B#+<OEmSX-fq>lm:#hm1WI6N/bi-WRGLs.i3AP;lg=T`3.faW@bb-@XkF:u:62CDg;`K[+3"#"B-45`0a.8s]%@[A+
%Vj'KR`Fabb[Pa%sqB`Y^;Ss35%!J.iee6lG1k(OKTJ&L7/9tm&[769^'McL#.!#gTn,&+YlGiVi>8aia#b:!dFh"#QQPmp^1%L&P
%9F\/8$Kq/DETP!7=<`1N5A0?obfM8lrQ328qjpCob/G<I@8jE6+m1t"1KSRA+^W"9..+g>[T9mL[GeHa<k&jhKED\WA2Te$o1h3.
%N:4uSSM1Lo^S4CQF='S1:A?/oN.r9noB(4kb^j-oYh4/I"t^:C?MBX0h`l9>9?GB/aQt^'0RB;[bp`h4TMCBkSI$\^ZPJuO@5]q_
%iU?S/g%TnKlj!oikeB6+6MaXKR\h0)7%?X$+]8ps_$(d'0*3F_-7f4(Gtf?5B-a=p3#bPc_qBE'cFpRXD34?!I!LGpE3=a>:LL(f
%(P(rHWXP+E2*[H@Fd:7=I_W=AKfQ^fOb^!!-I78g*\sja`CB@e9=u$qiXlnCGuHmK?pH2JQAjF"E4L#KA"C?IF*Ud[-k_G%*ut(Y
%Ze,3/m.`UGfp8tO7H>i+oRR9c&1.$Z,OV)FCKmT,n;n*oO,d%.()Y/l,)qJI.#d^r@8a,`@ZDYZ^$(]3Lal(@FV!/5f;8luB?sii
%Z>?13hN4H&5Sn^lKA9ArK3cbAq(G!/`'#jY\MR*"J1qf0&H=b0cD4Z8+s5qs!`^#@E?!A))I++QmS`0Y'M^B(qH5NO15/u-F=t6g
%%QAJNQlTB8E_FXf(5/MU/540LnEPe=n?1=V4Jr8JK7?-W)ME/'kiG&k'-OpcI)d*Il1h_94u03ee=7p$?h5A:Uk1gpK(t+LHZO\d
%*)(d+oC)Jt77]e=g='[$"-S(8Oae/$oO-_J9YbY')t>NWJV;r23(ba],Y^?ip+mIt:I<742qjOHn9Y!lHPkPPJWAKI62E3ROFD6d
%@62_._=?3:F?P"k?p7i88MtsU.Xi+.bW?2N41SFQo:P:0CYO=+or&2lc30Z<kYeo#YC[S2nLkbEpQ9NER5<(#$_Dbj3sklXNTtI`
%qcWg=,ah1NpCaIQP8%H_QC3?n']Fb0ac1?Z4?q-KA#dFi1dMFjs0*4t8kgA&gr3(gT'Y]+c!S7_QTGM'^dH0k(U#"?[]$;Wd;o8U
%n(;usn8(*3EOUQ3L'tokdfRU&`\&lp]?@WG^,7Q^e\q#5[4.-PB,/jU\'+(>PO5noes>,-a%'i9jJf-O^g.9.6]-Tj:[`MjRVrm[
%gk]KW*-%c3dRjSPJI]P2%m_GW(V&(nlp&YjE!"_Y4F\UuZ20@[\cn<Bg)@P@G:>u@BSTJ!\dod]oZ;PMbjitLH3>QgiO%]?BdL$i
%QULXe89tEYkHkLE9t^,_J)kZ6q.^n`^Z_'o*m4e$F<DkPWKQk\'[q@pI-Hdh@3cV#,rW)idO&rbgt(de[eK=7R_4tj(gk;h[msB_
%6+NeJrMfH7Bl%-t/F;!O#;OaCIdjFm(BtQJAC`H>8Z)!<fWF[VSCc9dmTf<fYOU^ogiGD=-_\Jl`i#7Wb@\m8+oCmV`*&T8kn+US
%mPp=?L4&e%Q0j\uc,pUR.%a:<O?CYLp/u2[5CWULpVlgph;*$rrR:Y7"94t.1g_1/A)C="o*qC7#EM5`^HorM.oT?n;L=H`P`d_c
%QJ1HdpfiPp"\RbA[qF0B^7VpefBd]S!Q9rjOsdCn9$e2.q4>ln&p`pD1M3PLWSP2,`.!i8,#Pr_e09I&jCo*,m_MTS7e+ZL^Y""$
%\_%sq2H!+%2*U*6]g5t,O.Ul>ZabI3d)7jqjJt(pC^TcT!]H0?ZY2+:3LCnB\Fba'Hn\ii.A=u;d8?Kca!bG^1uK=`3#2E^YZr(;
%pk^X&.L<o0,hip:8bb>!/nJ8eC0"D`1D3iW(`tUkpdPMj-@^!cg@](>lN!&fO,,'k$<%5Z>\\e7R?ccs>5e&Nrj[/O)P/i?g84E?
%d=e36Fg^UD1!A)^]Dq%@fXQ(Xm`gd=NrR:_VL295M-5JRPh8EInPNYgm!#Gb:!!AggrKY=q]`M.&4Mbr8,\UmeXsiiBXK]:;I'MT
%-c%r$lt%ht`sueLPt$/E-]ei[o@ML@O1G%"WY0HMJK%bHDsD?M;u<ise1C-r''5[o6<`9[h17hecAIXqZnBmmeTW%hIehU5@uHI"
%7TOsF[%A+"g,G0*K@nsllOl=(Y>mnDlhB/+a6A)@4SYbblP%A,c^,Zbr:9$2T#[4Dq!OJ5F8S/?9EL;_rYu6craugoqrQ.c_'O?h
%dCJ!/Q(4cmp[-;;"969ZD!W[oHu:E5@=$/qTVQoI?Rq13$pc)Op;l^Qi8`CNo$^qIpFT9&rQ_^^A=b<#3>QNnh'!"Q(95&sY7sK5
%C.R1\mu'HDCQW@(IN'g9QCE4*6=k(I+UQHVOAi2hCY@=I6;OaMVY/j-OR^@B6;kIj?";c?IiH3Xm76kRAK]n/,,888Cu8E38=FUf
%$g:Te?iI:u$&L%)95YQ>aT:_,>o.LcI]bChD62g1`=Y<$m%1htcRn.WhhgO!\DfRSnq@s/Tf\:io/u(i#3)-A__D=%*qa>oeMb+[
%Xu&44#&b1.-dX*)4U698\_95q(A38PP5T9WFL!N5lB4-:d'562grB4.TG6@3pX3Rp=#90fWU]%W&U@3q]dt!hJIO!t>mM#iE?[%\
%j.]J:qu!AT7IDKh/70V&IW]1:#=<cgTALb"XOYYkrp.k\[]d)HQ!s%9d3NADL)QscgB$]\MY(&^['@7PA%t-$X7><-@D'IYA,?P'
%-McjR%Ni!<[sVY1q+cJ$WS8&gckcAk]s9:*LZ77DSQg#N"lc"+fpadhB&D58ni!9tPC6*XTW6B0NJ1"72W3gI1(gohhq.U^<%B.r
%+IXa'o[@n[^P%&ZY#C")95_Jla^8D.Jb!Ke%Z3M40&?dD3X47QdTK'<J)e\l61aT/(hC@6q"dk/OM=Y'6O<)];$MWl2Mo%2P_8!.
%C\biB1%MRSd'0V[AB1>B/Yj'upD!Z0$%9gbHqd@^dD,XZTaO,t%\#ZUF%`*0RXd#3>7J3HW!s2X>%aK@#aTb&0_"?d?4p1ckgK*d
%,Yd;Vp]uRKr2KQ0\7rp#9jc>4mp;)=W2Auh>^t&@CDU'saY,?0r13=X`tO5nQ!>Xg5SBmS@7K$X#3"HR/gKlI?-OQ)F`lq]7<<E"
%ambim353N^8SuZcb"HSCWOS=+MS9-.rJ=@aRb1X`RH^CQ5e@M!?W6:IR=r1Hg6k@e1XR!-=2-M@!i^(ClTcdg/uM,:$m8lX_9iI@
%UWlEnn<tPmMO5f8iE+%g8YO=SL3PB_hiVXO_'s0W4XFIUSp]GWlMJQ,o.BB`,gPaCYQ2e/mX3)iBK-5%7EB[4kV*UP9?F%r=nR^k
%6Ce^X-.+D:U,m/NL+WJn3\k<OU%c``ffr=Z:RoBDOW;I@F/es*n4)U&Or+AOI]4aIBI8q4]I8<@XP,IsGJS(H1TnGtA"q]O9uJ.H
%JlnV?FZ&\hP=o\'->D;^7\3N5p/G\Odd4=2M]Mh`/@=l4#TYrSrMbJA5HIn?%(OJQ:&hDU[r=Z3n0_7oP!](s]VP$1s8Tr\_u"uF
%F@RN/&C-*F))'+m(`=t%4LQM6#^>;U`!0Oa,,IInCflI96>TnJ[bCK#`g0gAbVId*S"u_I1<bNFSi0r]O-m5mo-Q;cPYMuNSpYa[
%T^b]Qj%TqFC$&hEPNLb0X7?1Ml$22=rr3o*O)$lTS^tG!%-5e`P9m6X99FZqSk;>k4-OWI?F)D\h"SX+(I^Xsi[I2cb6!JkPl3Qc
%#NT?Z2DOGTgi>Z],75EaW8*QBV<(#7I0B*Bj2AM7r2k$YqMCek@6)'`MDrBd$Ah`*%7q,(;U-ue_VKm?TG\_Sffd>B]#^/Frm^;B
%5;kSEE!`6FdOH;E_0_Fl:;,9+4a_(Zf8RaiGqTLOJ9XU:8B"Y:+JcCr"h8!UmOtHHim7k%QGglj^%&\_6HL5&D:6^oqXG6o]@)')
%:<JfFI"aJUc8@,U_7<<eYP`]r0Wuifp4Bam-b\-tcT17(?9K[-nQ1oGs&nKq.k1G;g[%`KGf)*1?T-UIrr)Y<^UH;goL?4_EnS=_
%QI#U%YFhCnn8GT0[bDhOIpX1EV7htucd/t`C4l'G[.LHQCS%m<V&+cZp>Fe-5F1B^HF)An&D(3XG$;?=!F]HJ[+T<):<AVPV;5![
%fs[a[HdSUZT+Z?WN-pCaVgEO5kmcD'P$5S$Wn:>#:5`oe0C8_%9jjHED#g6m:ZKZo`)VP<J+%tf4AMt9O$d(:Elj/-Bh=j$]d<Ef
%O93TOqj9l'')qaP,k@FO$ZPmET9c,CqS2^u?f9^E\p4$2XV]3c>UA8+[@Oa/Y1jS_btaUMLV))4S"3kWRL!#3f4E\@_pk-m:+Opd
%E4Es-7eQbRf,bKUWa_l[m;@-lq3CrPdf)1FkHZ4^R^ClP(H,H0m9Zc;31uu!4_f&b)0KNXF.ZaF%k<k\TWZ9Y*`bngVaLT:k%YAq
%4Nra9muNp>ZgZ]?rb0YCCX;IFq&eE/"5EUn>qAW9HTn:pL^Z7qHF_Ee0!1@O`s]G_k+H4)?hJm:B\XJ2[\`ejZ.geu3-YC:Y3jcD
%^%#mMpYtCmQd0:BCTrt^F?*+Yn$1G\':&TS9eQ#CIpb4G?"?=Hh$3Q*pij>-`a\"!*b&;RHls3g*An'lTCUE>^N4kOc(r<)Y8)>Z
%^$hpcWI@pe9A-4:BicP[$[Z8)8:iWF!j@od]?P5_bQQV>mbr@@I,Vt\F#[tHcC4nK;4m82%c70ia=I8ZYFfuBZgb?kVVV%bq2oI^
%4Z,=2]Dc#Un=OOd8eQf)/Kn!h5sC'&DS<MZ,AB84BC_2sT9A>S7O=RR')e%QheI?Ge+Orq,!hHR=_p(m8=j]PD2VI.I!MAZ);j(X
%Vjg/BqX;\1I=g).Z1'.qq!;UIW3j6k8o8p&\2R%TeMe2G\b5$P59i7i2eo3Q:ll@0]N7nL#Z\ff8j/E:85Po@EC!#qHr;0r;3W<#
%Y,T>mD6<Wp,-1sFM"OS.T4IH@%>-?bk%iWCI6&)k]Y\N@65@u#RO5dpbn"k_75V@0e\r,XnRQl,Eeh7Tl*?1V&Su6BN22<8N(9JI
%cPO@,AtR,<*V+Qt7Wue4F5m.KF=aL$p!#=\QQ+/hf-L/j(IX9Qb@#>JoBRYF^U]+=ke=q.2r.jG$fa2,f1_>>?>(OshTlHP6FDI)
%5nj1Tj*sZ@1]e09_)*k.1WoW;0Ua_Yq`0p$d3uDdE<Ti,DWdt_YnU[iT@h8HATZii,/u2Hp20<i]VgJ5"Cm*0<,Oak#Wuo9+-'V7
%Z`t^k]u;udE[$2d's7:ABXg'1a[-C#lsPRQ:Rk6cMh6&P38fH@cJ<-dOQ\AR*#$`B#lWe/96pP6b:AEm6sa,K'*toXL_IK<KYi/.
%7/Srn2@88WU<SB-#D(ZI,+&FA'Lp$mhUd_.[d+n0hJ.`^9h%tI.+@Pj.GL!_+Pj.t\Zs"J0qu@s)"*CkLfg82_?[>f'Sp.e>#kpc
%,a;hLOeCXu@cY3Qh@)F;GcQ[f(OEaB9'@=^N56OS%2fHI@XVF8)>:9uZjqo8NJh2m56F_HG3dU[R)6_]@A\atE@13"@mg_O7U@*&
%BH^tBU1-7<J3O[:Dg&X.>p0Xpn5]Y#/=-,Uap.W?jWOqX`E1n%_YuNBi>BFuTcHKS5<sfKcc_D_p`#-a%_fYh([:Gi5pdXm>E-UZ
%@gN[IMPi4CJ_@RP"PLWK*^5#8=fQURaN6=bLQZ[Zj?tU@?TOEIHmCA0o*7!4H2]5_79tY>:njRFLkMJcW4(9]a2H:Q62p-k`/fu&
%2GEe4Q%5dG0]<kV#dlecA?i*jd11Lp?=YCsnN\/6[Q4co$,%HjQTtFY<)G7BHk9Im6;I+WZbbBW$s47+Y`j:s6\Xud_-X?6'.3J^
%Iq3jU@7$!B3HA4YpkfNA(5C'3UrYZa#GfBa0%]$B"Brn[J;CM+1!kY'l2^]n/;N]l`j.DKXP@+R/E29.m?LYC3K`bHoGKig8brj.
%*_/6U0g<ch'Bjs,)./oaYs>N^OG+@!p7SbuD`_os"Z&5q)-(E)5i!j&BbX#DIi+p,J=.\n@OBB"oS6Nrg&sHdClnXL$55/sATAQI
%#CA!N6EM+Q+WdOh:$G+A2Niia>t.:+U'I0\JMQm2K%Um>W`\F$+HZ'7)P=e5$*!.mI"o?^dR\D9bBI^TC7g+;@_J$?QmB^0,;mCi
%@4W'$KKC9F1+[Z%*C+mQ;H"56#V'GoT,An"EJP-mUqfeXY>F3&-Q+?Jaq7_jCRLPl/r/QlW":4e36$`$3'SP:0ri*<5/rCTDi)7^
%=#oF76rMcJ)8eWGBZG/e,72r:L2D:i*h5'6-`-j%92D%j;>X\FPV5M;-2]j6D`3G.FE-K3-@F\<pJ<GGIbd$K_'cd6RctlI*P>f6
%jN:>9ZV/oXf,lnDLnZ`<=,rPa.g%Ej292J8ml006E87lhW79eDs*i%Kp8N-gUXL=TO@8t4SE@0snRBAk_C,ue'b<qnl,8_:s6f9M
%aZl;_#/t6e@a6MI,M95'5aDu<QA0pa"YnVmY%J['l2Nbr%jm$^82?UC&%1T@,'[5p)goS$ZUBe?l$^%BaZo-j&b@)\pa@LT9bO[4
%$OgZ]+K8j\6tCs*X-Fh+^OdrUIj*K#q*V$?+2q9'Y`7ec@bGM%8_MTIDJbSe\=kbf:%j/%^Y-uVZW]pH\?a?45%ZTAd4om&eOj79
%`JH?*rhPG#L8?,oN.dH.).pUqT,@?t/0_R9aZnS-O_@P!6)'lg-_\[HW58YPXOG:*La5P+MbOh^s5tfN$eSL132cdgmO?8'ql6E'
%rSWftDp?eMX_[Kge7e@(1BO!1b\=s2aM]T]\77=V7(SD[:FWlKq#=8?O:<+UEuk;*k`S]p(op1/@nerK%cn,jUgV&nIVP;:]JW72
%6"%A`Hj<N=Xh\Z=aOpc$7SS_/Cb8]I;9mfL6oD&SnZHgBM^Z-cb;En?Q^a)E0<ul16fUX5\?9FGc/mat)$OS6COU^]j?Iq6p7C`Z
%q9=Npm_-oM@.;911t-<+e*e>\4"Q6j:JOFa6"#OB8!,2^<k=U6$D'1M_N`9/)g8]V7DmQ@fCu*UFumN<0f1j1F-AM30SNB*Pf$>t
%^[,[6T,&Jl]#RWe$W$X%KVm2@^csDe2Lk*)3o#TW&+n=;FaX*/]^'gr*VW<`s(Q](ZrAY@8$ZjUDOlfjCc*P^h7Ksm\'mDX?J2?.
%3.In$@ud:kc7X$'X^:`,^YssaLhD)r5&#5i9#Ab9"u>A<bMmZ-M;#ni(N1WVV=oT)S@58e7_^fEDtc_\k(p3E/j$k-%qm]UmB`AH
%rM0'45Hg:erdEYj;1in11`CHGa]NKgi8s63d/7+'q28k,[;2=V\jqBrD^)+HI`?k,=ZUog:2fq'fB-JNP.P[uDu4=V4&-aTLZ'Ng
%Oi>PY04nE@r@akEfC-,NK;EJ#Fk/af(7JLWV&s0!LRm96/Qc:kP=.5(mEp"3br%DJDuNfN`LfYXRZE^!Tq[0CP&#'WF\_f5S.NDA
%-p7:tqI0JBIggqL5$R(+W.4dKLqis>M*;b7OaVon,sJt*V>_K_6OWb<f(6Yqb/<8sIK96D#>"D/$4d)Kc5m_>p_Kd0A\.flYBT%l
%LsRanA`R%1<VuXk>5S0p#MGI6E4\/kY2%TB]5r"=/W#lRr?4'9n>B]HX#KfXk6Mg$f@Z^4q*SsOXYIP3?\eRl=W0Bhj3`cNLE,&a
%D/m/9%qASC[+t,2#H`.Y23<<Ui;=[:(qgeO(D&Q@%Sk_&1,fd:(ueK6f-#n6:-SmW05PKDDY==uc-%A2@HY\%DL69eih#bds-H%Z
%=3HQMT\18j1hjnZp!d-L_[f$O=7SYd59+!JGIHTt@p?^U&,/j]a.qHK8]]c]."/,A&$],O_Q,TL)kYaZh>Z>Yr^3j]&$\F^?$Vl/
%S^D.un3(DEdGp#7-nX`ZGWb&"[&t1nZ@cod"Sn2/oC(=SY0RW`Dsp:igDl:NHgRSJlZrTVI.Mj/%Qh@)GC7oC2_RXeT7:jIP?n/B
%3ut^6h.GuA;>>P1+(C!52`LP^Y/@$t\>[KcoNHUd2ub&pHM)"GqTlloO2VV/OBi@mh/<8Ep>B(p8CV=Zm+9tZ,s?a6I4l#`h)8UR
%]FHM(+Af>Ymo)6Q])=:m$.f`5_i9.)>LtZ(d^DA6+JAs.4[A60muAOg2g6RYh<Q$!s-.s%BsEl-dA+/-&MO0&Y3N%V_r&(p@Z]`-
%=Akbb\F\!qpd*UUC15$?hgUB(S@;#5UZSNN(G$p/du1b^A;ct\-.6k:$co8a-`,s5FP(LAN_6FD3M]!SRcta$JuX.'pM4i[ht^&C
%nOTaqenqmW&;5M'>@b1JlF'TeZn.-6COC[<-HHV[[0NPa6$q6*Q#ahc\1\Y*]#Kmc*G2X2"s6gU[&s2-[Y*)JcTf@L8e-?IZQ;^*
%rchC')>(rcPA%b!ce?:cdN4l]QCCKnm:!akc?VsI%,R[ibu's2gu^qm$13f$oAMc76g(C)b`:^UZk^$9/c!A1F?s-B@aS8;IPPT7
%'Rh@*o8Q`N*D?rq?e_E0p:j+oNMFdtH._A)7P:h[jITeJU8jbrmpt39BpX#?(]!ZBj!U[]jos/fY]E"rk+<$R;Pej+:it)IR\G]2
%k4!1"2SA77-=P/:a6DL&Xo%=V;fR/h+Mu8DA(U!hWB)*ndfZ#DoD!r"a!h*&4a&p#G%o$90FY/<H:6tf=9e8)q%A)PEngfS90;NJ
%EOS7[O"qHRU2sf,XLc)*mWRDP]P\5k5,)C)h8CbImF#nh@d`9iT$NK8)ugsjJn\!74esP8N=2@#b4[c%XHe:3^-l[jc#0l>\dF(l
%DWcVd@+9&nS%.O42DCXeSG=cRN_JD8?(`rqGSqr)=C1mlmc3Gcn?p_`27jEH6Z+U4:.nf0,7:^3.(%8!c3?&$Sgg1FS0uO=kM4)N
%2rBkb5f#`.DppD<?FlQ(-_%t$MR:O9*MYb]Gd^PN2-X^TPPe0KVHgdn`8("8Y[,sH#NJj?\UH=kafNmdV`[X0U#7P/9PK"+*4>B3
%2lgY)$-gK0XM),-fMm9Ks0Ad@ps1Xu5<_3tGO\FlAN;j\eBWh-UrPmh]E5c]14F<IDppO5V)Ot%;?+*Cj?D8d<Nl#_fghEJorQi8
%6u)/Q:-k*\O/XkJk]U-+J9[k[HI^`Ic!NP8QtCAG\hLub[3b`]h>-l;*n1:`kUL:*Dt72iI&DdQn*4LsmddAaT$s@ieLPT3oY.Aq
%qI;UF-LBBcH4<M-UJZNuRDjYlM;]]lc<8t7`&2N;-tg&1GM`#ha<E8\a8)8iHJW5RG%J^YP2l#tW;l(?_&r&XV@N)nr6H-NgQJ$S
%]m[>9M8njgr'%5udeS,79/RAt^me@XWR,:Wr2b1+HP8*#dsV1ifcj)PEM)U1IW*a&?G@"R=sK2sh:^O9G1l0LO<N^rE-F4J:<^T$
%*#6UGAuO7eq*F$MWi[?*9?Qlan,ssaB8<O5]<FdtgGgjXqc0TK356=/?>k&"_oYh01nX\#mp&PVIt!ON#UGA,9\gMeYClgChXiSk
%a/s6O%+Mua`OIu\\;.W/D#!.>kDe+JB9>*!UJ?Xsp1Caojnr%b',#3JWN`FQGF2^^Jr@fZqhGo,?b2X[V(QK$7WPj$kVY//VAeHn
%8oj!q)K9rP\Mtl+rp8M>jUK:\)%>9u6"X&$[79>_%^0-=CRJQ!9'XRY)6kRf_sQ<#^Qc(L<SetfoeR\aeEP)A</7"YT*la4[?!B/
%o:/JQWF-,a>p>VT?9fh*`,K4pp?U;gfdf$E;=84"gfE4Wjk&KgeHueO1:]r-1uE=lpbp6CQ>"?M.)GYTHL8Ko-/X?%Z0+@%Wu*29
%f\N1/Ms857XP^Wsn<0tEY4S<@h)r]Qp%;0/mCsTQdd7rD]8EGk)n4ofmDJ&;SYL@Xq,s?6oK4&_6k<mJo9_rJS)U@)W*;8s+#h6r
%&^tpGI'^j^F5&;`]q!RFiWpVDme3fuMMl2(EjDZLpW6ScPr&u8DgHCXW-"]K.c'f<b1/c]L=NrfUV7+.RFkb%oH:&(@shimcYkJE
%^lqBdE->pm>Q=JCfU`E`9XQsQCc>:%*jpcoP?qRLlZof/crL4o*Ks_$;:Tr_L<\[cB6<"C\>$)^)U+#V:,Qs4#Gfgp,a:e)lHNNc
%R\nN&PYl4f1278Y.V.c%rP5I75V8$g\t/O"s2g4SRE\i8bV1*8-N4`K//OT#lSeZ`cMB.gcHdtWINj,&:N8a1Wn_mFBhLrR_CN9:
%nqo=]W?,o5Y9D?cAcA#K(.L`JeF6K*#.Y7#?Ib?ofn[hgE#qW^jWQ08ihsH!\45dX>[4%D?<ga1GsPWXQ:,DILIR%4/&+R>Cus8^
%S6u(LRMT!g9BI$L3Zb`OOCqdD*[`'(7[9b:`Se6jm912.+')dCOWYNJ5pF2RM,2de4_gHfj&8\PI8LkU8L?>0Ai2`^Q4TgG<ef][
%rNi_n23\6\S2&.0*DWiPRWVrlc?UbS\ao@)iZdW8'San9B<Gt7r:bJW(>;Dlc9*;E7b084&iMJ093#e7aMdiTb@M+jQ`:f>j$E"<
%F>.BP%`rmiq)Z2!@JUVk$N5&>bT%X0'R?$Zn9.YS9VW<(32_"tT2T"G9K`Z&lq6@p34XbJU..oT..>Sr_cF+u:.Mq%iB2N8XY.2e
%ajB[%UK2:m(T#VpeELT0gInrp0RZfF:*Z'6=6cJF.W&h#>9mGCFCmELNXsUPq6MAN2jXoBa]1\`[,>fF(Q?'$8Q2Ygk0$m_"++*+
%lDbVT[ANnu8R[##4DGD\_g-k"6Guo"BLT8o/eXSk`8Y?KPt\^`,.`9ORV.e&Mr?c,E/UK2k0A->A3CCC0,u'X5PeeJ*;<2\oAuqB
%'mqTrI,&M^'bK0#g$>I@n2\ar'[.icF0rMTml*btX_tl*g8k'Al/TYSrelrf@1\^s"7:BMa*X.uW_aOX2e&(c6B0oEG']?<b6^9?
%`ttiKIlm%Vg2kr,)C#s:Ogn'n'OsI0f=Y),fOeKmab#TLn(63Xhd6JJKl/3nnmX@im9LVa3LD]HZ8Roa9LYC^LL%R9Ra%?RRG?dj
%Z^4:XX!8UpDh4/ET-!c+d1%XS\$>b>d2n</irAH?]:IM8_0:#J7Wsu1U7];->D)),#=QkJI+.Ff\A_$N&&,?s\\_Nl4^JTP9VD]:
%'mA,rlBsg5ZniqBIg+]3`cO7?U]4OoSgqiV1p7SUqIfMjO)")AJa9k)_hjPL3]J.P+82.o1t+-OO(OSLkJT#pG[6qo60J.`GsZH?
%[[ilO<Oa[YUt4:q9i@j8_"W4+i#Xf1GqaYLFC).VM;DZ`#JX'jK:G@51r7."C>UR!3pg@4AEHbRVuql"X@fdD3,3[-?<t0E3c'#c
%9D]P'DVY<=hGM$#2'IFko6Gu6!niZDM<66GqI_?C.](ba_/F1b!U`IqmF+H[fs"c9aA9-AU/pN^,oLQEn^.jKl&(P*FF*a39Dp)d
%@56pjKmtKL-N/!@BV(i_Id>W89E1uUC6d4jYJGcGg.ucTHQm9mcCqCFVtcIr_Z/"e:HnW;S[CQEOBf8Ai:m+tCU_U!Te(3=4)COO
%,"=<GW,d`RbHYGjd((QZfIoB<G9#3XTB:+bVLA6Ne,J_QX<Y]ZSU;@=Eq3!V9s;P5,*o6]\RCW;cj+Vl]5*k8]k\b.1$h"UfX9ON
%T1h)T@_$he3-YUH<\$S</n\\"*OZ?<Z7?\f].+jhXTKn0)htnhK%Q8Ph!`kE%^'V)a-!;@V;^ab$`P99jDFoi#C=tioin>Hrcrjf
%g6h+8Hq+M&4;JTQ]oApU8%W6@@eU&<@Wh`chVr/odOngWSX))!_b$?[]8Va:,MGTL\2-(@j8(NZei=*1LM!*og&*k6?i,+S)m3:i
%H^,J41RN!@XYWTA-0-r$!oaQEl='_E6>#bVSZb[#.X*q?XSGIEC:8DTbC^RW?E]*45,K[N^@+J?7.5E3fZBssYEhA>4$AsUcJ!nd
%nc'n+^P2ln[Kc]Jk(jG5G,d3-7cdQcaEbWsR[#_sDuIN*c5!=190;QIPmFn,BC3iX`hcrsQ2dE&P6l#mI[Ac=i\RI]6GW9D[<0m>
%QRlR<^?uM,RYP`j^\Vc.%4<YgT(EOd0BB$(.t)&U^J_^'F8]WiFid6$,OfsID2r%4gU6n<eDP>oN:#J)#qn0^/8gk,iSX+#8_W90
%a"=j5?f0_#9nSa[`*WSY*B\XfkJQ<ES$fjYc*p>Ar&ZRS[IqAeq<<NqhMinP2jP6IeiV.!n5f>LnO@cp_>:47LX1QB%sC.nIC;<V
%\"_+Vr@G[bK&ENh%3&Xn-VN<uop&l6pX`K5/r&]0Vg=c.=^Tjm0lX7dN+s`$?gb#!#4;A8BC0-.;5r>6R@7pSkT*A72)]A;Lu*'0
%)IG_ZK(nB'l?Rkl=P_gUSM!)7DiQaq_6#Z(YMHhc!-$uNHZD)eZs-CJ*5-gsiFDPR??ptpXSI#M5-;#[D15Z<0W^ct2O86A2]&o_
%NbKEOfB*mtLQ1=iDk^EZ^&.N>EU@jI5E4O#!_0oZBscC8\+S9AGMgJ,[-1rsQ]keQo[fXPNU<M.)ms_aoi?4MI'Y2YGhY>!dko1u
%KuMV4bIh)YT*Coh<i`_.4,^N094&IdlZZ]Qf%]6^%pqQ3H+MF=2:(bnB5usVk>\<ZhJtCjFDcMPd.ueF;6>3BdG=A$n`.-jZ[_-W
%2K3S_jiOJtdtB6T5HS"6Xh3bSCX6%IU[sO^SL@Y_*rFJRCKiB^4](C)Xi?R`CVj=u[iN0P]qYh'qJqc0=Zotn-nhuDh.ZOfp@)t_
%p3M.6p#_a'V8V:"NfEE:iQ[-T^&Q:8lKb2U&+ni*:H\'_hJLup_smY"*6X-,:&)"!<'@=Rh$_Dl5[PW#Gj<c&B8u$8lCH0=Msgn<
%-H$G0n0m(FVXY.Gh@B<&M[qaJm9co42P*P<qU3A"),7lpgI/kr]u>a;2jSRGdE.gtkfqiHb0ei(^[Ps7/#MiCe;TlO>1K4?9DF`'
%5qT2*TiF0^R(6(0HtIJa#P]\QhhPQCeUtln`Q%H=dr-2Mk1s7LnF4uOAG>fP=4J,[g2>qq^[l=@gSY9(1efQHGOS`HqE@#f^[YGY
%^9.WXX"Q@M?f-76GJ8gT/'$h^:H%OZpD)ZViKktH46gGl`r"Z=T2o=cgjcog\9IREYiB[S/-$;">uY,_5'l&_-<kd5`m+1AK@/#q
%K.!Gao]@K^S&9n@N44EYDQ&!CTGM`u9jm#[dHqVGAbAp<g\eSL1EEQG=l!m*NSIlEXS%ca-I8`Kh#--B_[uBaF?1BtT!4\HWh/Qn
%<Bi]F9K0#1(FriN(QP+gWo!$WH[YA60<;CA,"BH>?II\8\8uYnIN%XFD(P*S2D]Y*5'Y[l@C*^g"@?BAmQ/*MS%EsLIWE"SN)j,c
%p8ZMerFYU?Frtp8(C'nbCSSOaR*7UWjK/<e:=E/QSfKDGY^)TmC-1n0B!%Dhk1X[cMiNX>2RKBkJnNQn1YUZt\(b3ACmasCn_r%8
%]^_V2NV:m`hV;e3W"t\+]Oohq;3,';nZ7`30,O@u?UmWL[;PGU^Nskqp(iYXF>4fo@UlD;>]8IJ7j"aXa/=-\g[dM&IMY'')]>FH
%Hti3/B_dH1H;7jGpMX9F[lu*iYCiC0e+hkHh.Kq6(E/Q*]>HGGe<f,Qn*L?`ig3l;MLcI4)`3Sd+$Qb:DS@-&,+O^J"Db3/4.CjM
%j(+p-p?dmZfA:q<T9oNa$/OG(+4"aWGkq,[og%tG#g%#Q-bFS;n*49*)XHt[kilbto5hArWpYpdFZ'^?2ATtqDa$%MDVs)BIpGeU
%HF1#h6`lrcWq#[)0b0Nd+2(hT-/(GpgJY0Eq'3SXqKPptcFo\GEhcl>9+1EGs,nH^%p&CGj645U!IsVM1_"XAn@_=.O7\e9ISDaB
%T0LO\aZi"^hd*_k`&-/W4H4I#&"Bug?2;e_5H/];9XA_g[:(!c`3/.^n54YAVrhQ.-(j(%4O!cXpi("SDtp^LJamc$6P59TagUM=
%E<Fbf&2kleQE=CMLMcTH2a:=:V/O=;IO5n,Is"<B\a8[A0-3'k53*.H<3>gte_EDPph"R8KgcR?3^X>%TIR"uk;8/=kX2nHg[gbk
%NK%3?lpNU>0`"\)QoO\r8fZ81K#6LCGFe$[O]Ln"fs-33>bWNql`SJbVh"A1K_+Io+H^sFEAqZbZUrJ*gWc?7!?R-uRGrPL1m@8L
%G]9I\NkPpngM,NWglcYg-+jN1]T>&MORc,S2Pue!;&IaqfPE`WHGL:@'-:I:f5gm*,[dm/@Cr"&<q(dKGVgcOML:ngP-c0o(qmTV
%D*R&bSn;$P!bue$SI$eZ4r,+)4o+rn*iW_sCa1t)Fu:45O>c,%fZZ58h10cLJtB6iX,&^*-:9'%K1tX/U*-!r0^Yf=<S"/V1rVcM
%XjX23JmIZ*D_PE%+2/)R=-M``SC:-+Sa@6ZK@.QVNRml:%+Fs2pLHoc<im^@hnnZ+q9ch)f\R+QOaFIE\bZ'XNDo&bqi-g1]glNK
%>#SEPT_"mq/[RTRmEBV-`"jcYb,hqD10r,7N2lT^?/=i&X4NC:%mOrL`-[QO/O_2YG;cK&:%R;RC37N#I(_EuNH]IBp"b>(NQ()Z
%UW5=felE,QUj'/rm5D$(Rh),41nLf)\2E4Z>'o\tdc5r:Qp])lpbrH8-FTDQ=DEU=NV<=1]n2<6+/?*sg=r_5DtJoC#=EO+cROi'
%LC[-)R'KQ:l\!%<X5Lh#2ilU=N_O-trd")Q6`hoBN>FJl>m3jlSsTa?U("6cbkT*T?fDZn<#XW6DOc?m!dFK7%-]Fm_G/[#]rd3b
%%tb*Wk@\/_*&;SOb+W6Ca\\1M,Fa<e\rM9oDmXM8.pU-`p)D39,FZNo/YQlVcfG&ETso?_d2i^^]_:dI8pXf4<'C65GZkLD&s_66
%AErp]UTM.gqK&%I3ANG9$st?j)#,'tcfb!iFtL8>\p\2di,/?[A*`K)Rr%JYX),Rt`t.&!ST1-'.bpeam:$%)hALK'nrRXXqWWe3
%4^-sR0@SrV\M:P7aj6lPok@q3mGg_/_b1-Dr&`6^]X/.EGJ*-UI(8M04?^>"+]d/3MbW]mMYCfG$TsukGF[0l/I@Bnh6+K%W'.9e
%j-lm3?4Fm,'k-^56>,oKQYNhs[%.,]P!(r"KDTLHWj<i2EDAOP#LWCjds""i$_6'Eit;k6a+:t(mVa+oh-Ac<)sHrr2\PYVQYnC)
%=BcX.G4"h9SR_I=oo%jJAal)[#:&"4H[E0r;q!S0B)g=Y40f911s3jro0"fq[/%nCq_pGmHK-[TG&eX:K?$i)k=P(&meX*#p[7s)
%mMoOshg`n(B7G0teX'dsjTkb\G,+r##im:]`pTN!lIAAqbK8c'`p:*p*<U,;[b`Zel#/1:h<NqjT6O-i^=BJ.5EjWn37m$=*q+;i
%$p]Tu4,q.N]g"e>/-T_78bq?8HBFE_UD3h=Qa:[,,o51$VO?T-a5t=)_>Q#gLEpmjR1(+cG!;P0&Ar!#/KJl4edYD=A/pqirZ42L
%jb8P2o5%\2Ya;(@+DJ)>gfV32*bPh<VC>l"Y5P[*qUT=*<4MYoi*0]:dpJE^"1:04gf0RI&]88KUbuKXR8G9QJ,/9XEmYXWRuO7`
%nUZR9^l@'\pMP2>=(-$-Q?,+&)npYth)ea:\FClX(u_[%q9_TZ9Bb;%<;<!pGINF)NX(t-[j8a`(H5MNn#[buf;)/s%m5>Qs%[(q
%cLQ%2e[k;,Hb&t&e&.s*NQ+,R89Om(nRVE8C$#-[iQ:qK2p6->#E=rEe`bK(4gnZ^d!Y>W@)CHJog(SUP6KB_K3#T'LBi%lcWL0%
%=XlKid)TerNNIEja,Qum%of\/TRDrk4JCCC#Bt(%n_!beo?K"2Q;s,)S*[4P`f8-t;0i,Vo<2deI>@D$J)9PBD7J99G08_9=#Pli
%?B,uta#@pL5C`n5X1KiEm[[&5nhJS?hE.^/S=CR"rR$U1_ER4<l-8>E"j(LtU5;muq,V+nrKeB(-+313NFeJ#Y7ZjO#gsRDnA`e^
%^c_DSaN"XW#ss6c+k_sr<X6jT\oG7XrZZ:MfkJOO,l1ePoYTGLM[(1sf2l]'3O@+r7=FFWqT>^;]/3Kt?SlZf3@"u#/\Ad!YD+u"
%XDGlT6#%OsZ]$uRk/NbY8XG[ee&oZ`c2HJ`hQ`oR+sGcM_McZHjUGjR&:o-A^>5eRYJ4,+=`2i7Er1f/,Pd`QFRY+M2L<t75(9JD
%T[[=U/`4'OCqVfT%:P_?l/cEP#c.Eom<&02XL6F$W$Mlp:J_Afc0Il4l`1OL)C3U/if3]7_tU^\lL6.M)R36<A3CiVDml[Dc[sC\
%pWbrr[#ud+l,qblH?DDV>^Q$*1YY)=B@VuoC6\(UOE0(O>(-7Ep2#$n,+4oBE;Imqk:[mFM="WT=)7hI"(@EIjHf#^1M2o:k3djX
%G>p,ef3^ajgECQWnr]m$5=`ApSfd"O[r^Q=P8iiF*js^U=mqBOn_qGYNp"3edGW\E]QJS]^7X@+Pd^;8^[5lffNP[Wdh"aAF.Ra7
%cO]L2Y74O!hQ8CVV]Th`1nHlk5'ss91!l+PUL,WqWk0>oI]Vsu&'!1N$X\3F>-%<me[f+KcI,XNX8C`Gjm%cb,d'A4Hlu.kn2Zl5
%g\4A!d3TR0(cRgm,<[+(?!gl!4+M>*=aLj<[shYtSUCCegk2@"!oKp#&`J_sSa@A6gb27l`N.%Ke\1t9kGm3A3TOFJd74lrX?LNL
%Y-$QmFh:'XUNZrjF6ht^^KIah3n^T!=p]7Dl)^X6B6mtpP+"ISL66\CHl_!j4)5`kkt*pMD6rsDB/@eKGH9-jSL9EWl3<Xma.Lt\
%nTFH)C*%lYY3t.]]kDfY]Xp0ec*N,hIdhW@#CsOV)WT,A\pq'cUtU0Cs4c]$AnuW3QCU\I"Y#Pp"!iBDHLp@n"8ueD[INn<J\SbB
%J#W!uPNk0FmC00F@e61paQ.S+0)(YA;Qk!*^*Ha6ji7#fgKX/(\rHFK00`NFhHt_kXMmod:<N2EQQ'hGq,i>pgfP(Ff2'uS:AFVu
%HJD\pa#)E1^#DUnaHo*jYX3NWC[4oRO)J(ZZFX6oTPgRLOQmdQVL,YS\/atS:93`p>+2-mb/=Vp5=:LFa"#!ONG#HTGuhbpX[`2g
%*mZ#KnS_;mj4c_m11/jP4F+2pbg7TC*RWIdC?M5;Z1P_T;fC2.s4k,pJnZtBI<)]i7dEqV'UH:.Y('g_P<(*RD!#5#,Nld/*KI&2
%C-Kj=-=Pf8GJ;WX`9]Qmioj8<0fbms5Dp6.IG]>TSb]O:nE*cJnRV1PcT)"3$WG9mVsi-_V!*2Te2TKbQ3q0;5dGh6_l_Ygigh<Y
%">*CT@^UFrH!-1b;M0,[^5ic<4C6l\N2mnf3W]UMIIcXWQ"9g`B/mrUdk*0[n9"!frUlG::H%DF:WAk7Wd?rH$2!Z:mEPM]8Z(<t
%-XA7+X?7mDfa?DoX#07V=6h8<p]+g#>O+a3(HoJ(X[V('T90gM^8UIBc'oU,?:<tKRKni>UR.aqPD'/C\g/O"EqM9uW1[:q`+LHC
%OhC;\n`K#^Vt0!Hh=^l/HZ=OiF<+P'D>2?8g3WQOY3ttK[^P&5#9QN=<4QQ#`8'TVqkl+8BDtFo&Pc#r&kZ]'eU/;HNfI9JXEfXp
%<kiKPGLnJh4<'=X72H)HJaf.$p):&Zo;lrHZeUF=rJgNjqr@('2#\;caZc+EqjX)@hPa"DT^jn/V_+6_c(@#'*1od4Z.Z0AK+3m/
%:$lb.[;8:f`/lA4?"h3PXIu@C/s1ju\%0.koUnLQc&:'$_QO2'/XcuoL^Oau?SRUp&&6p^bCqqoe$Zfg3u^hbC,`*'50j;0N3Cd.
%n]),^]Dn[HppRk;qtg!Ej/mNt0>8-;_ONVGJc54k`:TgAP$PVD'.MO'NT7X3mLV.feadL%\M2`BfP[jHYBGtm78ViA$fm#Vgfn5(
%pVsHsh>T`pYJ2)Z7G-DPM&on[piuDUqib@H\Gp9*6QNLBf^K1=bE"SrPI27Do7O/bjl2Wle+`UrN!'[t\@^-,s85Ofij!uppe+C`
%2Erk.IScCc*T^\(:V:%`2cZB4%J5A0s380o`;OrS(`2.3[Jt*R4MqT[+;MJ06DAgOs1so]lY"oMMmblW9KXY+ZdC$#/gg2,M+No'
%\i[L2d5kMn6DXL@Kq86k#H.U4EU:AGc"+SKVa]o%^QccX/O#Aq34_KB]%jC\X6n/JJMN>%:gJY=WC=Mf"4d0gnk"c,B\*P6:AUaB
%=euQlICJ+o^!\aMh9A#c3u;&1<9;,jjE2;'l(!D3j`g1d`f5"Uq6Y@q]To#"):3[Oj3b*"Wcr?.\@]"j^\+_fh(&.Yn8*!lmjiEJ
%c<7_!DBW\=>P\<F_lTN7=D$4Df?U5X4jICp/2l7Tq*OV#o@N]BEHfpCkdIN*YA"_Y0Z.tPGe0t[]J*K)KZf+V>.K79S`XnPVFa!u
%\2'g%EeS!;aleZ?Oh4SKI=ed3`7GC-L&"thT6,Ba"oGKq<([)@U]4=??&Ff.2?s3-.iA>2%fc4N_T$#ra3TJ-oXMu)(,Y>]+g8<n
%V$A;\rL$gsm_-rrr)L1Kr9%EOH)3"ioCfYCrA;M90BbV8?c=)2>`#6.K`$T8F:chAJWAa.`ufD45-;;g_BAD9r1T=):@;s4_oPSd
%gu%Y*-hQ"lK)J_J?KkVW_^DX0oIp&\O#HDrIO,7o>UftM743([3[^ja?6orrOJ'1Z+r-=VNF23BAI,(]`l'#0k(OQ-G\@i>MR5"d
%WNYJ^_^(15AJuhQ%H5i9VIBUj&1FO)Pe-LI)k'C_KgD[X-5GeWQZ`@/?7!E7bH[cJl">Sp8Q7E968QR]/W@\[?s"SZW)>X4/"uE'
%b?.gS9gQRVQJqWJN!ugAT^Ks\/!2J`d?GA$i!l?ji^I0Y8jZg?,+k0c,W(PuQ!U5VY0^EGg;P4P/IDB5-B%q8.S6E>'PK]8L_(+D
%$J7ndR'oJ^=k3p.V:?3W<;$u2#n2-*KGbla%k8i#%!NmH-'?4b<0c*(!OX]ug405QXr'n.8T8^_.=c*h!Ma#LTu:7?YR1^:`*>n>
%6m$u#YUGB$Eq#4[\mlk)pBg0>e*08BhujFe!>*69$0W?G(3mj$gaAn:pF)a?7&sns'jq[jjoI7mdBZ8a_VKW$(-6g72RYOk$575<
%">]ogY=BnG2pc1?@[a/rl?WlQnR=^+Y,+?V9I,BX638kt<"e/Nks)s<1^tHfDqhDWS=tC#WE@Vq5[h=o.!E,il"H6UJ4[LbI%n:i
%Z]OXCKD%Wp6n+aa#1lbrJ[&nX'M[M"N2A(4&8!%Z>7PbrZP'ZJ^@4B%N3PcI-eq%YKt@t/>&&k993^bC::V@b,U"AjQGc[_nn>_.
%(*4TI$?aRG9X@3^jVKr_A'e6['gI^'a"L%&NOD[f8'=V`-"83?I)-`.O[P(=2b`?*(Eo3f2]u.\F2ZMDG_A@i".7Hh2:sQS#sYB8
%iMZgC'C4\j's.cl-\d\<cO3_?@!O6JFdH$c9Q$T[@AiG5O[X`X4DNm9K^r+1@!O5oUoG2o.RZGA&!`5!U,AD_%#r>K+Gn1j1Jrrm
%@RU?-efRSmSg$bM,+2RX&D7MU#SY:`#c`Q2#>l0E%S9JD"Igfk8CiOJKN;&!al486+Df7H^.VoJpQ44,I6aMP7gW)ol&&9B(PGJX
%io<"TC:u#rE[3I^$!cH4ON+.2+dqNhJ`bns)14t#<PXf0'3#TBA&9dM`^GH:Lu_.4J^K:n#YY:H<&cCuOAC7f!6)kX?u\18>$%M5
%TQ1anQ5!(W$nEU;#Xen_-cq$,KH-*)K!N`eD,Ce+GZ0;?fmUpn-4L]q(oKZ/S74n`@0fhr1<.HdP2$uA9*g)P>?PNb,.fW'LidYD
%!W41\as:Qc0]C=8`cFC:OlD$2RM\he'#IB\Yp:\#WL15+]Uu.1J:&!tFcenN'`tXRVBi#K/<U'4P$326$8b5I'-o"qKECs8J&`+@
%X@T$G!p3f`KL5m^&>j$2L@u6#9.*oD%KIg*9.(3<9"KfgR7(-W*qi%f@"flUM#)P;e,m2C7A+7e2U^^Z(F^k4Z#!MR'f&[<N$KN+
%>,JVMc3`i@4['.G+lYbJJ-cfR6sCIS_:Jl^M_#H*(l)O_3#);n7J*i"ZX1TKM'?H"b./7ZEN!8,p^dL;\^?'bXBRk_"%*Ag6&(_d
%6!"*See"Q-_\9an?7K.k$+_(CU(Nk$TbpZ1,K;F!!['HX7'2.FlREK]-*i,2`r^mSfoiBXs4:3T(aI$<#D>[#=okBbDFuD&,dA'i
%';uR#k7oOo1>\)koi"sr\6""R-KdElZX94?kQoTjO9lN?,UTV?fq2&+M8Djb77>E&$9U!d5S5Pe#*EY3EeMME?3D_K%`rr@D&0@/
%$t5Y$9OP+Y_ng@f`3;\J&>BM[8V"k*I#5o1U7aD,&1:%F0*#]RA9g`hCd92de!>Upq'Ifg'?s!+TdV+2Au;l_6E\FeUF/nNZO5@h
%&=Qus;2A<qSV]^!?kGX,Tk23Y'\fd@ZF#F!jVF!^V&;giZQeZ!BF*=F4GH+#1kA*kZMP2pE_2X7>tY:$'%se.KGb,j^-[qoK`3)P
%nABeC-kZ2CitU1W,0Eaao-:<D!%'5Nc>6%&8Q-4Xd"4sT"='VWP:,:S`:YJLZH-U<aUf4=9XDS]3bR>Z`jQmSk`ABics4N#A>+_.
%A>,dM3$FH8XE1)O8=db:_1o4L[n2@q1(bXUZu#)j73M!=gV\VV0GS)<F:C>jG-k(+gVZ&^X?n0O#I9NV./"f=kZDO>e<=Ef(r?1/
%nJ*C)&1&cBB+:uq#PCDdHUO+ZY68Zsqe.ouWt#@Qp&mpS1lt=#0Ja33[`$Ic1K4Q?d3SNZ*3qY:$sR5qnJ+Ve*Op1,rY5&rco?u(
%"I]lD_\OD8(O07o5qKROYXIQ7!84V&W,Xs`ha0Yp3"T-7+;<L4M.G;dA:IV4^5<N?THLV7#c^?Z.dP7dBWV/@6+kr?gt>7qm,fTT
%9+oL8+ZY(e4l?<n8Lbrc>"i7r(=Hta9#-mO21Ul#D]M:fcOiMQUFRt+P\(n3.XDaUEoBp5T&fZ?8;BR,J`AAe77.R9OAaZDEMbc;
%Q\L<HL>]CYKHDQBZp@#/'/Yf0dNNB]3c"47T6`n+ZaG9Rp9cIM)NUR76cD/SAqgio#B=-3RmSnrAD!o!=mo2R(rCfV(RX*];bd6V
%biUJ-*5aQTR)GYn4#)QuTN7bcq.SH=%%6:1!-VJ=7>,?_bCdS;;3<#&)`!dT%tQHUaE:=9$7mTcNPPH;E"WFm#X^*"&='QL7]bEr
%1d3!BMaYDm_ao':lsOl=g6lXe9D:g+>R<E0@eW^:cmR[Y;9Yg<OMs-*>D:Q@&#_p!-$2>%+5%qYT1@@r4imb6VkGDVW]9#.aP7p@
%,I)88k4K;p_'2&oNK=fVYcn21Z[eSL^>ZSk&W["rZJe(l%DDgu.+JDa_-CAsB<0LjG_HSm6n6ce#GFP'%rhqlrlCcIgd0(bN87#E
%5_>.!JYgJ73T5VbaZ(HaO%hi.HiU`NN&-ZM85>?Y!DtqGaTu$(7%$HL)/2t26$5i%N4-]kF$LqrKSXU[0cJ+j:cPR3prgo]f\BqA
%_t'"a!DkCDM1PLqS0%1=lE^UGMSQ^8-cRu.$1"RDjW+dT&p9Z=;ZiG"#;>lAE0Q>C&[/Kq>)$=^,:F3I#!5?]5%a#*n.05kC_njc
%,Gf3aL/='<:s[g],X&PN#6KK)9'<'s]Tg>@8kadA)F;K+?kG^p1$qV*`6qhtLfm&@&r]j3#B"!Yd^iX@8-lO_A8qam&4Af<,*,,#
%>>NODk(`/4-6\nbe^'h8ieL"e>l.>(IXp?+q[SM6[e(oGK:%Mfp*"2WL3Q/*,6i1G4sEB7E<c+5:8/o75RqleS/6ordZ[aLfI.(`
%faIo@*kkFuanY53BTa8\[ZeU3p+7q5'Ck.WkY?kdTMo1.fJEU<:8XN:\F0iS+'+78$AQY8jolW2>_8*BoiP3jDe:N93jE\ko:R@K
%"N+VQXbBPN`6Jbm5FtW'"TpF/=`<1i0GQn*K35uM['7Is/Y3Y<XXsC%`7$0d,L*q2X:`Cq#tE[/GbWOt#=:jiUrBEi'ZXG5`_!tO
%G=N$qG%0G:7:1V&I-[4=#Y:6^O`n*(,EY!IZQM<\_@T+ZHoc5KrQkb#4R!9t&u&I9NNe5:XkH5AJ7+4<GS43'(n=.f1Qgl(S(K?.
%AEf9PR3a`fCU"3!K;A2(J7IZ92LVD)(+Cs`fJ?L>8IQMa2GPNP2,B7Zf&a/,CMY0\+^19]%hf7uOQb,T.8>^9COMMK(JOD\m3n!n
%"Ai`#,S*1hp2'jl`]17Tj+Zi%#>rHuTtJ0DThn:EF3B28J'iOg7X-VmXrQd0iWgdZTX8sU!P;=Z)f`\raat4:+640AHL]t<"\Qj/
%7EcVPj%*V$Jo]/D"gL:Z>7kmc*CD6lb,;["Jp;GoDkZO&-P7`:(KP:YC9'3Uhs2(BnmKpl_C;2;n</q#bINO.i`O?PjGECVdT/Xa
%+uU;]FsNaj<d:\K@''gMqDMOZE$FgaBMc._I..Ju9Sicq=2N?!CBQ>&HQ8?i3&)U)bSZ!_oEN&\::5c/bsK9,%XgR,bTr8O!@qkV
%>!]GY?mY#t=ZcY!EU,@@Jf;$hOR_u,pl3Va*mb9BGuut!rdW&Zpn!02'[_Vcho>sh^4c2?`^0T*?sle,b*U$__*!jUMGsr9-@mi/
%#9T?=M-H1Ik"-7^M2S>ic5#k/p:NbgBh;'^;/^jFnACdVmN.0\*-]8J$tW.2=A0b^<X::5-srk4At7N4J30a<d.<6-F:ttQO9K(q
%QX+mHCc%hK9TBf250RUb@3Moqf8)&pbFmlQ3+sTe?L'V(``.bqX@fQ!@'&I`+Nd[%%QiZ0&4+s5$Cs*rK)*NZTH=9n\h/FLph><S
%>.t4oAP.P9aY5W"aHSsB<7rQ"bS_r[Gn-,oN'&qQ-U/:USG1ts-,P[95c-.!?qZkGLjW(Pek9UT8]JE'''i2*-"4]ID,!d+,)i@.
%%]MgHE\<!W*Xt2o@3Okc&.5WZg&.fV>daVmiL#Vk(suYJD\.6c@SWPB2Ut%qQ\]iQPE9,q*2nu?@:Oogi]njF-WZD8T>f6rO0#t6
%8j^Kt>sV@<BKP^u%TtZoUdq"W,QFMu?:qF%C%sG2Btsa$Wt]#LVM8YOp7-s$!6/(XjN<p.#(s=()X%"qAOP%hbR)7U,]TehSg!g;
%.KSmfO<+Yt=@JmM!'1`V:C*+/&.Vdm!Ae).XN"Y_@q`AGjJD[(_2.[kM2Uj.`-e@[XT,09K;?K56'.@(P;lL$4B"7cj=&Z+@ZVCZ
%2X[b;&/3Q;O]GOS!V;^Jmu6Z5[B_S1\JStRoIia$P0k.<`ZEc32QT3W851?bUgp4]4JL(+VK!JG.R;57K;rNB(A:^DM&h2)b=b\3
%OTZZO$P3>o!lIO9&.]rr&Z+XJSHZ8[#"'%^JV>RFAd(*-,#B[`J0OC8L'Crn)(_N;(^)#$X%?-[J\WPp'+Bo^Ve!6185emfJ2SR%
%6s/Hh2BQ[Mfa+7,p(GI3=pFe!RgLd>O$J3tZ!r5$Vnhh:6Og6BJ7F]n^p,?U;J$1q#.>m^UeH/d),rmU.,Yph5eLQVU);II"4_6q
%#n@6*Z00#Gj&?Ud_Np)b56rg[RF+PJ;#i^I0`Q!_a]G(l]1gdFR'?Gl5m]2B;P.bc,:K0<Lit1TG=$gmKeSHNU^RqO[)DCbm=8B2
%VS9^*$R5:P(jReQ%Ek-+Zlut*,'b;K1uscW?=F3Z3:Pl<?me5QM>a:`nE&G>#ZhU;TK0]?J&_l!,tL*q>N8[/)8M+;I+W)i@OSOG
%<<+g*K"DI<#%O.o@0icU`eO3h([jgJN%]6s&nE+F!?i?h'>]DM*D6T`@+4n,cbM+]_k2ok;5+<D@V'67LuZ>HbRFf+3,9+_Q:7>\
%8*.mlNe3fs]8pek,ig42X#\7%2?=@?o5,tK<$&Z!J-I(D$;(;c*]_^1LR)%Ekp"DAMme$Y)ri28iJUc*1-IC33t[7+=@&+H,@N$!
%R2e/O^:qk2'*>9T9*3mNJg?0oQ"HQQ>T$2X-CJ8kGFPMk>l1`ta[#E+-F8Nh,o`qG*#!@]6F;SS/J<?DnD2&]S_E,7j[2!YLg7uX
%*CNY0E^CerC#i6@@?C[=JsNNK"Djd]+t:5N:/\5oK@UpVG!K>aj<0:UM#2iBZqh`H-o!&ZiXufTF'D0b_lk=?'hXGc+@PQkr'`;g
%V1_ZI6kR`im"#iD_!)3'6C`kH,7GnE8BZoYN_[u*BQ^OkN@Yoa&Q6%kF`$4?ps#WkaOcQE,s4s]Zfht>L.'oiUd+DSC^D#C31`i9
%coQl*&MZa%L)!Ji_[K'`[2`JtX4'0oKCNSGLhTF9-#@0kmL0GpaTaQrKo#a-poc)&AS3;_&@.#I8d8<G/]HHj,on.38_OPUe)TdE
%i?b!C6L'%eK[g$T#cTlt_NPQ!aS6'0KJ7sG5u*W`5(^`Rjjg4f>n$B>Bh1F=S/BrFC=XPK?NaikVZGb>YCbdFXL3\2.ZAMY0*D?e
%/sS5/Llfl`(s3^@[T5?r=/L'/,B"pVeZDCgM)@OCcF"h"Wo5g(SD7)pa9k64$o3i=O>'>GCa5)s<i'fm'Tm/NmPLE_s0t\%rs=t1
%IEA3.<X.&c#>$8*lp>6C%[89u$rX7S,k.A>;JE(-_bJ"RQV6j2&bt]qEU8X^-5>mX[OdSH>DCRT[#d:b:baG/(S\_h.ScugNhA\c
%6t1`@C`;(>-.E8MGqj-'q\$^u.j>=r(^YlSJ-b`-3LJt*;HNRck]f(4arrYq%V4&=SoMu""X4-p2Fg8n"cLc%1n-J!J]s'9)oZ?G
%Spf5CbEH<X+]a/7jqB2R!#P^WDuu1fSD@_;MWI7B,Filf;%<C,S4)4ojs3/GE*uh/K-p3qS+Oq,^fqF-H]c/IULTLM(-7N7]!GD.
%Yfd9T%QP%I,W(,)J<IJ->9RDp8/j'<Uf<7<3YbAGa)aL(g<rO#hGMnm7jT\],$A%[f]BE'PXl!?\6A6;%ZNhD7M/^G,DX69;qj,A
%pI2.h<\ZRj@nUJOE/c2"LH[)@'Tg5?0LkVZF_g\@+U>WX7kAC'[c0OqEPb9r='5ciMQI`H8AZVL:"H6%i30(HXu8^>RR8p\$r`e?
%7XlkjhLG3b%E0rE@og:/<B<=550iXr&hjq08!l\/kWj#k0ISd%S-[n!>?$OQ!jo2?2_)o:_rV.V<'h32@\5plj4JUR[epQ)biQ&7
%I#:*W"O#s3^rO?DBXS,.e-:u%Y7OWjm&E$[?fo:-P,_Kj]@PJ\GGaXV`ba.]fI)S\:uWX1bs",0@:C!r7SE7`Zpk,ib2O]-3Y@0!
%'fh<`l4qO<6V7&,LoK#s/31-/3"c]?2`,5E%s#0R/s6OCI7X5?-F1^E[KU/[iGheM],H>sO<%ftV/08b"\^G(lRh\^Cea>E2JP'U
%dQmR-3R5^F%^M'W#E9E;2Y,I*:`F\u:g@,Wa@I>(R%ocqLI$)AieF.FCC:j!ehdW2BiP18j(T3H>#Q3cMP2@T/M5;4n?J-[jltm8
%ga7^>/9FA!f<b0(AunKY_aK1l@MFUr8X`hD$aGsJ+i$>tBuPTKgPK`Qc-56?R#ur/*T1%nr>B,iVOAo%$bR?j;r!<=N4jZRg61k<
%.XdurMkGSR$P`Jm;UU_HBWS*9&C[K`SK-c2=]&Z*6IrGM%rEF.+O4K&Vj=RC'DdlGj8+4#LUOC,iAsa9TgUM(Cdo%?iG1AG5]N"o
%,dFd2TTVg>3B2[$#T"80LsUkXOD>_ieVCSP:N=AkZ#`>+3DlK3&-di/S0')GZ-o`?Op'2HaqoV0NIh730*)c,&5=)mD.?DDPt4IU
%7H]u;'@q:,\,bX^\FP>oA"`n[SkahblE_m-(m;:e'g.$$$Zl_f0Ag(9'_`V-*pC4]&H?;XR@H_S8o3]!:g`KK:u%hASQ%G_]FEP6
%k."g#ddsHmLneTY;8oUa_2uCd`5B8E?EM7[&mrr-N*J$uML-Yd96Q"EBO6?)04]*uopOQYG]BSuUDfpOP"FD1,T$"@P%+;MT+mbN
%MIYnl0EZt85Fs?bC^Pou?.+'b6_)f`IQg(/*1oYD#Mu#4.tdP!RS$5\E*:'@BaGJo)Ht1/NIW18?I3ZFXG<Yc\;N<V<+C5Jd>8Ii
%M*W=-P"9=Z$,Y6/dP\<fQp.G0I#4-0]qk_*aGC)rm'@htK6h.o)d'C&E:]_bYnG<,#Qj8;f6.f?:?CQ)SMu9<R=mJCb5<6sIGt;1
%/VUk@$Dgi.R,[b$oHhJ[pdV!\E;Tio+d_a2B[NCT8bARPLi5H+XnW]\&#a.9Ce;ZldZ-s,R4Q!1O_?DgZ0IWWCo'?K-87o!B6^*)
%-.&J+'NLbsB8uuN,d=7@5PV1N3Od?8.3,:9&(kKU<4kJhT\P_sM3j$7pPnih'IjpO&k,A3dVAu[_dgS"+Kh).A1!,*'JmSu%BL01
%UT+@>8,t-=A?_o9!/Vc8Bu7THSi/tia3I2,r%+$pLk?rAS94?B(#^p.`!AopZ=FIIS%;PbT6V%pnKL_$^u7`i&1_pi\>"*M7Z5i\
%$=/AV792ml4[b-5Z/kR<SR`HQTNhhuX_&@\ic6HV2+e0#B"M(_\^Md/@jr,q,:U@a7/IdE!c3]d1c(0#54cQA-1KGhp4MRa,V^pK
%YGA<OKeg_gi"<HYJ7&Ej"UD>(&,[o++C_SE?*JGE"'$a<gOScV$3EZA^l,#.5e9GY*Z>:gV7I9lj#R`Qg;ftnY(7f-@o^+WaCHHk
%;%K<F<b-;'IAO:]$]`o^pH=?T87,T*#&*4qE*mdS#`*UdmlsL]r!l]8k*[XeXJ(Da*dGoCFV>'llkM]KOpbXF(Bp=$S/8o)80IC,
%-b1HN/E%HjHdP>u*o+DbcNQab=i=q-]hf&&&\&-a&tYqo"1eA&I<jD*mgjBnOY=[?%$I'E^h3W4Q7sL8J-XS^jW:2P?q1*pO5PWP
%HZQGsLSqIt!<NrP8eP7+c5@nHT.FRXc(8/uA0]3YYNAK)>^_IP:5i*c>&ZaFLY=GEjC1MoJUKm%Jco%*+DFsfK7#S-JCD;'mY.FH
%FP8]JTstNm.RkhWYp/-1<%Z(J-q"^#>&tfHTYt+lbSp&CQpa1ZeKK:f?M!?sC$ka@[N(-'1GR)$1j)C,MR6q;+JHH8q+NUiP,O>(
%JC=fe<iD7%!P9XU=^tQa`tGD78Q#8``(/pH3aNgCK'&oFUq!AL'I$;u5k8nWR98>WPV7?;TT]*%aJ3aH"RIB4,N!34!b-$MCN245
%h+%"g?>#"&Kra$&$be,f<A9Cl7I6eld(']K:"X,.Sn!l@^b5+fHV1P,de&+@1@U%O=nZ]H#;7<2R0GG>Q!J=h98/e`h:1gu,r<_1
%-2(PjA@Vb5-i"pTPRp\8(U1auZ^45D=UE9'*_.<7kiFc<o,iaOEL"uC]e-RR^;euV`MFO<MrH7('1M9D"(Xf/=PCXq+lAGN8RoQ5
%33IWS>SiHI>*nFh$Og(#Xe92Q?cjc%M!k(>O`<6@pkhVdqUQX!+lZ8p0KiDb0JFn/$3E3onZ32Z/hq"L4c)*!`$Pca<JdYmY_Et2
%6fpIUHoOUZ5bTsX3_#eG0C(Na-FYtm)r^c*T=*0j_S8Oac3to"cQm?to=48*ZBU+'C2Tno^)nA.5c$FO&4ekq_jDFTPHWP,EY2RM
%kM&=C=<IXBquC3\&\-ouCOl27"t5o*GGVLO?D:uY\=p3]J\DFh!@O$-$rXRhOF!%j*NmJhfORem$Rk#T4p])NV5/$?$W^+4*q0gl
%r#SH]->O5J&U@NM-#QI\]]+ejf2EpJ'#iWB[i-J'FcfLUQe7D3TB,:aI-\TQ;Jr=MkL,Y]Oh9g]6?!`MaR=)&Z@]Qb7%NmJ%+8Ab
%!u!XJ176iG_UX+])6]S%p#UA.2XIiURDH<]*\LlXUc`Xd!$Wb4IFC+T!`;1p0r_8[#YL=ISsZ]IQFR2t:rlmTBI$a%oD0GH5^XR7
%Ns\kJp_6jp^8qD7')4rMM5Pl/6%nGK5h5q>8kSqHs0.2d$i]8$M87+u]SM]*&/Buh*@TaH'*blg$r'u8jK-!l(8Uc3.EiHP3K6[&
%3TkqX3l<*Q<7%:?$7Es8)IlC[SB`K5X"\nnKaZ::!$o_Tf&NP1bT.95*rCqZA8=m*#hbE*jr?M#\H:d3&MY2*fe^\pQHT&c"6lk&
%m1+J25,0F.>@U=`Sun0#0eG0*XLVR(+tYA3"``nlji<UUWR$emcHq?e`<D>A-FJgKCIg0O-sA$O'##BE7C'SRYeIN4#)TTaKXtHl
%[tM+Tik*,T&TX?XogjHn:P6-e3*=3@Z&u3/Bk"rjnnhI%8VE?P]GY8KqA9NQ94-Qo!!qOP[XqU2%'V"</&Is&q=:2^q:]T>DH8#8
%J8AJsfo\f]KBt=FHp<HD&9ii]_2`uq&?ZDu%RmoWY/h/&[/9T;?V7lC38/mi7'U!W^63.s?)cJn*7n_!9-au-O=[ZV^_U32nne,g
%Q:p0F&m54D_;,>!<;]rg#hdElaU4AH_HiId]'j9$WI#*WZ[*gI4O&%!S6D3^`]@+Y&c8;]"j('q.65U2N9#F#K*4c.IH6&@fq'Z%
%0eWA\p&Zbrq8j@p#hDg.#Si,O(]_^&NWh]p/<;PTAh3LRE`"2"s,oZ;mLA^"22`]]mDZO78b%li6)KoccQLTN:'m61p7qf$]h2`g
%f.[t!Q,T/GimUTqSm;[`$FXjspZTSnnh!2iKo<`+hbRG]NTHR$?'=n.Rc0/L[^K(Q`M#XeVYh\P>hNa@n9RL\Vmqo%fY.s$L&61$
%4:0W-DnHGB5u3RG^+DQ8V7O0KLg4VrZG[J/Gs3Gf+&d3W5#_;[Yp;p?1k(BO=t\9s;,-)$SBOJkRM2t8A5aI&oSDrM^uaR[Le0+3
%?lSr6)B@pU,7N[<FNQc."-DF\+?tGX<=l^dG;/I9R;uBK3AdUE1j2i8OG0;Y8W'2X%TjGb._aBXT[8_=/usMm(!l<X-R0PWEP<uU
%Pbo4+>-'#q`^m!^-7P_P;Gj^N,u;`61QE,7oL`H*PKQ;<Wg-,/[V-4:N%`c`'W@`plkM*]\Jnde.$$ABaCt)j&mU3'O>H_E),bW]
%WU%s?!WlnKm:A]^4\9H&g"W)<>RDaSaR:U77E1T`>)JR*2@-%`8:^9E7qWh5!HVj4iq4cRAX5=X/o&QY<!u;UZt+:M%HS?^9,]]H
%4]`U1O>bCiVKkO5<++Sf80[B/_]cq4NMp/q^sLfE?4t=Z&_8p>Ka//r+,"@pnQQP1UU/P^nR)u6aca/]8mq)f&.!tE$/]D`lk4$`
%,]Qn^9mSd4-T6DRCKfk>.7i7U9Xp;uTZEEs-CtZL!ZK3%'SK8iD<RQ=K59f]87&=3$W"pI(g"%'OD\H4=[Pib//fsg&A-2Q:#T,o
%S/SAI/IQdB`)oA$3jMOF9UaL'hQ2H!j!XYWGW<KsjFmj)bpZd+_@r`U,$^/fg]&U_g(1_4,8EEtgi+FsJ8`23%k)mlXuHgBQrMDI
%Xd,VZClF;NErL!Ao7+U)EiUPE:]`0V@N/=Z&p`8kN1JjY1't,$k7kFaCtN-@A2Q*[M;2:T'56*2;W,X$Jh`re<=*4&N?a'LM+@X;
%VgVoId=Y*M!pK@#\<.+:`4#L$-`Z)!7C-7K4tK1j7?J9&LAW"mK-\He)G#>9,8@aaUo@)IQ&ToU=hooL250Wu!e-A(p(079'%%9)
%M9J%kapVGc&bP=/)*Sab>^6k@P*j]=2Rq`#ql9_%1Q69Cb]b'-d;h_m\"eRTGK>Ct>\n5X&e*R=(_#NdKaAqPmQd.G<#2Cn)&/r`
%+hkBj"3uoLgSlJ%7b2`,&:7[fD\B$#[k.=f5WN)#%#\Y+"3EjldaAViVPQF7CYCI!2H%Z+XX$gs"uSZkTeS0u`7'Tif9Z:N`.:#n
%19c10[nC'[nP`2]-+6DWTiQG!`lDR(N-r1`Mj'+dG``HR4-3*tb?I)_L/M>'+:I.I)+2j=H=CB?J>-P0h:`1Freq3rpeDqs=TJRj
%Wh+<C;9H9XP+BN9,DOMdO.3Dj93]Nt0Oa#pi?A6ATd,(sCOSoV,!_kU!=Go>bYZ$R=_Pl0=kM^"]XH*LOP?@LCV%X*+i`)^'.C-M
%'B@5d347%(KL%6J:-Q8%/=+kR7"K]g_T7WJ"G.j:>#^osa:3?i!fM>6Wrk>s>_HW>U`6%.OifV?WEWmL_3NE*$Pr,#-?'*=#LE1:
%*$6%'&>R0T&mVk<74o[6-\u_I:m/.7,s%Og6eQp%Vj.LVOA2&(G)XOL(BTgC"V>?X)p3kR#/q?'eQ`UFP1]=J<j&-C'EQqtq7(As
%Jnm=$#tj*ng;`[n*S/F\UTkR0W6CT[!ku8N:n!g!@`X@ujWu9Zs"1NX_KC*i3-&K_RA>(JL=6n8n1?Er^MY#q#_sb56@ggt."FDS
%;,Cps`f*$-a4oc[;)&kWG-=N7WKc'"/[=FNqed'\SW(KTZ7@+4q'@'Y:,!;32HPm<!5A5ed%%cELn"eW<=h(K8d*5(a@;/NF-/C3
%$m'jO^>t:?o*Nfdc7-otS5=hbiP`)Hf<8o)EQhGOaKi,?b_I$^/iskLZkZ(c'SJ_>;AdgXP+Zs\cW;itX&DM8Q:qFnMNN6]$^^%q
%LDGBWfE)'i)i5jbJY\rr`9FZirF@t?OQ9j[5+LIXh[U6Z5i*"$*:;<J\-h*/TS\ScJ8P+)/mMl5p46Jjpd,Q?cq""GXuqjI!F_0X
%!Y$_\XtSj%I!oE)A/u-aZ49.R?4u529+rMA,M,4XSAV<i%Ku#A?*]bi3*mZeM\N[Kb_EiMZfsTB]J^*!96i/XQ.YClG]/;"CKQI;
%EI1T<G0*V*.MQ#gG<lT%i\3?Y.rZ1,%Cs7d^:Z*r,Zec7fS$(Lm":S,7dO7ZFb*Y_m"[#"b96#al!o]HOWUAh.rTRHKa[]5O>KXI
%mHA)V600=#TtLSjCZsMc61B>*"BEI.8;#Q\TLCKKU#a<*XI.@F""P"`e6F#-]96#8X_<iWpPAONFh+8$Zip`0I+UAR,^V(dR:44L
%ne^B:@npD5b-.lI,aVO#:u4V&eU`UG<sRQd6:>olem0a5GRd;'nQQ.oU]Fq4g-1Y%q/U[1MifO0/.&]n6BD3\M\Hm0W=g)o8S\-9
%Ht&XDaEZQ>R:!1/D4'MqjQcN61D8K7A0>OO:iR7>((aW^+uO$D,X"<b^gu.12.#!+F^i<eP8MT:Z=+3?PORS*]Ej'=cYUG0a.50u
%,AGUDmjIohIcI#76Y2jR2^=\(87-4@nqZOs`3q3i?3s'+`47#knq@d4`fY,9Cj8Mhf/7YYUI%D9>b0%VihA0Zl<knXqc!E+C*GJ'
%ZUrGE#qc#K;'5l.rhK\B68=M]I^ucA.?K"se,4TtiYY[PCF;-:bRe!pl/'GC^g+ST19o#6W.6io>QdLhXE/g'/;WI-VGEC&o&(29
%Pu/IL$Nart-P],Or#Cr#,TGc5e"u<%UU+255RCBKIKSl7e&r&I_=bSp]bX7eNJ!h4PK/H3;RMU%jq)<!KAMFefb@T5.C)u/72AUq
%aMR0UR?81dX-b+&Vc%'AFG`a`MQBfOOi>cu1,GIFo-HiV.\t-.ga?$2d8YuSOq_'Bjq>YS`7m,se\,>u:up:l\`D6,_s4@Rjn%_A
%RPBq#s*q(rRpK<B,<9iu5l]e<)R'HJ.$@"7CM5<PJ:S0^K4i!+#JJs!Sq1t4L:XJlrVO&J+u@=jf"V!lh1-m$\[cJj=o;lDA40S\
%l1GrjhtPTO:V1l\F^Ms\[D7chGgTejh\n6>ZGsiW2(%/o'9DSO2I9kPk7SHKk3f4g,:9#M1%DWj`1*nkqIRU`q[sQtceoQPcPd#a
%BuIsa2'uY]R!;V)>i48UYu>36-b%cO\"lYrH[guhk9[-f6eso*h'8ruO?>;og5<OX6?*.ZUb5c5[UMsk8$#9dYpO>,R^B,.h#LB%
%"\bI;?n+;@VU>O58h4:!4T_M'$CIi;^sqlWQo\9`e?K(PN^pla?N=$?Fkd!rkn,V7=27dA!E8e+0X\*7WHJM?o`r93?NF*G$CEjq
%!E8.gQq@`o.R*s2apOLc.q#B1_t[rM&#=4Y;Ydq/KiC5PV"1c7Q.lsM\ZSKb\g!F*2-a`9oOA&upB?4FE8UdakC.FTTu1sSTjnQq
%JC'?=#^p&GkkPgDSlZJL?:!fN&VOIl&:.\Kka3=t#eb%)#X,:4oFrG?V]d`6\!pX0hq`:QV6$lr6uC0rWfQsDFj2;6CHbV/SAHi!
%XK>'+I7Z1]P]9G4UK^CBh%I\i6at%Y4qbhjCfh@iN\s[M?PCE,A"m(/'?/C_.$bnf`V*N1fWc]Z1!$pOMIG8L-An)USg`_Aqo&OP
%a\)4\=0!sa>'8*?WfO\oA]`KFCT^]AF1'GZX-M7@Xn7jYQ.K9CZK>oP\8=>caN2@mb/X6p<m/M)CGsJPAE228mM>V(Fj9BTCOT?5
%bjRUEr2tIin*5u0?2L)JFY<JqoeF4^Y5)@GamZ6jq-Eldhc88*Y5F[EQ.Pr:]]OG"a8E)Mc0m,tITM$Cmj^tZf<OI^V8rM:[,cG-
%28:Y1Ib.NXnjmc*Hu.p*7#FW?;dAm^iaNT>T>+@:#^OS'<tJuc1_nlbd6YEG:2)1`Be&srUoBl"RS$r9<4^LWpfjP_#ajc8oh%*h
%H>3e7,L[oRec#F--.=+mR3m4(1s&O]-D4\[B:AHMe)Ybt1ca,\P@Miol&V5ZA^*'r9;Y9YVTG_N.j,H]X8m.#&!/p7N4'<B2UY$O
%b#\g:\k$/V7I$$gErO570;ioS\tk8F2-o8W2F3&bM?"26RQ%:<@aIC3A2Uu3Lc&b"q6sO^=BdQ!g6s29T/+@-[Ub3U2+)2@%'c^E
%2@tFp&:p?`)>jIsc#"ZYBD>p,e(jggd4_H4;lDm/fg,3N/#oeTW4j`\T7.`X^9XL0b)5IGL$I-*"4c"(<*rd*I7^BO:]"I>e"=Wf
%9XnTAKRPE#9F0QD#[mXR+Fs?H!:D?=puFG#5HQ.HB0cOd.g!4D,(TD&!F/Y.E$59b+5>%E8D%^!FDBDk<I;9,Gai)LT>/$hGl%j-
%4Vn[u^'VaDm8P=Hp^Z:8.u:YB`9RlooE,JW2m4@\64iU``D@$sH.@/k=?EcZ)Va#^i`9K-or3M]XXb02?a7-&&W<,Z/FL&XEK@op
%hI`^u>dkf(B,tUs5YOsflNr,8Xs:EU5NP'1<uJ0%m*NH!"hL!8?RbV"2%oRd&CMnr4QU281m4mG)lJ8O(d/4T]i4cJ=ueM4b3$t\
%&G"dJs*%'pm#!*daTn]QP,8I[-f")e<2+*9lqm!3qP&$X_1nr8X2h_n+sT_VT4kuK6h"p:#PB6c7d[j*=7mCQ&`3V%&lp?:4RVhl
%NHITdRMb>.&YT(\'>FP&e9ZGubS.qDXKP]\,W6cbGZ[qI<kGroD;Y#t;XN&YqjWp&SiJc:ZtX*H_]uk?MF%g$(hPjKqMtl,UHVFo
%\1%M&)2o*ph+c"CPBaRl%A>(.'9sYri-Db&/.F<C=O22AoV8%fb@\*51(O?oPsL`QG`>Y'F@f!:,bMJrhHWcpT-n%n+ehsg#@=J+
%e3f]J?sE?$K"8ZWE6iY\PE3]<m0ID:An.8E>u=3X:ep]BhOUeRM0,_$r-A$:OsGB:.bRpOh[F&[!4BLV(t6Z./>VoHNP8?\)Dl0?
%[ZfP&,J3.";FTXX#m2p[T@W/9C;VKr*MGGp#AI8X)AFD1./rUI?9q4hE.il+]IYf3[7I?b<[tpXRjBNCD#2u#s1,ZR0=&!ccl1SZ
%VhnU])&082cKIab3-+i^#4VPp8<MVu$6m-=D25:9bi-.q@C[gr-RH1r6"IGtiM2=G$'mr0"(4!m#>^N(T?&l^7l8(];VETiQ`(n4
%9rIRMKl2GPcDGg/(^@I2h9n:tl):N-\b+?;&Ra-%&jrU:@]4VdB=Wl^:_R6cQ&_b+O&"@S\JbDm:$jJQm*RKJ2T@3/9HFkj((,f:
%.4OI)`rq.r<XeS:\Q7I.HE`-oKXsdJVaHFmWC"c[H-8n<0la`f,>2#8"tWmg[:;bJQCTAklH98mKFB!U7GeG'N7PN%LF,I&RGi3J
%L-FA&J<'>8Yo+QF&QH8OM42CJf'1"S,`,,DP,@XhHPAW^/6!.9'tPBpJ/)kWY-e<J:$"_D+P_*6,m0nI`([.rBPIp2#m_$uZb3O+
%S`Y3mGsZcAQH"L(CcX:GAuM35GKV5(V@LT_F#"X$&kP+3n@OH1PG8`aAr/5r#pY(%k^H^j9h?3F=?h0s^!Fljn]Agkb*)eAZI#`4
%%5EmMBBR9G11`@Z-.i::/DV)0qeC4UX&:lJ6MfrIq>IYa<t`_EO[FdbcF0/,C9JE6#SO,qP;]F6*WPM7`*e;2S)gG3KZFEg:.Ok"
%IK<nao#d2/TBR=m[-h0F!Tu0aY[+aBSdCQ$@R*aSKp#E#[3Z$'@A6[$DD_1D?m=O$^+^)$lip?9k&gDQX"Fq5FEE>2cPHI(-_TI-
%\V8!e6;4BM@g:DfGV]c=q!UlZ"jOt9#`Cf6p"mrO=K2PGYsC5g]BZ%#AUolI$J\Cl2!J:S2*m^N.Ab+\4a9p0Yc9T>:58?[>p64G
%8e.iZGF^a.;YCP=i)%_lG0DP2`0/Ae&K+3j;SQohOGWa.C$%ilDNc7haQU;fW^.''kGrO%kr\>L/QYV!8\%]LO\bkV(*9"&S,IGq
%Le+kNVM4j@TDg(7eBEtEr2C!*-kcnJC$OQ1LB:8Q7+IYd9h]GK,%iYHDt\WpSU,gj.Y,!bcgo!1a:geDf8.2ja=M?]D2"R"hTq/Q
%W&.$(0/NT;=q;r^C!nTu]31E$k#V9kPL1ut*nIUo$:LA&NnZq>8(]7q?PttW)[br#beMc$J(b&1<s0?!,dK>oU/'>DO_MrC/=WTQ
%W>(l63@/:PPh%Id72$)2N6>mA=\NLLO/$.fdt=gr:>.L?aE2-5i^=sD`;Q3lk_4"O:C-lG>LE:,_.T#ufsGS.bhK212=>uX)6KqR
%l**iYF;Q@bI8:bC0CoL.kF-\O7"p4,P1P.6O)d3+M-uH.0]c/Cq3uCiFRa'-n=4Nd:S^KuqQp9#m?_$r*YG*lZgqhEA-%aLD:S&I
%esVCDJB`V$HT&#[q?cr*Eb7>Q\Dl_]bn;0Z"1rguK@)mIM@;^+'ADDKkjH+bKUNc1F?#)?$*K^L+%08rP%a\KDmJ$'a+NkL1V[a=
%`keX?Z:&..6%l9p,stNi[8_.R*V8_,[k.hE7Wokk;L.bTk+9/*T<-;Vnq,ptVb:,@:HaH<Ku[!<"/.eZW2.m-r])unKUY7[iB?Xo
%5:X[as'`=W<&$[gp:^H5!=A($C.Q4rXd&scmF3Lsm()HShPs'+@G&<-R3sIaMiBE3g2F6<'d%IGM#j0"</FL_27bGFQU;7CGm#AN
%9S*qrGI,HHLuWLlPi36aY&iCS/>)W/WH-7E0r`_TDUPf'e'Y+$2G8ZHRfF\&37W'4iMi@j8)4+JYGQu4Vt?E?'gY9B]/31sS9ple
%mAGZ_7<NFeI250u!R=%H#B";;$,PT#mZu(o6o,gZ%aT^AeZrhMiFLBi1NhCH-("p)P<l\hq,6ih;/:/k/j(!oI?`/>0^18YE+(P1
%;tJI$#l/:"eErKLXHr6'QHUNs_(JnPQ!'*6HU">;WH:/CNn_+6iP434cU`[`b[N:R5:5t`/\sJkk3Wed:oVJi+j\(tR+B]EGG/Z$
%:D(9&G*rX)']<,6Jb)qDRlMMf[:AfA(;*V0$p^-d/iQ]f.jd!n2XAVL)OPh4%g<sR&O"1`boHF6PQ-kls6G;*0ZukW,Ls3hVo:Jh
%(a%kr$L=CiFELY^1Z\Y+]NApo^$N4ML3(Ap!lN;m%TG2SPYtS0nC=)$[YY!r,(*cjnX+AnJfkZ,s5(6ON@)sJUEBIQFuR6j@eq4G
%NUW/dF\gi[LW-1%2\WS%,l)0@YDfHdgFRDti>4Rf!gqi'eaaEa$Q<d8F'O^m6HMiXI[WCP@t)^@b:r<!!*@P1d*h/CeZk?*17L`0
%%iq1U3jY<Pb.t'^#%)Q;+g,)+qW!6V@Q"QjWn_"7l^4/9LKr7+D"Ot-E(JM75;'9tWQlPJWX_(BQ+1$&h7@$%C,aMmRE_HN2+)),
%Y-1<D6Mtao`XP4gCc[L/NH3]Gr`f3=Y7DDd*RCVM]`/cBGcQh?;ehu]+Q1%H]fLLiAoa1^Gd;6.7<@P-C*UY[#')u,)F,@fVNHo?
%>/lk7j*E5[aaZktP@DV4NM(`FOHcM21"<"<?Cd3WofS^J=_]fN,##B]qT5512EUr%#2LH+&dh-_:HP'g-U!?kLg.`J*A@G,ZF-&k
%>N5GaATu:"&3G"EjsfnTeSaVH0QlPj=9_gQ;)c*"nI<dfG3ghIcg5Md)eJjK#[98?=]OC#b/9`^+HDEK^Z`*X*KjlWZEOZK$M>2q
%*eJA=frC4"/FlcT*p`TMj0/KTpKrCEGQ7()^]2RQhu;XH^\boerpbL;p@nUX6eVH%2%i[+,Y0Ngs82-V"T+;qmmqcHL-4O7G*F*8
%&'j4.aL8Xbs8.$?ja3j&Tk!t^o$S>h`PoJGkQV6e?[k\mZBbs&_Oi:hVl9>Xs5DRZAV!:#N=I]I'Z]n-f>!mZL5U#(17U@+G%""X
%S(5*LqP>'-i,\<"Pt$C'f#+ub$m*Z7)/1D2[CJ%iVP7MC'MD<5?jt<OF]`Sm';M2=R'[P6BVp/G#e?Q.>;i#Rc:/j"=r,JM.q.F6
%K5""8#F]-#8=Q9qbYIYA-?pW6<0b9Vj)n@X'ct,)G?5"lfoFL\*X;.2f8!SpWomg;IP((8EmbasR\rJeAe1E\Zp"&(\Kuko.NX1r
%=dSR`#W]$;dt?>Z6"Z>.P?gG<&k.LS54!%6DPAN0in\inKAe5*/De4N`lo9g%d,mu[2<,aTfm)@'e6q`2aak;g\Rj2#B%?";7[:n
%fAgh1"V.ctCk"^iWae!l5Ccai=<K/Qq(&nr1[<@%>DAtEb#n6s.'D+N[O8#R#oS`-e83)L.!4o=GdB"p>=/*G==$g3iJVYLG3Aa#
%mk:gC_p3O^8D6LYjRi6T*mbeEr;l(Ds3*#[^(-LfBhp`0(Cmps0Ykq,X<J\<Ea9Qga%da#Eo$>!-b;2Vg;T'RT>l?6J^EBn7^R*s
%]JM/m404jcoDG-;eR?UTl4e83k90e9B5.L,RgsSo(+#bTLjTB'WcMl)k;_W6c>Y30IFt[@Y#r<]KKQu*!J2r[c/]9DpO39)$IV+^
%,=uFK`J5K5b3;Fg,EH;eqghbHR1TDS%3m9T'3%j,LVEY46OPnVQ$g_<&rk+QJ-%$9OsQ"V>K8_D'5pY7HKBmA$PS@Yi**m&O6R/h
%Wk6XU@.NB_P>QR:M2H/(!NW`i-o[q)Tg$KR@5W>6gso)I4^uc+^YMU?BU?f)hi;.\V`5rW]`nl[ksQGPCm)V6SC"#YPB-sinauGO
%17,_^rX\T+E'L'Q!?uRAc"d5MlZAR0PXhsB&705q[X49\EYFPOL3pb^EVJm.M6:9V,8>f[!ijc?eEP`W?6"TRRDH^-6;R4*Ct^*-
%!4[.poO$`j?ih.^,KUi+(k8i-Eno4(57jqH:RUcX,ji%OP&e6'aF^CBFC=q"!6$b#mGL7FGlKIu&/Mf<'-3)pAGkH$)9sVa2b/D#
%>F9G[bf!t(E>+2BZj2Y>&Y5QU0'@l;+JrhS>n/==6YoQmA0]_D@*1rG02jg+W$Dur6LVL:hG^4kFlOO9q?Q'/k`B7g1")LtLXk^1
%Yl,HeJd3'3H1cT\SYQ[O+kF,ec-^qt)o:9Hbcu8m12tJPQ>DXuq2$lU+O"&>*6+]+Z85]MUQ_W*C,:&I0/^-:WPh#0MlA%*[_Z/n
%B;hC8TbX!ZFT;HrK2Boo/.g2t+QPBqbnlcr:\3l;Jd#6/h6#RI/H^'t9Fl$c>`>RgI>Y5p7Nb9UJ:>)QZca1\;n0gZnT;N#XFXKf
%VUlrF+V%ea$eq!F\[EFiFjCma*;E3cL0*p7mNF<B#oV*X/$FETjSo0n&Hi>l:Eg&cruo$-Ro`scR0<A'4tMT-VBLX?Y*<D;5B,o^
%ADL1Td[_)ar_p(.+g=><*o[38\l5gC%6L7dVe`F2Z,ro9ku3ZjLOT*VDp;ajf1+*ani=L:LYOf.<ZrTY4D9'5NpuX=*L6Nbfo8?g
%*^1bhjLjZ,\QC2ZauBf1K=+R`_8n.hK8=mf?'lu4BJ)9l.*]9JGY;)TT9d%"E8GCiSHZ9DD3N7s1'ea>D&t+R1Tbnl@rp<6Gc-d+
%MF]!E84[Pdn?YccO(,Ikn?X"),d>7i=%+JgYeL'.8G]&]eJdm)\+^SE<(_uA)!lE,s4]pWZB9qUYH`43oi#:sC,U,to$Hnm*#dtL
%*'2ab2T,f1:F.T9Kd>;KJbW^,?<BX^R`c8"Z5<^H;$;&oUSPq+6db7K5Y-2R&O-VEL+#9,E@t$TKRMb#G-q<,&#<;LAlMAN0b:sP
%Poap7UoL7=P?-&k*3T'qOfoa<N-IlZ6s:Soi01"V`^kWY*Tl3[2Zd3p-_(c>b=4NUT[jh6HWgB13Ko!6$(b!bfnJZp8.C`Od<h,,
%ED78MFFW<:ZM?MG#SNX'H`$*^)`9`OKX<5,>CPXS,i#Z>G@_NYkU##DY&Bdj7Ads*D>1r9fbmd6GlW'up(C1>"^&-_KM<s@J.U9#
%1I_n4gp#&gg_Kb+lJ`\TfTr(61slP%'M$OPSnH9eUh*D??'ucpD1rc0$F8=J&tgP*ggN8fBHLHd:'B>:%fqGbVE0j\H^dQFasM'=
%O^HjO#AWD%Dd%b$X\Z9CdmB>]C-cVN;-=Q!8K>e8RUFg>VBE<]/e*[g]eF9YP6@@u@24qoi[=iC_sf:Uo3%n#s0.<l*g`0W.rnLj
%,k]*67OG>&&[J>7*.in/Mm=G!!%foFSC($$m`q_@7PtH-6K7iU')t"4N]a-``ioo=GSdpCDB]l2Jf`6HRq\dqcF[!T.jo-H9nIiK
%N0]RL</6#>9+dZ+c$dGOpbkVa<_$T9@4-L3B7qkqKYst4gCko^8;C%F@(2m41+=6SQuj\Y`eJC.</mCRkZEQ-aSN`(^/"c9*)_]+
%-[Cb198MQkS)98lJ$M^/_)V:nj0ts2;6>=9E/(U:<XhU">Qj+_D14'']+_MGf(ie57H%+2++Ieabu`k^4an>Hl>pmdb?'Q-+N'aq
%%*7N1`a-?%0.gd74,n2K4!K;V"C/g^@7Fq<cNShtbtT>q"$ta$V>lM@Kh4uLfaI!"g6j;L5i9@]mmb>d0W8d\=?$g^'.1cgL'-"o
%-2Zqe1QCu=!")(@$I[!42(&cPc\BAWnIFNd!3P+JX9:,j//mdcEM_HJ7IPe^AO(tQ@S%aJEJkBq\l_L*PXE1Y!O,Bh<Klc5?gN<F
%T4X/#!r5)`*6q2(NHb!poi;_TUq>+]PgWUBoGiF:D/EU=IP/a$pL1ZBX--#D"J_1VS.'R(BG-L"g1;c(b5'?d,:"ROah?_s6cZ8J
%Sd(Wr]g4f4!*<&(j1iQLaDIkX)OOc!5^2s4P^2QhUq8^gV@7O]Z.ilujfTj84?k"Ln(e6b#Vo9jM.h[Q<A7pp$>'R@1EM2s8FFrC
%;%r1!QtfL_eUNM<5YJWK#\+VV6(l$!1s[?X<n%pQ037>p3!A3!ib9Z@'09h\<,1B(;l5esg-%kG8XnF>).:&]UmZa(=:FG^.>:<\
%&_mZW2U2BJRUkObd,!d*i92VUN4,rpk,XZ"fI`s*Ofm6Y6r$Xel+*4$em=DN5J[cLMJS\`B<l&iOlR\E8i[WMg+<umb_L<p".kp1
%I[h!l"YVY7gS#<9rNmEu&Q_%?5Jq92[#I;JUs[_Ho7Ns.KD<#]c(ri:0Q5stj+GkZDI=_f[c2#HENje&c[Sjp4LA\sQD0?Rn]%,b
%="edV0\>^5QN#J3WJg]=3uBt()57?scVd>s*F+M.gUjkb,(&Ao9d>'_*+tZ']m/f^EV^tUfn`gaq1[Q@jm%)R8WRDGkh'bFq)Li&
%PQ>VUdU6l?PMV&a\ch'H+Fkms!DG2dlk<;kaKQ+;)&'=D1Lmr\?$E2$#u0b-<%#^#J=JuX=m5WHSRUq8H*F>OC=kPQYW,k1IMuE`
%:qH"k;n<,+bC7al00p57-^#=AP,T+[bQuFQG]:(`KcY$/QoC)QoSY,DXi'e:/eb/<jhY?k)($#,^]4!]&+1Ri1"r1HU><?gMV$<J
%=lmB@9Hb&`/8:hd0qstN,&4C,l#S%j.?W!>]J%FC6L,RJN"a;!kCq=<Lh=)PBZA\<dU8h)es\A#ei:99$$Mf2^aTrMjn1uJO.X20
%I@"+)4(r-pTT([DR;LrL$!?O>$#LN$_A>Wm'&M1qpd^jQ"K"Ia&r\.p(eoVU,WY86KG0jW@DS_%Jk%-><iWL.$sJs6U1G5?/R._R
%"O"t(/2'9oZd!SG_&JSi2^[0gEj3_H$Vd$lBS*@`"C"T>g6CO&$1aQ@PMZL7c7qk1N(GBm9KLi.Hm>^SR!Gtno*kVi,PZV;kblWm
%5J[V)Je9DUK1bV;h+,u\ELa.Ohdr,N%Zjk6]N=U2($BEQr,2DUn)c`OFlIs.ZFFBkMpqMe?XeY_$pbHb-jr'&*_^/Znp1dp))GG(
%B!gJl/&@hn6u1OFZo/cS2J6P>]PUmB[KXM%2A<_,'3l"o\6t5q`YKB5k'\SA$OQGHluO>7hLhRU'\3(SAf%OmD.:35,>&^+Gh9*H
%4a-T=3@e%hC^C!*M(dTDJ8<4,#8,07lNRT(b[ueg'<Oq?Xiqo[3A+LS`_fZnULmu@fo4$bU:a((6?5UGViXdd_<&$n%+<@_*tllh
%i6ZaEY4M!24[a+A$U33jR^;emj\M<nIuG>Fc.kQM,#j1_.&_l8:^mRU;4T_(K"S$Vj@(Dm*<LhF$Yd4n+W5"Bk+kS$=_VqhV-m]b
%B!(M5"j`A\\3[CS)I@2XG\r8!NsA%X]S0mAO@HW\gH=,bJhgtX:`[A<'kC<]el31Mob-9MJQ"Y^puaZV5=>'kHI-.i#Z?=4]Ekt(
%Q5gh6_8N_b'3F[GV;UYHAthD'f/nW4((<Z-F+cEfBT@ZTWQff]6(G:eEDj"km=TOf,Y\*Vq,Z^`)7V.2CDB2`Q8K:T*[=PD/%P+s
%P5?:W\%C,E%Plhqa`%K#DOjmNK3`[3G28hL/Pa,DBMR$XM\UW<.JQ_l2)RC0C65K6K3U8n=:%P7#AZ$$*l6>EPcf/'F<0/?e[]#l
%6Ym-bfZ5_:@MS%hgF'.,A#.?_,HX\@D5OHFNnZ-FDU4GCAk]^#R>W1`;!&6BnfHSt_8+eP#%"(iXV4_'i:O.skrY8^CG>bm6ZB_,
%gl+b5"HRLm_@E_WOV3j8,tNl`]f;Y#?L/BH6on\RO;YjT,<O^@PE1PVfpJ&Z`2n>,`374T]gb?R'F>Y']le?ZR](-FU;"W`?>&fc
%?pOGhn"D#^K-ibVeC,s/*5q/S,$m3Sp(m;ecJsr+j,c;3_Y5%'n%f@'S/"6?j3&^P4D<l$VjSW;oJO_RK=&?uFIc/+\VL1U2J1k&
%YO3_J^iTekqLa>Pkb1`lK\pX4Yn"J54u%[/J+tqlLS)Sn2=ZW\b'")VmEjiFC[@d#eHJ\']1hLA-JDC'"+1ZTQWYk%(t;24W!CXp
%%\E>9AD_!]ndmVG:>?oWmVQEW2]DI>Q:<gEGcVfQ([mUZn@Yc\6]Jbi2>4j_Ifr,enCY5.Yn+_Kr@.kebkO2cnUj%j"b1t4mAF*7
%5#ggrUf),7p1Xg<VC<L@+j(ODH7h:-DA%08/.GEfBn4PA8<\dY5QePm8cqs:BMp+3fV`n+dg%].Q$uq$Y3X<tEV3IE(NkU@%)(LY
%M;q]9q@TaA:)$7$er]n@7_odtK#'OY#Oc%3'HXUIE%i0,?nr/)_\@KR6&\oX\`7'ogk.mIGS]VhZRA/[A!U7-4m!f3bb<bG=/U/4
%S^O264WY$>kTeTOK?C@BZI6R7G6I*"1ZL3@8Bc<ETpK?u^#7Vf_6k)<HmKX*S@PiI.bZ&R>pQfuC><A02O%?:/+gO86.Z)iT`JK>
%SSKX-#8uJ9A:uQshLi);:4\[5T%k_*;c"S@;<$_+M*i&l:U92:HLV:+`?8i16-pHBNr(BJ*kL`!FPB1=4fqS`1e"g,?Ms_oM9;_>
%.W<OpC!rR`L<AH))a'EHGV"L:Eh<XkK,HHM1M6,hDS_q_4IZR=SGq!Q?T9-?Y]dH_m<!Nt.X"Vfeh\%FPm$;$#%a<kO8D!0H<blQ
%Nm<,QMUm:Wa'\h?3SEGPRe;/W-J*bC3M^gn,QJp,GueWT^Xp?/\SEOn-cWaUWM^_"_pYS._sac:j85c(Xh=2,p[JkbT0J9$_h=XK
%kZAMTN:4Yd(>m;[h.3"uS]t"tJ)U0YokRoqD=H";P(*0:s3&BAe.(la9LTW07lEUZk`61g!KpA([.UlWNj'oWWmL\(+3_UVhuF<#
%:>`I!J%qGu;qL%CmTo,M-Be_+S't''kX/#4S0!?LjRm(mnP\o#0N(g6I52`0H;?4;<Q_-ec%M^8jha!,K"pa<CHjCT&Q/6#hGK@_
%q;/I7leTR(7Cq"[825]UR/d37F9_6K2dOmHD`$;$'_7f`c:uofM[)c$q9)7V=fIabCZ]WK2BDOiCX^[QD`[8qdjOqVT"`dF:4mR3
%3S\t8"\>fYQB_0%TKGWc!SL1tk20c81+tBF0`)Grcr%]_E2OTPleY@pn5!k2@>EaL=a:la56Y8a!f("=V9VLDTV&]R1\9)YrUK_t
%2!iXs?aT,d#HYW2e",aR>:k?Q@nLa%00YN6-pXRebkWmheE+m-O**ODV(#UEThGCK;ra1Tqqg$9m.Du:M-]I2Ve:?`@Dnf4%G#?'
%'$NZTXdm5O0MMFe8l>WUVaa6Z?J<f7`P:$Fo4TJQIOPMJ`'cSGQQB;*J[<JYg6Zi?9`ahT4l=b=&eTJ_0'*,+9hjKrq6u-pD4di'
%;&aWkF8rb7F!f;/?->77Eg(.b0(6mZ>EFMLXgR29c9ltCClA)XZRb]aC7\jkG4aZugRK^WKmpt>J*(c@8&e1lG7RW2Mn,?4LAZD4
%Ba&J2T7?WHo&c?hC[K33GK]Hf[.uOZXadM86q:!!n*Y=gCWYTs#fo_.6f=t;E.m2#=[;^MB63*Vnbru>"5XRW@*/!>f.9Okq2F:S
%X5/!E(Lu`OlZj75Vde#i=nOK!?B<S+j8,bF>n:;W1t1bDBMrdJCH8/^*dVnlp=Em?n0,Y-`ciYdX><DS%`D-$?CdP49eQrMhh:%+
%/S$O4FmH8\I5qJ^ksDF*g.a4`P_D2aHiQniKZ$hYi[E+<K39msq/+:`IpH+gCW;G$9&f7:Ydgd8d-E>eZ$]YYbDGc\YZS'/lKb`b
%q9])eMIdmt6[Z79b_+<%DL-$U=*'GcU/0c[bEd/8kBVDW\"XCm-Q>0&#IirBBbPWWdBCT94s@S9^U@'T-Jqgn1mu7=H5R3hSH;Ss
%HICuo2`'f?q^`jZWqm-#S&9$XB5LJ'dq66,UaVs?M5!MX]BQ.Uo8$d:#b>EFi(e\97Y,LkQT@%JUj61N+OhB4L\Ro1@SYuucDEti
%@e4M6!G$$aZn,hZC&HuD?)&=0;WVFsY\(/*UD(&q"pk)_L?[Aj";$$]Nc*[lF#^oEnHr%'./.QKQ.i;S0*l0;L.9%8AqW%qGtLSO
%C0F$m>IuF0ZFmR>Lco]>(B$8M'ckUegO506GlZg&&$>RaT_qr^&N94>V.4n!ajW"-.X2^n!lneE)EoeBWg6P2WSlH=@;SVSrQniH
%'#:TG/dF&aiZ_EYoPuZ\4Z?Nk`TR6<r&Po*BCdr]+#,[/%:+>6#if'J6m\"gAAho00SXD*jG\XQrAG$#Cg4EZ!\^m%1g8,OdBYM&
%es5=h\@u3q$o\^ClsY,lj/pdan@j2k/2I/KoaEPP7d:rhJ+!?p'tF=j$u[^W9?;&IrG"b2%mlKa\Pipp$V!Y8@8E;F=#U3A-K@$'
%Mh#O%a4n<B0q#*qH=9oIgfEg%D?]lW6hl-\UbsgD.q9@-E)bSNhe7tpo,j#_La&^>Z+><H[c'0sAQ^!@Y(f[.:j]CX%;3u!&Qcea
%*8$_;is1sY`iLL3@p0f6qpju6#U%a$UJgnPZD0msViI30c[VJ9,19AUcc7sA\te%p_N'4O:8*m9W5*PUUCqnZ'C("439]G(%H(f?
%=O_ffYjnE)rO=btS*/qhN>u>CiRbKn0<]ce[YN/A%>*3.k%=P$[X/F`LV^ILj`PEaX7sZbl5qu#'()p3j(hLTH?Orh/Wp*$*1^Ed
%]sT>62o;\9_7mMks6/p.\39dX?!/,QB7C'%e`N$\#Zf2>AJOV[8EX$m)YMm")Kir.6TAP<1nNHHh_5,*7EB!R6(2a=Kj.R4nsV)r
%7PU6@Vq6_Hj1KIa@[OUo^+``e5;'tGEDaYfJp[C.Sf7:"4mP=NE+:L`4`tIbm*`7_Bj83V4EN$.Ph%H=9:$:IH0J59>arrrf.J(.
%*rT0+0"%_7]!OSBBm]'lZug#.lI,;@FQl/sAD[ra7SGXU4gBXse$+\S&B#?h`aVeWGK)[[S;"qsZ]0DCj14sid5GulOhpA[7:uA.
%N!M4g1KXq^4oI:@"f,?k4q6me%A'KL\WOVbA>h\W&6%f,g3c(Y+hfSC/:Q@)!nsb#T20=uD%7WfkJ]'iESWrb)2ZRHU"h+LntFI0
%q0/<FUkeQZ972q-5;')(f"!B50`XqFD;&[kNW*oP:7\``i4Yn(o5.[jf9,Y]]P\I0?/'Rm^:13d(Ia90=Bb2/N_XJ]Uj1qJS;a@%
%N/0X4Fn9U\iZ]W0oWJ)QO.rusRLcr8FY`2Hek?*[I^0SKG^3_bXCRkOghN,P\/KRJoZW"Gi+10E2J,ftU>"Y<BSZ,d>LU7Igc]1M
%<3$Wr8&GrG4(k&,`/5nT#"b'GUgZ:f`cFtUX<!HJc,h6J8none4L%eq=$N_6kKe7Kj`h8+U/EX_)^[(9:$u&cilBRfh_GP,55F%p
%T:Qfs,p[SL2+Tfk^jLG3&kR!f%Fa*I@D0&%Yf:mI;PH%C3ch?aJYZXV%>i.EQ/c^iRThAFQW>'VnL[VZoZ?jIq2@J`0(#p-+kXpn
%9A_5S(lH<W(n8j]#QE6Yct2Bbg0SZts)m]sbr6lU,$b@+[Qbtr;UR7U)D,TfD+i)[9?hipR!\^2HgIBQ?U7_+O_+SKK;ht,Fm]YY
%TA4LRN@mS@UT"q,8:k*oR_,:*^5#$To5;P^bN$%d[eTq$YSSo2k/2Ie<C0`Fl0gfmDI>HME$Zh4MmmR?`@d,+O2Ois%/4a!1P7_1
%Aqp(6@`)Q@dj^"QR8;![^R@YeW&89_3*Sh_2-cHVVb^5<r5sDd#t/dtDuIh+q9$*>^;VqgQFF7I*ge%3)7Sd'4SY-9;CN`J[^E9U
%$ke3DLR!'[Ceb,51m!_U('[B5E91mQC1MMs)kA*:ZB3IAH5(?7j?lUZKSbdX0A1hkek7l]?-/.7R_9$qAq77NUTtnC3)6nG;fh(3
%E#\,iG,<u$*Z^4\Y?X0Io@?>8Fl0<MJ5<M,%P4V!XbTFPhadWSl%jTa7Mu]gKS/tfA*oq1!T],1h8-E">Hr4+Qlb*BLu9UDL\/2p
%+,AocOq2OGCk,.'e[2-&\#l&:@jo*kJ!uU-Imc?:;/j>'8-"XM&MesRYtEJ:KOQ-VKIJXh&&_RDcsiD>*5J-AB"BZeffAkDOO_3V
%_;9V_&^4P4GKVIdR8RI3>;O9&fSHF+,;[^'-mDm+]dXKS7gc\UEf&fZ/A%Et84Okl&Bd=n4`(ga@s*TT,t6Y;R_=s=f6&k/`eN!;
%Upd3.9/Abnlre-[$7^9jFK<l!e/J+mU</8a"\2HTG&I&g,(4df+dDmLl/:'+LCr#jM5>'*$o#6h!%d0^h6OdLZKT0gcc(6q.'_=i
%Q%E^+XYt)\RT!iZ-3S#c\rPQ&B97RIl>6&&QXJeEkg>gWUGlX/EDS.FJZ63jLL$h-I9AsM3@46*WSjS!?WDd/]riKqHs)]S9>3+W
%95^S)E43ehnO4;u72os!`iqd]c)I6_#QH_"O#F-:[MeQG0UYM0A?*%0@_jfMdRacEWXl!B)<S9l[SS&,V,8_E[-Q$m&:J7Q6E(^V
%ODZ()bd<m":%UA\+sq=WakZHg'4$O5V%J%p"i-aJZ,g\NS[eE)gGq[o".Miq3RE[Uc,6&gp?ZteU<E`0[9PVMA8GSrOM*7mW$nW`
%LRI&!fGeY=P,/Yfl#JL%a,%4G%RN`>-d5'WAh>2]8<Q[7`\1Au-F=5;V]kX,<O@Zo.\EB[jQQb,"5"Q[P!PImeeN^OWA/W=QB8oN
%U65^YUXf1s.ZE#1TU1n2@kfRi@0uG!c=B*FSeIkH.40rZU6j,WJ@\DDf>Z(S,]lM($51^Qh&8HAKel;GQp7b9H.KZ)MSD2DF8(s1
%:l)KJ\QLBlf/BI%S7$fpYbk$44rq*cdBm`<hoI]g/kD_,G:EBApSg#a!;6NN$<o/'kLhOCqQ+M_6Tj;9b"%RNc8juJ+cB3T!/XA+
%X.5H()"5H]/GPZ'Q<HkM1AMep80TiFYQg0V3_XFL;h;gG2U;Or3fsbC(;qpD$FA3*RnD[[6[Wk!RYb1*O@"GdG<>A%O<;8.anr8i
%N8.$]3E!8<mDq[dKd&[F1$1E%R7UDC4SdrF"4Li9UNAFNS%GWkj0[iHe#u[dSI7A3AhumrPe)0N-S$;kmWQ2jVg_oFE;d(q'kBWe
%EFc.oKaDTGr)DPPgX_@Y8_S_M$+aZf3@]CM3H,nK:81FcRa\RlVY.Q_p9O(LmF/YV*:<T5p&,Y_*j(s<aX;bJpE!aOs)b'*O:QC@
%R:66_KaNr4*i;`6G-?<9erQks*(??bOeYC;rgPnu`@\0m;6^oWG3js#f,9b<)C=Z$H!!Wq-`d1%2I"KcVPp1A`Ub+YkY"6&VFQdH
%GM97>q$<1o$tHMg<sg!8n_>_b(/_Q*IdJNp*8j=BA*Yo)mdp"m%:R$oISSrk#55S"/+DM'EML&^aFJXt1;FJ)DRm^7h0=pWa,_H!
%4,TD!WlcWXSm1:toBg;:o%;2U[-\XZFiss^i5R;6+auPB+GuO[WljL'qu%f(6*\$NV#E/li;J;Bs6Up#HMX:q^O8A[Sd*-Rh``/h
%:BTV:D]]OoVtU#_@[-e4<-H,(rRIPVd_F]&i+*g,;bN=,\Ea+(3B/KOc,&Z)r5YQ=U56oJk2=[:s-e1udGUe'V?S,`Ao;Qjk;ItE
%l*rSF1^B@R\;p*Y[iYCQY&eP",p1_CpE)VY\YX.MQNj)Ei+2J@Ru=Kt=PE6$*6(>-,\`G8&Oe\Ue]8LeP%.208p3Wac84)f$l7cu
%BiQ%j50$@Q#Vi>IY45B-ku0XCEfM1\Ps.\KAt17PA+:Wcg&"gg0_H%,*QDgD)ohZ_W<dEoV>X^rNV[Q#A!orm:L.-G]<j1r\h.2k
%O/FU)%pdnMLFt/OQ^4O%/WX1@mTg`"9W%I/V=f)udd<`$ldDX&WCuPad&$a\0G\UIfQW@^c",UX<rbTZ,mE3^8Bp^N)%gKA^2msg
%N8LLB.:=o*gK5<Y"O%k*jH6hu+]aa&C@h6XKtdNV(Xn_ioZKl.PA)!<QF?\D?n>72k1Ba5[`u'g9l6A:q2aYu>fCG5mBOP[%K:?)
%NfI7hn(,V4Z/#45f9T;*0XU8mpq!i7<VbZi*!0DCJpm[IFu+U/Cq>^L9hqT:_RoL)'7aXrTb0dM*70t.[LlKCo'i6_+<t=Cq5Y@@
%A:?9AJhk(p9RQuHK[jl6ENp^I=3Bj(P^42A+KAoeeL'QET(B.ThKEh-$\Y?8CZr3$?jo;WUe0D%41f5'j9>jWG\Fuo-87nk.<k&b
%N+$R$GFM5c]`(d!A,=K"3*Y$[Xp]k;^F`-%!b6o6X8$\BNc0b@VGFobN^6bIIO.VHdV:b^$!]5l!H-/2/SQt7XZ!8%X%cXpcD_Lr
%NDZ7Ge\L>rFNO/[[5gIb/PK*D%I;eaPBD7G'Jb+-]lAK2#g6Rrpfr$&LTT[HnmC"oAjI;!q$=j#a]2(M#m0,GNif3H=<PUV#YQL5
%L&':r7mU6tXU\b_KSUUpFa"*!_MX#NA>2O5_LfEMM1X8/#`I1:aWM!E<C0g-)VVK%o%3!3:5@_^I;n!n+3pndH4UjT30>jTpCZWp
%F'KA5B(AJW8E*CmAs"KuOaaUVOr5A>2]h32f-K$l5Vo2q/!T;"SAQTM47a<b>alr944H;g%XBcHkauTm4jX_n8.!K$49bStEI;^R
%jNRf*OA-He;!K+dh^t,e7o5)'83bc(3[LcSmZIL>m(]L^]DE>L#(KW#JJnBk&a9PqKp8G#6O*C&BMlYdO3auumZLKSr_k>V6F_UE
%B6:\1U`[fB-a0,76WLK*KiE(/Vo(n#W/n=#8TX'gI`N=:ns6kT0Vl9Yi@8s\p$ZEs9kq$IlJK__Mk=W`dD.7Y/<"2M:d<7iHa^'o
%Z$pY9AJ/&WVndV18s$&1392U@%p2s*+ZNs0D_m*T3OUKiO(mCfH(I.L?U6Skg:/--rcd<8r:uJ,1H#N&$!UpA?PpTa'fGM=@Im9-
%g!bS0e&2V/le`.>8)&jm09bZBl`X-Mk+RCl(8a5LR1[I`O8?IE_!c(!8&8U6I8&np1A[(69*L(7dJ%BI!j_WeYj#EPV<d<^gdPqt
%=&oNPfFSsNU\%3;<CeoBBQ6.l%h]uBGieehT@9bFi$<@SOcmBgFI8P;HUTb)2A.kGQjFb3oiem8qJ$M"19&gIUPB$Mk#W%^Q0pk\
%F7Q_W]J:MAb"WmdI/T[<H)p0$kkLh@b2qB]^oU7)FR7eB[(HTl0!&T!%&=boV9##$Kpbg_4fl[nl!dlBAWlC7).j24!sX53At.h<
%G)9-nO+Kol>/]r#Cr"dh9(q/bGc;u%?:]/8Q.[,7Ad5r=TPe/3'"re=j/MbDn-.R`IXNtTFM)O+qE&`#T6@l$M@uf(pP\_8*QU%^
%A[*;2=Mu>Tmb5oJ57KFYJhLK#]cMJ+\.ID("XC;Gl^cslS+Z@Anpq13W#.%3e4<+SM@,o_%j&ttA8NR_m1M7KP0BX0`*tid+_oeq
%4do(aZ%>#5gF/1(6o'[>315AKIXLpQ%p6H8N"*5_]8e*u[$``n:BZc\C7Bd9+AKO,>PB(*LKPXtJ<18hAG(KH3j$)YkH0>oI>deS
%QJo`cLtkS3.g(DKY0jI6hPX?OHp"u55$"jD9NF!]GK]<_0>>[i:hWjlZ^B`NA[<oNBPatL\dkR)MLR<KS,'nh'l7f&O053uRu:R'
%Yc7DG&+V_.EY>_$i'V1d-JDFfXIu?,R8sTidn(QG29@Wt$("4[Sm<u6l%=EtU1ER=0]SG:qABVmaVNB0IjG,#7(4?34In>0bX_sL
%QfKAKdoMX(JH:CUnIY6iK\T$G')BNrj4Hq1NFoTFd,kb]DsK%;5orO@o.5FHUC'-.86W3YDnd.+$s+:K;2'g\VJ<"q`GI;?Q<%#Q
%;[gZR`<8]DTA??0'BY@FfiInZg[e!WZ^R^:JX6Y'`H)Fud07,aAZ=&GNMku,Gb?/;E?Hg.lNY4:bLXfsc5!R^f!F\p.3p'QA:!tp
%Hnk5qM6@l6TnYJ(eA\l&$iU(_<ktM,]4t;;/.gtE'I*rF=[g,YEq5q86h16r5p6e]qg7=a<jg"q^_;*tU4,%*g]?W#RNJY("6CIN
%#g?mj-iOD@aAu#rmU6siO.G5-3S@\O)6i8fC]t7f>a*&V0Ki19P&'@2"IFCh;U/(*Y:fp6mp+`jB&%s_meD4'=Z1%[&fgG\Kq,DU
%P/\f?2/@N\9KHaQFOT>Ci8pt%b4,rB2m>?BN!A8R5Q+KsMN(4C+1@NOR[i.%,g:+mZSZ4jkJG^b&AV12@"\3JZTn%)[iu30\&+ii
%UDV/>\S&W^%`Qd8TKH4L;QKhH2(*HFct5<fM):6/QhPf2_t%N4/"NX/=>^t$=@Ce'FXh4#Ykl!A!E5usAuF^Y7.8kUp,Q3e8Gq`:
%A"HK,i('OD-H/HD%G%:Ilh`T5&H&Z#AlgduYt=),)/&@e^RHD*H%-!<'MeA]eXVUM33)`?\^hjD8+oZAj'r2]b_f]+b`mo9;8g1g
%mU*&gC_n>&^#If<Rm3KJ'hVb8H7hk+0OG_$bWY-T-Ss)&mlTu#qqa4Z"m:'$Oe=/Y;kG/.N^MK9So*;kELWi^TbU!d!@/5H[[raY
%Op-Y,:g*s))%p1D%);\Dj+0Q^B,UpiHjWC5#b;<,)0a!n)I#ij7H>KN*Th.80<KGdVUN_gift#4cUY8)63]rgfX?pa+8bC2r>`8?
%[#gYoiD(A3doFinO/7PX9,+Bp4&FB4c^b;p[]soL6jG]</e^)08UVS/d$$@d-m1?%N/Y@FF0Fb&qXuVE#aQjd1^;*H43cFc3"N(3
%S4t("_bQ6?gA&g<H-,q/fus6[@@hg`HH?ucq7&4^nC`27anYWab[/-_<=-\P0t:Ro%B1*WMnFMl0OI$f?LigGX3uiJhtj^l.JZ)o
%g;c25-F2`kO$/DTNAemh5g^ubm_a@t)6F-8bJaR_8ZDj*hPb9GT3[$5h5X5!38Jf);G[+urZ#&b=tedbdF4Vp`")6k2+;8O1^u_d
%T?Dfk-i:MNNa*T,-)Mf<NUN[EZa@BGncL1MU`##C,Z4'UVhYcLVkM>6E`@6eX\\0o;>=>,lMI)QW9T5OANt)\6<(:XF.^\S8EhFp
%A&TN!^c9k_B]JX5gS<nY3t\J]GO+1MGTCBg*cD.#dWlZOTD&qN;[74`k_><+ZP<f$fOO;2/GkpNR0!hLc-i^e5A[7AITM:G@BF]L
%kM:`uAAo[]`ln4mMtW=BP!%\/_GT'"\!enLBh'b'W>1k.a0d,I*];SY8eaCVSD9[.nBs=q;O8^ED*;gGA"b\BXZ:^$q?#U4Ou7fP
%&4:Jl8_R1:;i.Zkp@XFs*'^GE-\Z1E$J@@B$)k&DD"aGY449Y@Igp$o[@V9JVr8^EU<CI\%:2Y)*:ruW<S@tSM;]WK/JM@c7o#89
%/SoanaFNKrC^1,R;*#8Gd2>Z$b/P$S2p00GQrQHn1l1U^TXHNr0n,,;(Q.Vl&&_8!bc'%PWWeM1-)obgd]2B3+U5;T]5I%*KqILQ
%0%;t`VC&9H0Q_M(3U11JkMZf^NP[$_b.M=/"skA-A^/jF--Xt22[*T2WO3Uer^tcM9XX6H3:![Bp?9G6o[99sS,b2iN3-8h^L,7,
%iM;Doq16b%O"uLi]\7J<D/.s:G"f#;KuY,ja>TL39:B\;r73P<"F%:jD]NF^cKF5CWMHiSUJn#+VXF1S#W#PrptG7md41oea]@T6
%Y3i6\\YA/7#&GD9W2]/_h!VeB3?Al]9=E@q;bd@'LtU7DalG+4nhG0_r"EU_=[:5JT>.al36<=<Nuf?T6f`..>rKgM7g)mX5O;@$
%OBdQ;#%'qe"20grD.PUID\<ki47_&USfU0Bi'N^:6slfZ;;XlR.<S(P9gAC.(&n!L7H,8b\eSO>Q3=CNl:DRI[V%[X.Wh.D.@I)O
%4N\?uDOQfCg%QiJZ!"_ujltAc-R=G3G,FZcaj!/B];;@/Nt6@<5474$70G]'<PkB+*MmFJ9H'Pu^?K_i"TT&2g.><^.'LVmU"mN`
%*ZRL2$'+M/e]-Ido8pUtl!])jJmCmT-Sg`@9"Vo6YA@"sKos!;JP,'n_*(/&n;(AU0p*+#]],7E8QdZh%iig9p5HpQb`%\O)<l4\
%&hr&Rd=)85%Suf:7J-*-i(3Q8'G`?cq;Z(YiZ^pidP:Dfo/;ap$\`mAIlK%5'<S!='?:d,%>7E#pl$n\C?E'7paf)4KYoMZNu]_+
%1KEJDNKldok>%<X&$^4PW:_o%1uJqfCK$IM+;IQD6p67XE5t*T`mWNK@%hC4k0Rt8g1W4ep0:,0oB%r^kS_;`7reWQ5q26.#W'?#
%h4oMVn/l">&c'X?[!A)gm8m=Amc1hnGPCA?mQrlCGJF*3[6`K8_CMNi6s*%#LYarY+Z0(djBE+[d`Z]f'YTjq1;Al.VRh,rqX(L.
%4Gi<F`09+('V(QuL93J)!)(GUH;BU9hqiX_nMdTmI>R)Rc_X2GZ,k&brFW3U6eKK&0,p&hF1G9;J@L^hp1NK9:/B:mP\'GFc8I3.
%J*uGn,(9&5gS(:WV*b_AT".5-l8_!g^;jUVnEE_d:AQINSs!s'.Kn?8%u6G0+sk4)hGe3e_9KpGSTgcc'j>ssZd6N+jh3='GqiAu
%#JA7'dN"Jd8=-Wr"$p*sdk><hJl^`9k'A9[+l$i<a,:o;f+6YH\;s/K/bDsl`m9u_MHE*lHI73PHQ5Mb@3pR0O*fksG"af]PjGB#
%Pt)8-42dcGf=1.V;K_VTA&BeB[&if+\s-Br;Fg-6\RU'BrEDM$bXVJFeEj'F[D*f_fQVnGGC6s=K!;EL/E#*?Rh\#aS'PUOj^4IS
%GFSrO@AWn=$C.OA)oaDB1;cW<lb.UOREt35U[NZ?>4%Whk^YYFH#51DapWnlVf*KnCYe"S?^RGn`f`WCh"q,HWWH)6%">5H[3kkD
%CiiZ=BZa'Va<o]/Mer$.#:b7q'ppF+c.0hJjj8!:^^@[9GAnIiNYD.QU@Irc8S-F1;,R7\X'KbrF@a66Ed.-]DFK`[Z;WSsAFcOf
%=5FCH@+SfT<0_k]Lj\UUac)p<VB2f-G/V1ec)$].Qb;LBTjQZW-HF+&?cQU9J.fHKZ"#(-_SJ788`HBn(a.ep8dUl.8j@m/go3##
%3J0Is@s0+Mg7pd(Eka^_I'@B5c)+2i2rAF_`Te\g1&+dc#ZW;`)5cMk^29!7K_M"2,Wc#4OuBai4)Ki+FmV\_aZE81+4GjF;NN`#
%;sN,Qjf"&>*,_t#EP)^%i#(3*RD/R$b<YK,MG;Z9jl+58b"nGgG8phaq8,0ge*.TSRHMsWWqVeS]Ug84_nRlY/&P_U.>tT3a/'gE
%5$WJFJ`jjt8#WGr1=f'c#man`k[0`DBeo&g3oF>GUE0^Q%nj\L)NNNTQ\Q*]47=gDek7S39$9G-^3nnn*m51Gar)nip\eiul6M7g
%qR)TT]'MQB0gi]2fCp^Df!<2+hcJsCC\muUcXo.pF1p2o$gXW4QhIpb=nj13E9WAOh+k;aFDmVBjUoJ2&J&0V\5;N+>CstM-m_+(
%*#"^Mg["K\SlSUMkF2_d*00c;H/n(,QtpBP_'*_ZCmq1[n(WkTP<UuW\Gl']CE,H4'ZpKVN$q[,YtGeY7(>7@:(3L_7K[(7@rDJ9
%(2bufRC9p7k\.Gtmtt3n8DS0#Z@,p"jgs!cUYs4s'N;k!D7>=EpRZXnG/q'"3"b.cW^i5BchD4%PK[Me5?r#!6>Su0P0%\k7DD-n
%@:h3X6T^pA*aL/Ki6X>PUX5U#r4.@R9P4'f&>8r5f+nJuAG/WHmY>Ej7^IeE>e]Im:<:8STf.m/7'u+-qR@C*WA)$D$hL42`rsKo
%/(g7Pj/9@pSr8?<pOK=8$S/ZH&VPkp)c'/#AN:LEF\j5bLkCjV7lc7?VU/KPW_\],?YMA<0*HrbVbAbuIr+7?7IR#?B(ZqLRp?#\
%6!'ZleGHi,hJ=5IhtFB]*hA`\hRGKD4lV?lQm*+5/kKsJ?LPMeAA/J)I5?&^YKV'?.$=McbG--M/t%qtF)Pb4l,n1!nZZ>7;'?.r
%J&6U3_PKEpNL^/REU)@?JBAijkJ.Rbg<2A0/Q_,NG]$mG[bj]j3![gAq;r[L\#%Sk.Ws5nSibN4h7rXGEt5"&HK">d&<qKCY1(*4
%KrZ)B5Uc0`EQl\'h^^(X3hRZE"Cn_\\$`T\\>@'$?kn_-j-<!_IZtm3rqna?JMKAKl1Dq6L[A"70TUPV)lM"b^\mc[+<Q(Z+%CVW
%r2=..aN33<l[+360j'4ff?_GH1285mqeu[8Dk-SuBm:]YM#Mi\TC6@e!6u?4>:l>0e9-^XNokF&K+IF)=NnM.UB'(cB>;*"fXu>*
%I$g%m%tX36PrlkY4Mf8oB/]`O.QT^R5%qTLrH?F'87`lFs#1G[`)]5u^/rR*bj7Q>,-RA@\*Hk1Dp%.KR@4aVIuND]9kh%_;oYS2
%;oU>cVR4e?9mMQPqU1VT@O/;@e<FRW2e>*42.aF@rV"PF.EHiG!?[A'I';gc=lQ((GX*Atd]d228*7MGh\V0]Bi;6";#kW+L)F0n
%QJi6$8PYsDiDJAN$W"K-hX=GZ9q=dj$MWua>'YYF/>_RHr:HP0]KSBFjJhCXB]Z-%H0Vn(gW-(`X6i^VW*L^hk7bj-G?2'`H"VED
%nFgBYi%-0]k1'$=0E':EIR1UHVSNre$C/?W+Ph_Z&mnC@Cj*V%hmR??,M;W[aQ7'LT?-hG5!P.+-%Ts(Bb(6HZ1`f=5isX#QirnA
%U*3R;r,gTJG@=_'CH_VhPP?5qg^LK'^(la';QX6C8mQUNj&I1J7/?qnU<kQ0kAJnmJlES=$*`>!UVaK@\-ii%dW@,ki5r8p]3SOd
%:;["jk=9Z8d<<+8E'pX"l$=ke%Wl@&T`P\p[O$QVdAET7Oo<SZ2C2[Fk'(;OQ06SWo.Zfm?*_'HqC2)<qD774_deOj%6-/iHl@lR
%*<=tD3ViFJ%i:37&.kY=-15H%<naZ`)ZfUK3&+f4@!Ju>p&6Y")#4aH-@@a.6RTdqmo=I//l5f.+55ZGg]ejM<u\fDgYfsr5s;&q
%]^*GR5sX75D40jT-6)Cs_ksnTLf,5E8$cW#@7+St@1KuBkKq9,2ht_cF6LO(:m(qE5\_Jd&:c9K;?tL#/\FfsprD3dGOA=U4LkD`
%*sp'Q<h?5HlZr>Tf^p\^A*7-G7TD;lHg^l)A.*iFV`94EVRJlrU[?Z'Mms=3,AG9Km!V%Ch@DCU25"mo!AMUcQZm*]bfdMG4\pio
%a_<R0)?0V\[bT)5Q'82A@86e[*&[\&&J-49+O5G!PR2+uh>I.(0Q"QJIJnp=`B2@^W,u86h6=81S(g"T*U39r&hioADJL*f9V,nE
%eRfnB[2M79C&g-p!;:QWl"X]XCRa,1n[M<R0cP?1oO'F<DMm6tDI#>kHus:WY(B`P<$X%Q%>g%-MWW_I2EoqP`/+kXSlR7I/25Oe
%A&8]FS'80dg!<C\*.f8ITX(%._N#W8V!CmC=SUVT;T@L%Q<9uNJDtf0EiC`@o/>(BW+OZP$5gaf4rs7kZm-,_Y)cVGM"?l:a+3h2
%="F]sBK2V*G<.9i`@CP"^*A1?:-t>rcI3%sk6M11YM\r3lgV'VqQb/fV9(`(RB3I.]bmM.LA&6aX)/`d7t?nnkI0!/F6G!6;a1NY
%kjTNb1mLUH/X7iMdkPb;B$Z%t#5T^2W=9Kd@6BL!B7=&<2^j;_pesk>N>l"_LL\TrD./l+%HFDCG[#R5rEEW)%IhhJkb"7hF=KF<
%2Lf&%Ip8C,4Z._8B`;j_rp?ud\#&oLgAL37q6u.AcV*lmVrl<T61b+l0R=6/f>L]R)>aI<icXG\8S5O/qVo&6IG93$p$1kDB`S9`
%4cXHp^3K'Jhff%NlXft^@,RQD@VWlnq_@r'Ym9fMI90W$\I'a7iR)WtY(m1BW2R1:g\be$cTon/pua[=X*E1V.[jj'p5%sU@$Y:8
%e?rh_EUTl4.LG4bh=m(Zad:TV>?L[QomXa"Beq#Gc$mRjp.2<284%O42d7IbcH4R)_.24`AoudP=<bM5`8R^fMu9"%</L=`D?2UQ
%35jC<B'idff>;.on`sQ]iZJ0;J$/hGJ,K70If/>(^\u'25J@U,n6^\:]ANTpJ,%:gr:\l0r:1Z=qrcl7n[Ca\k4cXjVgnNe^\meT
%^&R`Bn,Dh2J,YdaqSR6$puh\OTDh&Wn>#cp5Q&EKr%J*7QbW=q!QQjYfD~>
%AI9_PrivateDataEnd
