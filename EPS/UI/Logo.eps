%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Logo.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Daniel
%%CreationDate: 5/22/2017
%%BoundingBox: 0 0 455 282
%%HiResBoundingBox: 0 0 454.5196 281.6880
%%CropBox: 0 0 454.5196 281.6880
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Logo</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2017-05-22T17:28+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-05-22T17:28:01+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-05-22T17:28:01+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqpXV3aWkJmup&#xA;o7eFeskrBFH+yYgYgLbHpvzO/LuGQxyeZdN5jqFuomp9KsRk/Cl3MPEj3ozSvOvk/VpBFpmt2N5M&#xA;TQQw3ETyVP8AkBuX4YDCQ5hIkD1TokAVPTIsmA6/+ef5Z6JcSWs2qi6uojxkis43noR1HqKPSqP9&#xA;bLY4JHo1nLEMQ1T/AJyp8pQo36M0m+vJR09cxW6E/wCsrTN/wuWjSnqWs6gMZf8A5yv1wyEpoFss&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:A97643EA023FE711860BF351378AC283</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:A97643EA023FE711860BF351378AC283</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:131e82e5-bea8-4b4a-a5d3-fcb0991548ef</stRef:instanceID>
            <stRef:documentID>xmp.did:90CF4BEDC83EE711B776D525864049CD</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:90CF4BEDC83EE711B776D525864049CD</stEvt:instanceID>
                  <stEvt:when>2017-05-22T12:11:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A97643EA023FE711860BF351378AC283</stEvt:instanceID>
                  <stEvt:when>2017-05-22T17:28:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>454.000000</stDim:w>
            <stDim:h>282.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Weiß</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Schwarz</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Rot</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Gelb</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Grün</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Blau</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Magenta</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=193 G=39 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>193</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=28 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=90 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=238 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=217 G=224 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>217</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=198 B=63</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 G=181 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>57</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=146 B=69</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=104 B=55</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 G=181 B=115</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=169 B=157</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 G=171 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>41</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=113 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=46 G=49 B=146</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=27 G=20 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>27</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=45 B=145</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>145</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=39 B=143</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=158 G=0 B=93</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>93</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=212 G=20 B=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>212</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>90</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=30 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>30</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=178 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=134 B=117</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 G=99 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>99</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 G=71 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>83</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=156 B=109</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>109</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=124 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=98 B=57</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 G=76 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=56 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=66 G=33 B=11</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>11</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=179 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=63 G=169 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>63</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=122 G=201 B=67</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>122</xmpG:red>
                           <xmpG:green>201</xmpG:green>
                           <xmpG:blue>67</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=29 B=37</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=123 B=172</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>123</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=189 G=204 B=212</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>189</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -281.688 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 281.688 li
454.52 281.688 li
454.52 0 li
cp
clp
[1 0 0 1 0 0 ]ct
83.7588 78.5229 mo
89.3486 80.3579 94.7202 84.2759 99.293 87.8076 cv
98.0781 78.7559 96.8613 69.7051 95.668 60.6504 cv
87.0645 73.3599 74.4072 67.2163 61.6694 67.8809 cv
68.0796 72.9595 76.6089 74.7007 83.7588 78.5229 cv
84.5698 78.7891 83.7588 78.5229 83.7588 78.5229 cv
cp
254.304 177.3 mo
262.231 177.3 265.854 183.313 269.466 189.25 cv
270.251 187.276 271.06 185.312 271.9 183.362 cv
273.189 180.372 271.101 179.233 270.291 176.216 cv
269.648 173.817 269.481 171.247 269.141 168.796 cv
261.345 170.921 253.009 175.506 244.849 175.506 cv
236.821 175.506 232.507 170.03 229.249 163.518 cv
227.08 159.18 227.115 160.569 226.301 164.295 cv
225.4 168.202 224.053 171.553 220.89 174.213 cv
227.101 174.706 233.32 176.183 238.783 179.255 cv
239.884 179.875 240.943 180.554 241.965 181.293 cv
244.392 183.055 243.99 181.454 246.135 179.92 cv
248.505 178.225 251.392 177.3 254.304 177.3 cv
259.174 177.3 253.286 177.3 254.304 177.3 cv
cp
183.648 281.688 mo
154.746 281.688 128.991 260.826 119.445 234.135 cv
114.619 220.638 113.706 205.567 118.041 191.813 cv
118.508 190.331 119.035 188.868 119.622 187.429 cv
120.969 184.122 119.763 185.29 117.297 183.58 cv
114.754 181.813 112.772 179.292 111.661 176.401 cv
109.949 171.954 109.912 166.977 109.316 162.297 cv
97.3003 178.062 77.0405 185.925 57.6245 186.606 cv
42.6416 187.131 5.32373 183.147 6.93945 161.331 cv
7.29053 156.592 8.79102 151.479 9.96191 146.889 cv
11.3115 141.597 11.5205 135.421 14.0913 130.495 cv
18.4902 122.064 29.8618 119.599 37.3828 125.42 cv
45.8149 131.949 55.335 135.702 64.5679 128.357 cv
60.0425 126.397 54.7388 126.433 49.9766 125.174 cv
43.4316 123.442 37.125 120.807 31.3701 117.23 cv
20.2202 110.3 11.6567 100.011 5.91553 88.2764 cv
-.882324 74.3799 -1.75049 61.7266 2.94629 46.9683 cv
4.04688 43.5093 7.79102 48.1362 9.17822 45.7378 cv
10.9849 42.6133 12.7915 39.4893 14.5981 36.3657 cv
16.2783 37.6084 17.959 38.8516 19.6392 40.0942 cv
21.7695 34.9165 21.1987 34.7432 26.4546 36.6265 cv
27.272 32.0952 27.0205 32.3149 31.6255 32.2944 cv
30.6387 26.5195 31.0449 27.2925 36.707 26.0654 cv
35.6079 23.7524 34.5088 21.4385 33.4097 19.1255 cv
36.8521 18.002 40.2935 16.8789 43.7354 15.7554 cv
44.5952 15.4746 43.3535 12.3218 43.7988 11.6089 cv
44.3125 10.7871 48.1694 10.1978 49.124 9.88965 cv
56.1748 7.61328 63.8652 6.63135 71.2617 6.94531 cv
76.0146 7.14648 80.7456 7.94873 85.2676 9.43994 cv
87.4609 10.1631 89.6011 11.0444 91.666 12.0796 cv
94.8052 13.6528 93.8828 12.3887 96.0962 10.3037 cv
102.657 4.12402 116.537 4.1958 125.131 2.76318 cv
134.953 1.125 147.093 -.856445 152.155 10.4131 cv
158.581 6.35156 167.528 7.49609 174.613 5.56348 cv
185.417 2.61719 200.609 2.73438 202.98 16.7466 cv
212.134 3.90088 226.932 11.8828 232.128 23.2998 cv
234.68 28.9063 237.755 34.5171 239.872 40.3008 cv
246.722 51.4341 251.177 64.8442 256.667 76.7227 cv
255.563 63.6816 253.319 50.6255 251.543 37.6543 cv
249.981 26.2495 253.429 17.0913 265.681 14.4771 cv
272.096 13.1084 278.531 12.0146 285.026 11.1553 cv
292.455 10.1719 299.735 9.76611 307.115 10.2949 cv
315.108 10.8677 323.193 12.4199 330.446 15.9409 cv
333.227 17.29 335.885 20.6035 338.136 18.3857 cv
341.065 15.5 344.834 14.2729 348.807 13.6309 cv
357.075 12.2954 365.405 11.3159 373.649 9.8374 cv
384.945 7.8125 401.263 4.97266 403.947 20.7148 cv
409.382 12.1777 413.393 0 425.392 0 cv
437.416 0 440.496 10.6948 443.858 19.9346 cv
446.801 28.021 449.606 36.1777 452.798 44.165 cv
457.834 56.769 450.918 63.8701 443.702 73.2393 cv
438.901 79.4731 433.602 85.3267 428.774 91.5562 cv
425.686 95.5444 423.379 96.5513 427.943 100.8 cv
431.379 103.999 434.297 107.938 437.33 111.524 cv
440.622 115.417 444.389 118.931 447.461 122.999 cv
453.774 131.359 449.26 140.745 443.283 147.692 cv
438.062 153.665 433.794 162.401 426.13 165.591 cv
420.603 167.892 414.053 166.713 409.651 162.667 cv
407.427 170.565 398.985 173.93 392.377 177.559 cv
386.439 180.817 381.146 185.389 373.976 185.135 cv
358.089 185.135 356.275 163.75 354.89 151.687 cv
352.188 154.759 349.601 158.43 346.59 161.168 cv
339.629 167.502 328.577 167.661 322.612 159.833 cv
323.578 167.134 320.396 174.305 313.357 177.276 cv
310.726 178.573 303.071 180.538 302.689 182.951 cv
317.381 173.018 337.099 177.409 347.374 191.384 cv
350.741 195.963 353.102 201.221 354.771 206.635 cv
355.662 209.532 356.589 212.529 356.321 215.597 cv
356.189 217.091 355.829 218.525 355.238 219.901 cv
354.171 222.385 354.624 222.846 354.961 225.455 cv
355.593 230.355 356.949 236.301 355.914 241.197 cv
354.441 248.155 347.716 252.305 341.602 254.844 cv
330.309 259.534 317.304 260.201 306.436 254.03 cv
301.287 251.109 301.5 250.01 295.95 251.275 cv
292.926 251.963 289.696 253.04 286.566 253.04 cv
281.518 256.834 274.344 256.726 269.388 252.792 cv
266.812 254.888 263.518 254.949 261.396 257.267 cv
259.251 259.61 256.325 261.182 253.185 261.668 cv
246.526 262.702 239.679 261.85 233.564 258.969 cv
228.853 256.75 220.654 260.668 214.734 259.782 cv
218.772 278.096 197.257 281.688 183.648 281.688 cv
166.698 281.688 184.156 281.688 183.648 281.688 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
224.626 122.26 mo
224.985 122.332 225.405 122.368 225.883 122.368 cv
226.124 122.368 226.378 122.359 226.648 122.34 cv
229.157 122.665 li
229.358 122.65 229.546 122.644 229.718 122.644 cv
230.233 122.644 230.612 122.705 230.855 122.826 cv
231.585 122.502 li
231.369 121.37 230.964 120.075 230.37 118.619 cv
229.966 117.163 li
229.319 114.25 li
228.886 113.117 228.536 111.823 228.266 110.366 cv
227.944 109.153 li
226.648 105.027 li
226.326 104.056 li
225.597 100.577 li
225.355 99.9302 li
222.361 89.1699 li
222.279 88.4409 li
221.713 87.7939 li
221.633 89.9785 li
221.065 92.7295 li
221.147 93.4575 li
220.743 94.9946 li
220.177 100.496 li
220.067 101.305 219.934 101.898 219.772 102.277 cv
219.853 103.247 li
218.881 110.042 li
218.72 111.256 li
218.343 113.09 218.099 114.682 217.992 116.03 cv
217.506 118.781 li
217.345 120.237 li
217.183 121.775 li
220.904 122.26 li
224.626 122.26 li
cp
.129412 .235294 .360784 rgb
f
350.653 109.515 mo
347.376 104.325 343.944 99.2246 340.587 94.0825 cv
338.684 91.166 337.109 87.9707 334.986 85.2017 cv
338.7 78.0537 341.979 70.5928 344.024 62.7832 cv
347.799 79.5195 349.929 96.7383 353.235 113.59 cv
352.375 112.231 351.514 110.874 350.653 109.515 cv
350.505 109.281 350.653 109.515 350.653 109.515 cv
cp
191.337 172.94 mo
198.399 172.875 206.406 174.217 213.371 172.516 cv
220.082 170.875 221.604 164.234 222.2 158.283 cv
223.3 156.083 221.679 156.017 224.582 155.812 cv
226.709 155.661 229.766 154.609 231.11 156.346 cv
235.055 159.221 234.636 166.013 239.341 168.909 cv
244.173 171.884 249.122 169.888 253.96 168.355 cv
260.327 166.338 266.702 163.688 273.21 162.233 cv
273.778 165.939 274.345 169.655 274.862 173.377 cv
275.064 174.833 275.466 176.155 276.205 177.428 cv
276.872 178.572 277.724 179.559 278.759 180.388 cv
278.068 181.863 277.397 183.346 276.748 184.842 cv
274.487 190.046 272.467 195.352 270.524 200.683 cv
267.78 196.171 265.036 191.659 262.291 187.147 cv
257.351 179.025 245.591 182.276 245.201 191.69 cv
239.005 182.871 228.49 179.491 218.116 179.096 cv
213.354 178.917 208.21 178.967 203.572 180.188 cv
197.226 181.859 196.409 188.988 194.885 194.341 cv
192.049 192.475 188.914 192.613 185.863 193.763 cv
187.887 187.767 194.193 179.356 191.337 172.94 cv
191.337 172.94 192.288 175.077 191.337 172.94 cv
cp
85.834 85.0547 mo
79.5454 81.5474 72.6123 79.251 66.0894 76.2441 cv
62.29 74.4932 56.8833 72.0029 55.2554 67.7939 cv
53.3823 62.9512 62.0562 62.8169 64.5918 62.6846 cv
71.0767 62.3467 79.2896 65.9028 85.4316 63.5449 cv
90.5327 61.5859 97.0947 51.0269 99.0894 45.5415 cv
101.821 64.1123 103.717 82.9277 106.223 101.554 cv
100.754 94.6338 93.5225 89.2749 85.834 85.0547 cv
85.77 85.019 94.5215 89.8232 85.834 85.0547 cv
cp
449.022 48.293 mo
446.147 41.0977 443.545 33.8052 440.894 26.52 cv
438.631 20.2993 436.895 9.82959 430.86 6.40527 cv
420.162 .334961 414.663 12.9346 410.14 20.1689 cv
406.64 25.7661 402.893 31.4028 399.804 37.2437 cv
399.605 31.8848 400.46 23.6934 398.095 18.7666 cv
394.236 10.729 383.206 12.6445 376.121 14.4121 cv
370.352 15.3979 364.56 16.3394 358.771 17.231 cv
351.158 18.4033 339.771 18.3296 338.619 28.2461 cv
325.446 13.0767 299.424 13.043 281.177 16.6904 cv
276.797 17.5659 272.396 18.1953 268.022 19.1279 cv
257.993 21.2686 255.185 27.1348 256.519 36.8623 cv
259.831 61.0029 262.91 85.1895 266.149 109.323 cv
253.966 82.6592 241.539 56.1377 229.41 29.4873 cv
227.355 24.9736 225.403 19.2334 220.895 16.6357 cv
213.884 12.5942 206.561 17.582 205.121 24.7837 cv
203.441 33.1782 201.57 41.5205 199.751 49.9004 cv
196.737 63.792 193.964 77.7144 190.98 91.6128 cv
192.436 78.3721 193.766 65.125 195.139 51.8755 cv
196.237 41.2813 198.161 30.4185 198.161 19.7612 cv
198.161 3.31445 175.987 10.4702 166.308 11.9741 cv
159.167 12.7271 150.013 14.3945 149.96 23.4946 cv
148.884 30.4453 150.734 38.1665 149.292 45.0273 cv
149.1 38.2705 148.908 31.5127 148.715 24.7559 cv
148.498 17.1113 148.713 6.33154 137.977 6.33154 cv
132.489 5.93359 126.194 7.65186 120.809 8.74414 cv
112.54 10.4219 97.0708 9.21826 96.2646 20.874 cv
84.2954 11.7402 69.0288 10.3589 54.7046 13.5957 cv
50.2935 14.5923 48.9336 14.2988 49.0957 18.8765 cv
49.1372 20.0703 41.7798 21.6924 40.417 22.1372 cv
41.6055 24.6392 42.7939 27.1416 43.9829 29.6436 cv
41.5928 30.1616 39.2021 30.6792 36.812 31.1968 cv
36.2393 31.3213 37.4458 36.4512 37.5918 37.3052 cv
31.1445 37.3335 31.5 37.0308 30.3555 43.3755 cv
29.3462 43.0137 25.4648 40.9077 24.5869 41.3081 cv
23.5195 41.7944 22.3315 46.791 21.8394 47.9868 cv
19.938 46.5806 18.0371 45.1743 16.1357 43.7686 cv
14.6133 46.4014 13.0903 49.0342 11.5679 51.667 cv
11.2056 52.2939 8.08447 51.3604 7.3667 51.2461 cv
5.98047 51.0254 4.92383 59.7871 4.7666 61.1621 cv
3.29248 74.0674 9.90527 87.5244 17.4946 97.6396 cv
24.7344 107.289 34.6143 114.604 45.9824 118.655 cv
53.3911 121.296 67.3965 120.658 73.0952 127.164 cv
66.6855 134.256 58.2529 139.611 48.4175 136.983 cv
39.5771 134.622 28.6689 121.059 20.0361 130.703 cv
16.728 134.398 16.3892 140.786 15.3457 145.45 cv
14.4595 149.409 13.7236 153.405 12.8252 157.37 cv
7.68945 180.036 47.4087 182.817 62.4282 181.221 cv
84.2954 178.896 104.432 167.355 112.105 146.053 cv
114.15 156.304 111.773 184.189 128.574 181.092 cv
110.775 208.554 123.213 246.055 148.078 264.48 cv
160.782 273.893 176.51 278.334 192.23 276.014 cv
198.524 275.084 208.635 273.86 210.095 266.213 cv
210.942 261.776 208.543 256.428 207.194 252.284 cv
211.974 254.559 217.241 255.456 222.493 254.879 cv
225.707 254.529 228.857 253.625 231.744 252.161 cv
235.091 254.401 238.87 255.973 242.843 256.66 cv
248.095 257.567 255.378 257.708 258.617 252.647 cv
260.94 249.017 266.721 250.696 268.892 245.218 cv
270.626 247.004 272.294 249.125 274.646 250.113 cv
277.013 251.105 279.753 251.034 282.063 249.913 cv
283.123 249.396 284.047 248.701 284.837 247.826 cv
286.099 248.077 287.357 248.062 288.615 247.779 cv
292.541 247.304 298.526 243.848 302.326 244.658 cv
309.709 251.901 319.665 254.659 329.748 252.989 cv
338.052 251.614 352.064 247.315 351.068 236.678 cv
350.739 233.158 350.421 229.631 349.969 226.125 cv
349.577 223.08 347.713 222.204 349.542 219.75 cv
351.133 217.618 351.704 214.842 351.085 212.256 cv
349.014 203.621 345.299 194.826 338.366 188.966 cv
326.916 179.286 309.832 181.043 299.858 192.026 cv
298.75 187.795 297.977 183.296 296.417 179.206 cv
297.063 178.054 302.849 176.452 303.837 175.892 cv
305.922 174.951 308.027 174.059 310.137 173.168 cv
320.989 168.587 317.588 152.892 316.437 143.122 cv
321.139 149.952 328.474 163.663 338.308 160.381 cv
346.318 157.709 352.415 146.238 358.068 140.24 cv
359.43 147.692 360.391 155.292 361.995 162.694 cv
363.722 171.363 365.5 182.149 377.307 179.915 cv
383.646 178.716 390.403 172.697 396.083 169.621 cv
400.902 167.008 405.331 164.216 405.188 157.976 cv
405.109 154.545 405.032 151.113 404.953 147.682 cv
409.441 153.665 413.16 163.504 422.413 161.493 cv
428.692 160.127 432.654 152.924 436.32 148.243 cv
441.329 141.846 450.396 132.835 442.483 124.937 cv
438.054 120.481 434.477 115.137 430.031 110.703 cv
428.072 108.455 426.01 106.278 424.04 104.049 cv
421.755 101.464 416.995 98.3774 419.381 95.3311 cv
423.184 90.479 426.959 85.6021 430.892 80.8604 cv
434.401 76.6274 437.961 72.4395 441.316 68.0815 cv
445.858 62.1841 452.365 56.6274 449.022 48.293 cv
449.022 48.293 449.521 49.5352 449.022 48.293 cv
cp
f
315.542 214.937 mo
315.542 214.938 315.542 214.938 315.542 214.938 cv
315.542 214.938 li
315.543 214.942 315.544 214.947 315.545 214.952 cv
328.581 210.5 li
327.267 207.701 li
326.063 204.492 323.729 202.25 320.875 202.25 cv
320.831 202.25 320.784 202.25 320.74 202.25 cv
319.604 202.279 318.391 202.658 317.137 203.469 cv
313.736 205.671 313.847 210.25 315.535 214.917 cv
315.535 214.924 315.538 214.931 315.542 214.937 cv
cp
f
315.535 214.917 mo
315.049 213.581 314.843 213.02 314.799 212.899 cv
314.85 213.038 315.449 214.683 315.535 214.917 cv
cp
f
219.558 214.671 mo
219.497 214.671 219.436 214.671 219.373 214.674 cv
219.235 214.679 219.098 214.685 218.959 214.696 cv
213.512 215.114 209.833 220.146 211.392 225.754 cv
212.427 229.489 215.477 231.658 218.813 231.658 cv
218.876 231.658 218.938 231.657 219.001 231.655 cv
220.508 231.618 222.069 231.138 223.525 230.163 cv
226.164 228.388 227.146 225.126 226.66 221.646 cv
226.124 217.801 223.537 214.671 219.558 214.671 cv
cp
f
298.492 46.0469 mo
297.037 46.2095 295.661 46.7217 294.365 47.5845 cv
294.689 48.771 294.852 50.1465 294.852 51.7109 cv
295.094 53.248 li
295.58 60.3677 li
295.903 62.2554 296.065 63.873 296.065 65.2217 cv
296.308 66.5161 li
296.55 69.8335 li
296.794 71.1279 li
297.037 72.4229 li
307.661 71.5596 312.489 66.7051 311.518 57.8589 cv
309.846 50.6855 305.502 46.7485 298.492 46.0469 cv
cp
f
315.542 214.934 mo
315.539 214.931 315.535 214.922 315.535 214.917 cv
315.535 214.917 li
315.535 214.924 315.538 214.929 315.542 214.934 cv
cp
315.542 214.937 mo
315.542 214.937 li
315.538 214.931 315.535 214.924 315.535 214.917 cv
315.449 214.683 314.85 213.038 314.799 212.899 cv
314.791 212.88 314.79 212.875 314.79 212.875 cv
314.79 212.875 314.796 212.893 314.799 212.899 cv
314.843 213.02 315.049 213.581 315.535 214.917 cv
313.847 210.25 313.736 205.671 317.137 203.469 cv
318.391 202.658 319.604 202.279 320.74 202.25 cv
323.654 202.179 326.044 204.44 327.267 207.701 cv
328.581 210.5 li
315.545 214.952 li
315.544 214.947 315.543 214.942 315.542 214.938 cv
315.542 214.937 315.542 214.937 315.542 214.937 cv
cp
324.754 234.1 mo
324.332 234.109 323.911 234.102 323.487 234.076 cv
318.143 233.746 315.928 229.183 316.529 222.744 cv
324.945 219.469 333.718 217.084 342.326 214.359 cv
339.348 201.942 332.864 191.288 320.098 191.6 cv
318.497 191.638 316.796 191.847 314.993 192.25 cv
291.645 201.543 297.321 241.151 320.964 244.389 cv
321.869 244.513 322.875 244.559 323.957 244.534 cv
330.024 244.385 338.297 241.958 342.171 238.267 cv
342.171 238.267 341.309 228.925 340.922 226.458 cv
335.72 230.694 330.34 233.963 324.754 234.1 cv
cp
315.542 214.938 mo
315.542 214.938 315.542 214.938 315.542 214.937 cv
315.542 214.938 li
315.542 214.938 li
315.542 214.938 li
cp
223.525 230.163 mo
222.069 231.138 220.508 231.618 219.001 231.655 cv
215.591 231.738 212.448 229.558 211.392 225.754 cv
209.833 220.146 213.512 215.114 218.959 214.696 cv
219.098 214.685 219.235 214.679 219.373 214.674 cv
223.458 214.576 226.114 217.743 226.66 221.646 cv
227.146 225.126 226.164 228.388 223.525 230.163 cv
cp
288.017 182.372 mo
287.734 182.434 li
281.694 194.817 277.531 208.466 272.536 221.323 cv
254.304 191.346 li
249.141 237.606 li
244.314 237.036 240.634 234.104 238.106 228.788 cv
239.698 218.005 244.935 205.75 237.138 195.942 cv
231.803 189.231 222.59 187.875 214.19 188.08 cv
212.175 188.127 210.207 188.267 208.349 188.442 cv
207.337 188.731 206.509 188.881 205.867 188.9 cv
204.748 192.413 203.799 195.966 202.783 199.51 cv
204.684 199.131 206.474 198.522 208.422 198.467 cv
209.035 198.19 209.785 198.03 210.504 198.012 cv
210.601 198.009 210.695 198.01 210.791 198.013 cv
212.004 197.871 213.146 197.786 214.219 197.759 cv
222.791 197.551 226.83 201.079 226.337 208.342 cv
225.968 209.484 li
222.37 207.831 218.963 207.046 215.752 207.125 cv
211.363 207.23 207.331 208.955 203.66 212.292 cv
197.918 219.947 197.276 227.797 201.739 235.846 cv
205.89 241.901 211.186 245.284 217.62 245.997 cv
218.353 246.043 219.066 246.059 219.762 246.042 cv
224.739 245.921 228.895 244.165 232.226 240.771 cv
236.872 245.772 242.177 248.2 248.134 248.054 cv
249.08 248.033 250.048 247.943 251.031 247.792 cv
251.544 245.872 252.107 243.962 252.753 242.083 cv
260.517 241.896 li
263.085 226.312 li
278.133 241.808 li
283.951 220.194 li
286.616 238.996 li
301.941 235.505 li
288.017 182.372 li
cp
158.938 170.892 mo
166.952 170.698 175.02 172.598 183.135 176.592 cv
181.006 182.002 178.23 187.53 176.627 193.123 cv
172.972 190.572 169.672 189.529 166.739 189.598 cv
155.828 189.864 150.012 205.571 150.12 216.651 cv
150.269 231.583 159.399 246.092 174.858 245.716 cv
175.32 245.705 175.788 245.68 176.264 245.642 cv
176.485 245.525 176.668 245.293 176.812 244.95 cv
175.102 239.404 172.812 231.92 172.671 226.13 cv
172.329 225.967 li
169.984 227.411 167.39 228.509 164.941 229.774 cv
162.981 224.748 160.403 219.512 159.128 214.279 cv
169.333 210.033 179.565 205.702 189.926 201.862 cv
191.919 207.23 194.135 212.598 195.757 218.092 cv
193.541 219.987 190.728 221.439 188.286 223.033 cv
192.295 235.625 196.384 248.179 200.476 260.745 cv
200.807 261.969 201.217 263.247 201.248 264.522 cv
195.647 266.493 190.156 267.5 184.83 267.629 cv
170.695 267.972 157.72 262.135 146.96 251.734 cv
126.065 231.534 122.213 195.694 143.507 177.555 cv
147.04 174.547 150.762 172.292 155.699 171.087 cv
156.778 170.984 157.857 170.918 158.938 170.892 cv
158.938 170.892 li
cp
1 1 1 rgb
f
80.7769 94.2666 mo
69.7339 87.1855 53.54 86.2114 46.4053 73.7778 cv
39.2524 61.312 54.792 48.8306 66.9829 52.1563 cv
69.623 52.876 79.7476 54.4761 81.9912 53.0859 cv
86.0332 47.4722 89.3633 41.23 92.9331 35.3276 cv
97.1108 28.4204 76.8433 22.9985 72.5059 22.604 cv
64.1763 21.8462 56.3589 23.8896 48.5352 26.417 cv
49.7358 28.5151 50.936 30.6138 52.1367 32.7119 cv
50.6011 33.2778 44.9219 34.3359 44.1621 35.6499 cv
43.4023 36.9639 45.3179 42.4121 45.5938 44.0254 cv
43.958 44.0327 38.2583 43.0879 37.0967 44.063 cv
35.9351 45.0381 35.8789 50.8169 35.5889 52.4268 cv
34.0474 51.8745 29.0171 49.041 27.5898 49.5605 cv
26.1626 50.0801 24.1304 55.4834 23.3047 56.8975 cv
21.4136 55.3228 19.5225 53.748 17.6313 52.1733 cv
11.666 67.7505 18.5659 83.8809 29.4136 95.6372 cv
34.1377 100.757 39.9102 104.816 46.3159 107.551 cv
52.9404 110.378 59.8813 110.652 66.6191 112.632 cv
72.0308 114.222 78.3662 116.523 81.7881 121.228 cv
87.4526 129.016 80.2397 135.768 74.1514 140.58 cv
59.2534 152.355 42.0493 148.694 27.8652 137.712 cv
26.2363 144.659 24.915 151.559 23.3442 158.5 cv
22.498 162.238 21.9907 163.26 26.042 164.922 cv
31.0352 166.973 36.2012 168.625 41.4932 169.706 cv
51.6362 171.775 62.1714 171.591 72.1128 168.594 cv
90.1313 163.163 103.117 150.5 104.866 131.1 cv
106.39 114.199 94.6831 101.899 80.7769 94.2666 cv
80.7769 94.2666 105.048 107.589 80.7769 94.2666 cv
cp
.956863 .729412 .168627 rgb
f
187.652 23.313 mo
187.652 20.0049 188.407 18.9385 184.74 19.7534 cv
182.564 20.2368 180.288 20.4355 178.106 20.7241 cv
173.722 21.3042 169.434 22.1851 165.044 22.8096 cv
163.088 23.0879 161.352 23.1133 160.469 24.3647 cv
159.637 28.9971 160.404 33.7656 159.902 38.4424 cv
159.782 42.8037 159.579 47.0762 159.579 51.4038 cv
159.579 60.9937 159.188 70.6084 158.97 80.2017 cv
158.907 82.9644 158.844 85.7266 158.781 88.4888 cv
158.757 89.5728 156.35 89.5972 155.449 89.8164 cv
150.354 91.0571 145.257 92.2983 140.162 93.5391 cv
139.435 68.0366 138.709 42.5342 137.982 17.0317 cv
137.963 16.3447 124.638 18.6899 123.158 18.9902 cv
119.79 19.6738 116.358 19.7983 113.008 20.6357 cv
111.048 21.1255 108.791 21.6138 106.748 21.6138 cv
106.247 22.1904 106.668 25.4043 106.832 26.2622 cv
109.763 41.6626 110.925 57.5342 113.009 73.1167 cv
115.456 91.416 117.795 109.723 120.406 127.98 cv
122.417 142.046 122.712 156.992 126.165 170.801 cv
127.756 170.801 140.162 160.372 140.162 158.846 cv
140.162 151.684 140.486 144.609 140.486 137.447 cv
140.486 129.433 140.088 120.884 141.123 112.938 cv
141.452 110.411 141.2 110.196 143.41 109.819 cv
145.545 109.456 147.68 109.092 149.815 108.729 cv
153.259 108.142 156.702 107.555 160.146 106.969 cv
160.146 116.752 160.812 127.049 159.789 136.771 cv
159.28 141.596 159.579 146.525 159.579 151.371 cv
159.579 153.387 171.902 155.429 173.656 155.592 cv
177.028 132.196 178.548 108.362 181.167 84.7383 cv
183.431 64.3062 184.684 43.6484 187.652 23.313 cv
187.652 23.313 li
cp
f
230.855 122.826 mo
227.757 121.272 222.475 122.464 219.044 122.018 cv
216.637 121.704 217.179 121.069 217.506 118.781 cv
217.923 115.863 218.428 112.955 218.881 110.042 cv
219.978 102.994 221.938 94.8931 221.713 87.7939 cv
224.504 91.5332 225.258 98.959 226.25 103.694 cv
226.86 106.61 232.759 121.677 230.855 122.826 cv
230.533 122.665 230.855 122.826 230.855 122.826 cv
cp
272.521 147.663 mo
267.026 139.135 263.478 128.28 259.092 119.104 cv
254.122 108.706 249.409 98.0762 244.562 87.5845 cv
239.937 77.5737 235.085 67.665 230.692 57.564 cv
228.388 52.2646 225.964 47.0479 223.493 41.8408 cv
221.034 36.6597 219.339 30.1953 215.647 25.7402 cv
211.085 48.5352 206.079 71.3457 201.19 94.1162 cv
200.042 99.4678 198.975 104.839 197.864 110.199 cv
196.885 114.926 196.503 121.126 194.65 125.576 cv
192.337 131.135 191.963 138.36 190.739 144.33 cv
189.579 149.985 186.899 156.75 187.329 162.469 cv
192.71 162.418 198.055 162.617 203.429 162.631 cv
204.973 162.635 206.491 162.61 208.027 162.504 cv
212.004 162.23 211.251 160.701 211.813 156.687 cv
212.235 153.663 212.427 150.467 213.229 147.533 cv
213.877 145.155 216.108 145.875 218.373 145.716 cv
224.248 145.3 230.123 144.884 235.999 144.47 cv
237.612 144.355 240.323 151.411 241.212 153.002 cv
242.323 154.993 243.378 157.013 244.403 159.063 cv
245.332 160.921 247.681 159.322 249.248 158.826 cv
252.323 157.85 260.083 156.805 262.327 154.542 cv
264.776 153.788 267.355 152.75 269.853 152.275 cv
273.007 151.313 274.261 151.069 272.521 147.663 cv
272.521 147.663 li
cp
f
297.037 72.4229 mo
296.174 68.2881 295.816 63.8228 295.529 59.6274 cv
295.385 57.5015 295.269 55.3716 295.094 53.248 cv
294.769 49.3008 293.386 46.6177 298.492 46.0469 cv
306.003 46.7988 311.873 52.7607 311.632 60.5195 cv
311.378 68.6777 304.26 71.8359 297.037 72.4229 cv
297.037 72.4229 307.661 71.5596 297.037 72.4229 cv
cp
350.595 128.975 mo
345.096 118.488 337.339 109.09 331.263 98.9663 cv
329.834 96.5859 328.316 93.2651 326.405 91.3535 cv
325.48 90.4292 324.87 89.0503 324.181 87.9507 cv
322.307 84.9629 323.559 84.3496 325.242 81.1592 cv
330.22 71.728 335.063 61.1489 335.424 50.3018 cv
336.094 30.2095 315.991 25.5938 299.635 25.5811 cv
293.109 25.5757 286.686 26.5181 280.226 27.5981 cv
277.825 27.999 275.465 28.4854 273.044 28.833 cv
270.085 29.2573 266.535 28.9531 266.535 32.1826 cv
266.535 37.9937 268.323 43.9448 268.84 49.769 cv
269.336 55.356 270.32 60.9775 271.083 66.5405 cv
271.995 73.1929 275.628 99.7217 276.324 105.107 cv
278.771 127.26 282.149 149.451 285.215 171.53 cv
285.451 173.234 291.628 169.829 292.999 169.238 cv
296.161 167.872 299.247 166.388 302.411 165.032 cv
303.728 164.467 305.047 163.91 306.366 163.352 cv
307.795 162.75 307.067 161.573 307.067 160.123 cv
307.067 156.706 306.453 153.225 306.303 149.785 cv
306.037 143.712 305.254 137.688 305.041 131.623 cv
304.774 124.014 304.915 115.615 303.427 108.182 cv
311.107 117.901 318.507 128.014 325.743 138.062 cv
327.591 140.628 329.37 143.533 331.502 145.842 cv
332.732 147.176 333.736 148.734 334.814 150.19 cv
335.468 151.073 338.685 146.572 339.301 145.872 cv
342.027 142.771 345.396 139.641 347.683 136.215 cv
349.212 133.923 353.241 131.872 350.595 128.975 cv
350.595 128.975 li
cp
f
437.002 46.5322 mo
437.002 43.1465 433.936 38.1284 432.806 35.0225 cv
431.346 31.0117 429.849 27.0127 428.425 22.9888 cv
427.772 21.1445 426.354 14.0005 424.733 16.4761 cv
422.168 20.3921 419.947 24.4575 417.464 28.4224 cv
408.382 42.918 399.735 57.6523 391.128 72.4229 cv
389.899 68.6758 390.437 63.6602 390.322 59.7622 cv
390.206 55.7705 389.849 51.8301 389.695 47.833 cv
389.38 39.6484 388.878 31.4927 388.62 23.313 cv
381.973 24.2759 375.408 25.2964 368.748 26.3252 cv
364.817 26.9326 360.866 27.4092 356.946 28.085 cv
353.504 28.6782 347.733 27.9434 349.204 32.7759 cv
353.063 45.4502 353.612 59.4058 356.317 72.3862 cv
362.444 101.778 366.184 131.549 372.361 160.925 cv
372.952 163.735 373.497 166.496 373.938 169.342 cv
374.108 170.447 379.808 167.125 380.644 166.484 cv
381.979 165.462 394.714 159.557 394.685 158.289 cv
394.521 151.143 394.427 143.997 393.798 136.883 cv
393.467 133.148 393.416 129.408 393.326 125.651 cv
393.221 121.279 392.184 116.52 393.313 112.228 cv
400.429 120.515 405.976 130.674 412.282 139.638 cv
413.901 141.938 415.246 144.456 416.977 146.693 cv
417.804 147.762 419.56 151.7 420.699 150.819 cv
421.861 149.922 422.598 148.727 423.49 147.583 cv
425.238 145.341 426.989 143.101 428.748 140.868 cv
429.482 139.963 430.336 138.549 431.216 137.793 cv
432.153 136.989 432.944 135.815 433.644 134.8 cv
435.31 132.376 434.942 132.353 433.118 130.27 cv
428.479 124.087 422.759 118.288 417.665 112.47 cv
416.382 111.072 403.733 98.2686 404.887 96.7954 cv
413.517 85.7749 422.645 75.1011 431.171 64.0322 cv
433.465 61.0547 435.871 58.2803 438.217 55.3628 cv
440.461 52.5718 438.189 49.502 437.002 46.5322 cv
437.002 46.2095 437.002 46.5322 437.002 46.5322 cv
cp
f
165.842 95.9741 mo
144.023 96.4136 129.368 99.8872 117.211 104.42 cv
117.389 105.733 117.568 107.063 117.751 108.426 cv
117.994 109.558 li
117.994 110.475 118.102 111.391 118.317 112.309 cv
118.56 114.007 li
119.126 118.538 li
119.126 119.347 li
119.369 120.803 li
119.692 122.987 li
119.936 125.011 li
120.259 126.952 li
120.826 130.916 li
121.068 132.535 li
121.068 133.667 121.176 134.342 121.392 134.557 cv
121.634 136.499 li
121.634 138.198 li
121.958 139.008 li
122.201 141.597 li
122.201 143.051 122.389 144.267 122.768 145.237 cv
123.09 147.179 li
123.09 148.688 123.171 150.01 123.333 151.142 cv
123.657 152.275 li
123.818 154.864 124.088 156.913 124.466 158.424 cv
125.032 162.388 li
125.032 163.467 125.113 164.114 125.275 164.331 cv
125.275 165.139 li
125.49 167.405 125.788 169.292 126.165 170.801 cv
126.703 170.801 127.083 170.694 127.297 170.48 cv
128.43 169.346 li
129.239 168.78 li
130.372 167.863 131.019 167.216 131.181 166.838 cv
132.071 166.271 li
133.446 164.896 li
134.336 164.331 li
140.162 158.991 li
140.162 149.121 li
140.486 146.937 li
140.486 135.689 li
140.486 134.18 140.566 132.859 140.728 131.726 cv
140.728 119.914 li
140.728 115.977 141.023 112.712 141.618 110.125 cv
160.146 106.969 li
160.146 119.914 li
160.146 121.802 160.064 123.392 159.902 124.687 cv
159.902 135.689 li
159.579 138.764 li
159.579 152.275 li
160.469 152.518 li
163.542 153.327 li
163.919 153.327 164.566 153.434 165.484 153.651 cv
167.75 154.217 li
169.961 154.971 171.929 155.43 173.656 155.592 cv
173.899 153.327 li
173.899 151.142 li
174.223 150.01 li
174.223 148.877 li
174.465 146.937 li
174.841 144.455 175.032 142.377 175.032 140.706 cv
175.355 139.331 li
175.598 137.389 li
175.598 135.878 175.787 134.099 176.165 132.049 cv
176.165 130.026 li
176.407 129.217 li
176.407 128.085 176.514 127.411 176.731 127.195 cv
176.731 125.252 li
177.107 123.203 177.377 120.777 177.54 117.972 cv
177.863 116.03 li
178.106 114.007 li
178.106 113.161 178.709 107.195 179.909 96.1777 cv
175.556 95.9512 170.891 95.8721 165.842 95.9741 cv
cp
.94902 .6 .0784314 rgb
f
84.1753 126.791 mo
84.0947 127.356 li
83.7173 129.406 83.0698 131.213 82.1533 132.777 cv
66.0239 151.6 47.9302 153.247 27.8652 137.712 cv
26.3286 144.267 li
26.2754 145.721 26.0322 146.881 25.6006 147.746 cv
25.6006 148.473 li
24.5488 152.598 li
24.5488 153.327 li
23.8208 155.997 li
23.7393 156.805 li
23.416 158.18 li
22.4453 162.469 li
22.877 163.223 23.416 163.764 24.0635 164.087 cv
41.915 171.855 58.5005 173.175 73.8203 168.051 cv
84.9307 164.815 93.2896 158.83 98.9004 150.091 cv
106.476 135.238 107.004 122.429 100.493 111.662 cv
94.2217 114.616 88.0161 117.6 80.9746 120.229 cv
82.6118 122.092 83.6855 124.275 84.1753 126.791 cv
cp
f
314.917 123.554 mo
317.343 126.871 li
318.313 128.166 li
319.042 129.217 li
320.013 130.431 li
320.741 131.482 li
322.763 134.072 li
323.088 134.395 323.492 134.908 323.977 135.609 cv
326.89 139.654 li
327.618 140.463 li
328.103 141.326 328.669 142.081 329.316 142.727 cv
330.046 143.78 li
331.017 145.317 li
331.987 146.37 li
334.98 150.415 li
335.465 150.252 336.032 149.822 336.679 149.121 cv
337.488 147.933 338.216 147.017 338.863 146.37 cv
344.77 139.654 li
345.741 138.306 346.63 137.281 347.439 136.579 cv
347.925 135.852 li
351.565 131.726 li
351.323 129.945 li
350.595 128.975 li
349.381 126.871 li
348.653 125.9 li
347.683 124.363 li
346.955 123.312 li
342.957 117.004 li
334.955 119.522 325.728 121.521 314.226 122.558 cv
314.917 123.554 li
cp
f
364.025 113.521 mo
364.025 114.493 li
364.349 115.518 364.51 116.461 364.51 117.324 cv
364.833 118.133 li
365.077 119.914 li
365.077 120.615 365.186 121.478 365.4 122.502 cv
365.967 124.606 li
366.13 125.307 366.249 125.954 366.331 126.547 cv
366.412 127.141 366.56 128.139 366.775 129.541 cv
367.018 131.563 li
367.396 132.589 367.584 133.532 367.584 134.395 cv
368.394 138.278 li
368.718 139.815 li
368.879 141.542 369.229 143.538 369.77 145.804 cv
370.093 147.826 li
370.337 149.929 li
370.712 150.955 371.01 152.33 371.225 154.055 cv
371.549 155.458 371.818 157.102 372.035 158.991 cv
372.277 160.527 li
372.601 162.064 li
373.087 163.844 li
373.976 169.589 li
375.352 169.589 li
379.478 167 li
380.287 166.756 li
381.661 165.706 li
388.296 162.064 li
388.862 161.58 li
394.688 158.424 li
394.445 147.826 li
394.067 146.638 393.961 145.534 394.122 144.509 cv
393.878 138.845 li
393.878 137.443 393.771 136.229 393.556 135.205 cv
393.313 125.091 li
393.313 124.228 393.23 123.554 393.069 123.069 cv
393.069 119.428 li
392.692 116.677 392.773 114.277 393.313 112.228 cv
394.688 114.007 li
395.497 115.545 li
398.571 119.914 li
399.947 122.017 li
400.514 122.502 li
408.521 134.152 li
408.765 134.638 li
412.407 139.815 li
412.973 140.868 li
413.891 142.054 414.536 142.998 414.913 143.7 cv
416.288 145.804 li
417.665 147.583 li
418.582 149.147 419.417 150.36 420.175 151.223 cv
421.224 150.415 li
422.115 149.443 li
423.49 147.583 li
428.748 140.868 li
429.448 140.005 429.908 139.493 430.125 139.331 cv
430.934 138.036 li
431.499 137.551 li
433.171 135.609 434.357 133.883 435.061 132.372 cv
434.521 131.833 433.873 131.132 433.118 130.27 cv
431.823 128.543 430.718 127.249 429.8 126.386 cv
429.234 125.9 li
427.859 124.363 li
425.432 121.532 li
422.601 118.133 li
421.55 117.081 li
420.793 116.057 420.039 115.194 419.283 114.493 cv
418.96 114.007 418.421 113.333 417.665 112.47 cv
416.532 111.418 li
415.157 109.881 li
414.4 108.641 413.217 107.266 411.598 105.756 cv
410.68 104.514 409.925 103.651 409.331 103.167 cv
409.089 102.6 li
406.905 100.334 li
405.933 99.0938 405.098 98.123 404.396 97.4214 cv
407.892 92.9585 li
388.464 96.3677 376.239 102.829 363.147 108.921 cv
363.361 110.767 363.654 112.302 364.025 113.521 cv
cp
f
227.944 109.153 mo
228.266 110.366 li
228.536 111.823 228.886 113.117 229.319 114.25 cv
229.966 117.163 li
230.37 118.619 li
230.964 120.075 231.369 121.37 231.585 122.502 cv
230.855 122.826 li
230.533 122.665 229.966 122.61 229.157 122.665 cv
226.648 122.34 li
225.839 122.395 225.164 122.368 224.626 122.26 cv
220.904 122.26 li
217.183 121.775 li
217.345 120.237 li
217.506 118.781 li
217.992 116.03 li
218.099 114.682 218.343 113.09 218.72 111.256 cv
218.881 110.042 li
219.719 104.177 li
213.875 102.028 207.573 100.094 200.257 98.6392 cv
200.193 98.959 li
195.986 119.266 li
195.824 120.561 li
195.177 122.826 li
194.853 124.282 li
194.853 125.091 li
194.449 126.062 li
194.044 127.842 li
193.882 129.676 193.585 131.186 193.154 132.372 cv
191.86 138.683 li
191.698 139.654 li
190.403 145.964 li
190.241 146.937 li
189.836 148.716 li
187.977 157.534 li
187.437 159.368 187.22 161.013 187.329 162.469 cv
195.986 162.388 li
197.01 162.497 198.251 162.577 199.708 162.631 cv
203.429 162.631 li
205.694 162.469 li
206.18 162.631 li
210.873 162.308 li
211.035 161.337 li
211.41 159.665 211.653 158.235 211.762 157.047 cv
212.249 153.569 li
212.41 152.842 li
212.571 150.2 213.002 147.933 213.704 146.046 cv
236.601 144.426 li
238.866 148.473 li
239.433 149.929 li
239.997 150.658 li
241.212 153.002 li
241.697 153.731 li
241.75 154.055 242.048 154.622 242.587 155.43 cv
244.853 159.962 li
246.632 159.8 li
248.979 158.909 li
253.831 157.372 li
255.046 157.047 li
256.26 156.643 li
261.356 154.864 li
261.843 154.809 262.167 154.704 262.327 154.542 cv
264.997 153.812 li
265.726 153.569 li
267.343 152.922 268.718 152.492 269.853 152.275 cv
273.492 151.062 li
273.439 150.2 273.303 149.525 273.087 149.04 cv
272.521 147.663 li
271.955 146.937 li
271.739 146.126 271.335 145.155 270.741 144.022 cv
269.933 142.325 li
269.609 141.353 li
266.696 135.366 li
266.372 134.395 li
265.807 133.505 li
260.548 121.937 li
260.332 121.451 260.144 121.127 259.981 120.965 cv
259.658 119.994 li
259.092 119.104 li
259.048 118.984 li
246.87 115.797 237.425 111.318 227.316 107.154 cv
227.944 109.153 li
cp
f
278.611 122.479 mo
278.994 125.091 li
279.237 126.629 li
279.237 127.653 279.317 128.247 279.479 128.408 cv
279.722 130.188 li
279.966 131.968 li
280.208 134.8 li
280.936 139.168 li
280.936 139.897 li
281.907 147.341 li
282.15 148.634 li
282.392 151.466 li
282.634 152.76 li
283.362 157.858 li
283.605 159.152 li
283.605 160.689 li
284.092 162.712 li
284.092 163.44 li
285.305 172.178 li
286.437 172.178 287.517 171.909 288.541 171.37 cv
289.27 170.884 li
292.181 169.589 li
296.308 167.809 li
296.955 167.647 297.872 167.216 299.058 166.514 cv
301.971 165.219 li
303.669 164.492 li
307.311 162.955 li
307.067 161.417 li
307.067 158.83 li
306.745 157.158 306.584 155.727 306.584 154.542 cv
306.341 150.658 li
306.097 145.076 li
305.854 143.293 li
305.611 138.117 li
305.37 136.903 li
305.127 134.072 li
304.883 127.114 li
304.601 125.647 304.464 124.353 304.428 123.177 cv
303.176 123.225 301.909 123.265 300.608 123.291 cv
292.35 123.458 285.103 123.146 278.611 122.479 cv
cp
f
179.666 98.415 mo
179.817 97.0132 179.98 95.5269 180.153 93.9375 cv
175.708 93.7012 170.945 93.6177 165.797 93.7231 cv
143.985 94.1621 129.127 97.6421 116.905 102.14 cv
117.104 103.624 117.31 105.149 117.519 106.696 cv
129.632 102.11 144.008 98.6655 165.888 98.2251 cv
170.841 98.126 175.409 98.1992 179.666 98.415 cv
cp
1 .823529 .25098 rgb
f
101.588 113.635 mo
100.909 112.313 100.137 111.019 99.2549 109.756 cv
98.8711 109.937 98.4883 110.118 98.105 110.298 cv
91.9619 113.197 85.939 116.036 79.1709 118.508 cv
80.4712 119.573 81.5352 120.772 82.3564 122.109 cv
88.7354 119.698 94.415 117.019 100.028 114.371 cv
100.549 114.125 101.069 113.879 101.588 113.635 cv
cp
f
409.939 90.3442 mo
390.902 93.3521 378.51 99.1919 366.429 104.894 cv
365.169 105.487 363.915 106.078 362.659 106.665 cv
362.892 108.021 li
363.135 108.83 li
363.234 109.707 363.355 110.507 363.49 111.246 cv
365.125 110.488 366.739 109.727 368.348 108.967 cv
379.506 103.703 390.254 98.6333 405.815 95.6089 cv
409.939 90.3442 li
cp
f
300.651 125.542 mo
302.007 125.515 303.322 125.472 304.624 125.421 cv
304.489 124.435 304.398 123.497 304.398 122.665 cv
304.398 122.025 304.379 121.448 304.34 120.928 cv
303.104 120.974 301.85 121.014 300.561 121.04 cv
292.137 121.208 284.81 120.885 278.277 120.193 cv
278.946 124.764 li
285.388 125.405 292.545 125.705 300.651 125.542 cv
cp
f
219.853 103.247 mo
219.772 102.277 li
219.819 102.166 219.859 101.998 219.901 101.85 cv
214.148 99.7622 207.909 97.8755 200.697 96.4399 cv
200.193 98.959 li
199.807 100.824 li
207.157 102.284 213.473 104.244 219.396 106.448 cv
219.853 103.247 li
cp
f
341.776 115.14 mo
341.714 115.057 li
333.637 117.561 324.328 119.5 312.585 120.447 cv
313.216 121.288 li
314.188 122.502 li
314.917 123.554 li
315.737 124.676 li
327.082 123.561 336.243 121.504 344.2 118.963 cv
341.776 115.14 li
cp
f
259.981 120.965 mo
259.658 119.994 li
259.092 119.104 li
258.2 116.677 li
258.132 116.573 258.088 116.494 258.023 116.395 cv
249.196 113.947 241.743 110.794 234.103 107.559 cv
231.575 106.489 229.033 105.413 226.425 104.359 cv
226.648 105.027 li
227.944 109.153 li
228.152 109.938 li
229.551 110.522 230.946 111.113 232.347 111.707 cv
240.86 115.313 249.526 118.978 260.398 121.636 cv
260.246 121.331 260.104 121.087 259.981 120.965 cv
cp
f
291.938 25.8218 mo
291.454 26.145 li
288.783 26.3872 li
286.519 26.6299 li
283.848 26.8726 li
282.634 27.1157 li
281.664 27.3574 li
279.722 27.6821 li
278.508 27.9243 li
277.538 27.9243 li
275.759 28.4102 li
274.301 28.6523 li
272.604 28.896 li
266.535 30.1904 li
266.535 33.2646 li
266.777 34.3154 li
267.021 36.0957 li
267.182 37.2822 267.304 38.2129 267.384 38.8867 cv
267.466 39.561 267.587 40.4111 267.748 41.436 cv
267.991 42.9731 li
268.234 44.7529 li
268.477 46.5322 li
268.718 48.3936 li
268.962 51.1445 li
268.962 51.6836 269.044 52.0347 269.205 52.1958 cv
269.448 53.9761 li
269.48 54.2183 li
269.646 54.2178 269.8 54.2212 269.966 54.2207 cv
279.996 54.1724 288.098 53.5747 294.997 52.6357 cv
294.852 51.7109 li
294.852 50.1465 294.689 48.771 294.365 47.5845 cv
295.661 46.7217 297.037 46.2095 298.492 46.0469 cv
302.407 46.4385 305.459 47.8774 307.709 50.2886 cv
317.547 47.9795 325.21 45.0532 334.614 42.6226 cv
331.178 29.9131 316.957 24.3101 291.938 25.8218 cv
cp
437.002 46.5322 mo
437.002 46.2095 436.811 45.6973 436.436 44.9956 cv
428.425 22.9888 li
428.182 22.0186 li
425.674 15.5454 li
425.108 15.5454 li
424.865 16.2744 li
421.792 20.9663 li
421.414 21.9922 420.954 22.8545 420.415 23.5557 cv
418.797 26.145 li
418.582 26.6299 418.393 26.9814 418.231 27.1963 cv
414.024 33.9111 li
413.217 35.2061 li
409.964 40.689 li
420.394 42.6597 428.435 45.3657 437.492 47.7598 cv
437.002 46.5322 li
cp
225.273 45.6426 mo
224.385 43.4585 li
223.493 41.8408 li
222.603 39.8989 li
217.669 29.0571 li
217.345 28.5718 li
216.75 27.3315 216.183 26.3872 215.647 25.7402 cv
214.028 33.8306 li
213.624 34.8018 li
213.624 35.5293 li
211.498 45.3223 li
216.664 46.7583 221.645 48.2515 227.098 49.5986 cv
226.648 48.4741 li
225.948 47.396 225.487 46.4517 225.273 45.6426 cv
cp
388.862 30.999 mo
388.62 23.313 li
386.678 23.5557 li
383.604 23.7988 li
382.523 24.1221 381.527 24.2837 380.611 24.2837 cv
380.232 24.4995 379.586 24.6079 378.67 24.6079 cv
376.728 25.0928 li
366.775 26.6299 li
364.941 26.792 363.418 27.0078 362.204 27.2769 cv
360.991 27.5469 359.547 27.7627 357.877 27.9243 cv
353.184 28.7334 li
351.565 28.896 350.19 29.1382 349.058 29.4619 cv
349.058 32.2935 li
349.624 34.1543 li
350.878 39.3467 li
357.798 38.3999 365.438 37.958 375.516 37.9097 cv
380.555 37.8857 385.126 38.0044 389.325 38.2397 cv
389.188 34.6396 li
389.188 33.291 389.077 32.0781 388.862 30.999 cv
cp
184.74 19.7534 mo
184.254 19.8613 183.365 19.9961 182.07 20.1577 cv
180.371 20.4814 li
178.996 20.4814 li
178.106 20.7241 li
176.731 21.0483 li
173.656 21.2905 li
172.523 21.668 171.499 21.8574 170.581 21.8574 cv
169.691 22.1802 li
167.426 22.4229 li
165.484 22.7471 li
163.786 22.9888 li
160.469 23.5557 li
160.469 24.3647 li
160.091 26.4678 159.983 28.2485 160.146 29.7046 cv
160.146 34.02 160.064 36.9321 159.902 38.4424 cv
159.902 38.9692 li
160.589 38.9604 161.246 38.9424 161.951 38.9395 cv
171.327 38.894 179.068 39.3516 185.792 40.1221 cv
186.52 33.1025 li
187.087 29.4619 li
187.41 25.2549 li
187.652 23.313 li
187.652 19.3486 li
186.277 19.3486 li
185.738 19.5107 185.226 19.6455 184.74 19.7534 cv
cp
54.8877 24.3647 mo
48.5352 26.417 li
52.1367 32.7119 li
44.1621 35.6499 li
45.5938 44.0254 li
37.0967 44.063 li
35.5889 52.4268 li
27.5898 49.5605 li
25.5249 53.0962 li
32.7095 54.2686 41.0718 55.0796 51.5864 55.228 cv
52.9189 54.2793 54.3608 53.4712 55.9399 52.8433 cv
57.7197 52.52 li
65.4858 52.1152 li
66.5381 52.0347 li
67.4277 52.2773 li
68.29 52.1694 69.3418 52.1958 70.5835 52.3574 cv
71.8784 52.4658 72.6333 52.5732 72.8486 52.6812 cv
74.251 52.7354 75.438 52.8706 76.4082 53.0859 cv
77.2173 53.0859 li
81.3145 53.6816 li
81.6675 53.7334 li
81.7222 53.6235 li
81.9912 53.0859 li
82.9619 51.7378 83.9604 50.2007 84.9849 48.4741 cv
87.8975 43.5396 li
88.4355 42.4604 89.0293 41.5708 89.6768 40.8691 cv
90.2148 39.7905 90.6748 39.0083 91.0522 38.5234 cv
91.8613 36.9863 li
92.6709 35.7993 93.2896 34.7749 93.7222 33.9111 cv
93.1558 32.0508 li
83.6094 22.7734 70.8535 20.2114 54.8877 24.3647 cv
cp
137.977 16.8403 mo
138.646 40.3105 li
126.604 41.8066 118.17 44.3296 109.856 46.8877 cv
109.804 46.418 109.77 45.959 109.701 45.4814 cv
109.404 43.4321 108.904 40.0605 108.204 35.3677 cv
107.88 33.6694 li
107.88 32.5361 li
107.638 31.4033 li
107.638 30.271 107.448 28.9766 107.071 27.52 cv
106.748 25.8218 li
106.748 21.6138 li
108.095 21.6138 109.794 21.3174 111.845 20.7241 cv
112.654 20.7241 li
114.92 20.1577 li
115.836 20.1577 116.483 20.0767 116.862 19.915 cv
117.832 19.915 118.855 19.7261 119.936 19.3486 cv
121.392 19.3486 li
126.974 18.2158 li
128.43 17.9736 li
131.505 17.6499 li
135.711 16.8403 li
137.977 16.8403 li
cp
f
328.188 63.3442 mo
328.181 63.3438 328.348 62.2729 328.549 60.3398 cv
328.736 58.4092 328.976 55.5967 328.762 52.1875 cv
328.53 48.8125 327.823 44.7241 325.511 41.0947 cv
323.249 37.4365 319.204 34.6777 314.361 33.2241 cv
309.518 31.7363 304.531 31.3481 300.014 31.2285 cv
295.481 31.1284 291.36 31.3389 287.897 31.5518 cv
280.969 32.0332 276.643 32.356 276.644 32.3188 cv
276.655 32.354 280.834 31.2939 287.723 30.0605 cv
291.173 29.4727 295.318 28.8799 299.995 28.6953 cv
304.654 28.5381 309.912 28.7246 315.254 30.3574 cv
317.911 31.1812 320.44 32.3843 322.596 34.002 cv
324.754 35.6108 326.5 37.6401 327.689 39.8008 cv
330.093 44.1709 330.393 48.6553 330.264 52.1704 cv
330.101 55.7319 329.478 58.5205 329.012 60.4204 cv
328.53 62.3203 328.181 63.3423 328.188 63.3442 cv
cp
1 1 1 rgb
f
133.776 47.8311 mo
133.776 47.8311 131.803 38.6289 131.22 27.1831 cv
131.136 25.2583 li
131.128 25.0381 li
131.132 25.0347 li
131.14 25.0225 li
131.161 24.978 li
131.158 24.9697 131.151 24.9609 131.139 24.9526 cv
131.116 24.9404 li
131.075 24.9409 131.179 24.9199 130.97 24.9448 cv
129.259 25.1206 li
126.045 25.3984 li
124.004 25.5537 122.181 25.6504 120.658 25.7119 cv
117.61 25.8345 115.761 25.813 115.761 25.813 cv
115.761 25.813 117.523 25.251 120.474 24.4785 cv
121.949 24.0928 123.72 23.6533 125.717 23.2051 cv
128.873 22.5327 li
130.56 22.2007 li
133.89 21.6426 li
134.218 27.0293 li
134.802 38.4761 133.776 47.8311 133.776 47.8311 cv
cp
f
179.564 54.8364 mo
179.564 54.8364 179.15 44.6377 180.48 32.2549 cv
180.629 30.8735 180.793 29.5225 180.967 28.2134 cv
181.231 26.3198 li
181.259 26.2749 181.294 26.1997 181.335 26.0884 cv
181.297 26.0688 181.234 26.0498 181.145 26.0322 cv
181.109 26.0308 181.128 26.02 181.042 26.0244 cv
180.663 26.0547 li
179.915 26.1104 li
177.101 26.2939 li
175.323 26.396 173.753 26.46 172.451 26.5 cv
169.844 26.5791 168.305 26.563 168.305 26.563 cv
168.305 26.563 169.783 26.1309 172.313 25.502 cv
173.578 25.1885 175.106 24.8242 176.845 24.4414 cv
179.604 23.8564 li
180.338 23.7075 li
180.712 23.6333 li
181.37 23.5205 li
184.299 23.0342 li
183.849 28.5234 li
183.741 29.8394 183.614 31.1943 183.466 32.5762 cv
182.136 44.9585 179.564 54.8364 179.564 54.8364 cv
cp
f
53.7104 28.5645 mo
53.7163 28.5972 56.3389 27.3755 60.9419 26.4624 cv
65.5 25.5552 72.2417 25.1543 79.25 27.3125 cv
80.9922 27.8477 82.6519 28.5063 84.1982 29.2651 cv
84.9717 29.6455 85.7168 30.0498 86.4302 30.4805 cv
86.79 30.6973 87.1309 30.9121 87.4844 31.1489 cv
88.1001 31.542 88.6685 31.9653 89.1729 32.3799 cv
89.5576 32.6885 li
89.4941 32.8345 89.394 32.9873 89.3149 33.1348 cv
88.8179 34.0098 li
88.3345 34.8569 li
88.0396 35.3184 li
86.8965 37.0806 li
84.8032 40.2192 li
82.2104 44.0381 80.4819 46.3291 80.4819 46.3291 cv
80.4819 46.3291 81.5571 43.668 83.4966 39.4795 cv
85.1104 36.0693 li
86.0322 34.1821 li
86.2729 33.6978 li
86.2998 33.5908 li
86.29 33.5313 86.3804 33.46 86.27 33.4414 cv
86.2002 33.4141 86.1431 33.3975 86.0908 33.3848 cv
85.105 32.8613 li
84.4282 32.5171 83.7212 32.1885 82.9932 31.873 cv
81.5347 31.2451 79.9849 30.6792 78.3711 30.1831 cv
71.9023 28.1875 65.644 27.8096 61.1084 27.9541 cv
56.561 28.1025 53.7104 28.5967 53.7104 28.5645 cv
cp
f
235.11 77.3555 mo
235.11 77.3555 228.214 65.0732 221.409 49.1934 cv
220.38 46.7979 219.415 44.4565 218.514 42.209 cv
217.852 40.5405 li
217.771 40.3354 li
217.758 40.2998 217.767 40.312 217.762 40.2974 cv
217.755 40.2461 li
217.731 40.1182 li
217.693 39.9297 217.623 39.6514 217.513 39.2739 cv
217.342 39.5728 217.214 39.5547 216.56 42.1963 cv
215.157 47.3389 li
213.844 51.834 li
214.33 47.1758 li
214.983 41.8848 li
215.121 40.5107 215.882 35.9741 216.678 31.3662 cv
221.104 41.0991 li
222.112 43.3018 223.141 45.6147 224.167 48.0107 cv
230.974 63.8906 235.11 77.3555 235.11 77.3555 cv
cp
f
385.985 46.8301 mo
385.985 46.8301 384.186 39.1948 383.816 29.7031 cv
383.799 29.2432 li
383.804 29.2402 li
383.807 29.2373 383.813 29.23 383.821 29.2168 cv
383.825 29.2036 383.818 29.188 383.792 29.1714 cv
382.318 29.2725 li
379.455 29.4121 li
377.636 29.4766 376.001 29.4863 374.634 29.4722 cv
371.898 29.4434 370.223 29.3154 370.223 29.3154 cv
370.223 29.3154 371.823 28.8052 374.479 28.1465 cv
375.808 27.8184 377.399 27.4521 379.187 27.0957 cv
382.004 26.5723 li
383.552 26.3208 li
386.648 25.9106 li
386.815 29.5869 li
387.186 39.0771 385.985 46.8301 385.985 46.8301 cv
cp
f
430.022 36.8213 mo
430.022 36.8213 429.149 35.5098 427.913 33.2949 cv
427.296 32.187 426.587 30.854 425.85 29.3447 cv
424.814 27.168 li
424.748 27.1318 424.728 27.1743 424.724 27.2041 cv
424.722 27.2222 li
425.185 26.4517 423.473 29.1216 422.558 30.3706 cv
421.515 31.8364 420.522 33.125 419.664 34.1924 cv
417.945 36.3257 416.761 37.5723 416.761 37.5723 cv
416.761 37.5723 417.303 35.9395 418.377 33.4204 cv
418.913 32.1597 419.584 30.6787 420.386 29.0674 cv
421.319 27.2407 421.637 26.5283 424.229 22.2065 cv
425.313 20.4175 li
427.258 25.7461 li
427.546 26.6035 li
427.741 27.2407 li
428.107 28.4766 li
428.575 30.0889 428.941 31.5537 429.225 32.7905 cv
429.791 35.2632 430.022 36.8213 430.022 36.8213 cv
cp
f
307.171 75.103 mo
307.164 75.0938 305.814 76.1982 303.368 77.5903 cv
302.142 78.2803 300.637 79.0376 298.849 79.6758 cv
297.949 79.9902 296.984 80.2764 295.917 80.4653 cv
295.613 80.5146 295.453 80.5464 295.011 80.5859 cv
294.515 80.6309 294.008 80.6406 293.533 80.5879 cv
292.85 80.4673 li
292.746 80.4346 292.598 80.4502 292.527 80.377 cv
292.441 80.0234 li
292.099 78.5913 li
291.956 78.0146 291.946 77.8516 291.905 77.582 cv
291.798 76.8164 li
291.612 75.3169 li
291.501 74.332 291.41 73.3789 291.34 72.4692 cv
291.198 70.6494 291.132 69.001 291.104 67.6118 cv
291.05 64.833 291.157 63.0928 291.157 63.0928 cv
291.157 63.0928 291.791 64.7173 292.585 67.3799 cv
292.983 68.7109 293.423 70.3018 293.844 72.0776 cv
294.052 72.9663 294.258 73.9009 294.452 74.873 cv
294.731 76.3579 li
294.946 77.6187 li
294.946 77.6167 294.937 77.624 294.937 77.6357 cv
294.937 77.6406 294.94 77.6479 294.946 77.6553 cv
295.004 77.6582 295.341 77.6357 295.53 77.6172 cv
296.427 77.5366 297.323 77.3901 298.184 77.231 cv
299.903 76.9038 301.481 76.5239 302.813 76.1958 cv
307.171 75.103 li
cp
f
225.353 126.396 mo
225.353 126.396 223.914 126.736 221.512 127.147 cv
220.312 127.353 218.869 127.576 217.248 127.785 cv
214.686 128.082 li
214.006 128.148 li
212.967 128.226 li
210.169 128.394 li
210.868 123.229 li
212.242 113.94 214.843 106.629 214.843 106.629 cv
214.843 106.629 215.213 114.38 213.836 123.67 cv
213.574 125.328 li
213.562 125.333 213.542 125.352 213.512 125.398 cv
213.512 125.417 213.527 125.438 213.562 125.461 cv
213.593 125.478 li
213.908 125.487 li
214.588 125.504 li
217.166 125.61 li
218.8 125.698 220.254 125.814 221.467 125.931 cv
223.892 126.164 225.353 126.396 225.353 126.396 cv
cp
f
85.3608 157.671 mo
85.3105 157.638 87.7744 155.418 90.6987 151.171 cv
93.6191 146.954 96.6533 140.455 97.3794 132.788 cv
98.1704 125.141 96.7495 118.079 94.9116 113.312 cv
93.1069 108.484 90.7861 106.055 90.8027 106.066 cv
90.7627 106.045 93.6553 107.92 96.2705 112.674 cv
98.8867 117.314 101.223 124.764 100.367 133.094 cv
99.9468 137.229 98.7686 141.08 97.1846 144.296 cv
95.6172 147.53 93.6724 150.127 91.8765 152.104 cv
88.2275 156.042 85.3135 157.626 85.3608 157.671 cv
cp
f
136.591 123.706 mo
136.591 123.684 135.089 117.019 135.089 108.6 cv
135.1 106.251 li
137.713 105.768 li
139.089 105.557 li
139.991 105.427 140.861 105.318 141.692 105.226 cv
143.353 105.043 144.852 104.929 146.111 104.859 cv
148.631 104.718 150.196 104.753 150.196 104.753 cv
150.196 104.753 148.765 105.386 146.385 106.226 cv
145.195 106.646 143.768 107.117 142.164 107.585 cv
141.362 107.821 140.517 108.055 139.633 108.282 cv
138.284 108.617 li
137.946 108.693 138.131 108.664 138.079 108.681 cv
138.082 108.696 li
138.088 108.705 138.092 108.705 138.092 108.705 cv
138.092 116.915 136.591 123.729 136.591 123.706 cv
cp
f
306.044 104.502 mo
306.044 104.502 305.294 104.303 304.056 103.878 cv
303.437 103.665 302.699 103.396 301.869 103.067 cv
301.557 102.942 li
301.429 102.926 li
301.35 102.918 301.283 102.916 301.229 102.921 cv
301.116 102.929 301.055 102.961 301.034 103.01 cv
301.105 103.253 301.163 103.371 301.206 103.414 cv
301.221 103.428 li
301.23 103.695 li
301.247 104.302 li
301.257 105.543 li
301.206 112.16 299.664 117.514 299.664 117.514 cv
299.664 117.514 298.203 112.138 298.253 105.52 cv
298.279 104.28 li
298.34 102.758 li
298.394 101.223 298.465 99.8188 298.545 98.6138 cv
301.001 100.267 li
302.036 100.992 li
302.504 101.326 li
302.77 101.542 li
303.458 102.109 304.051 102.627 304.535 103.065 cv
305.507 103.943 306.044 104.502 306.044 104.502 cv
cp
f
396.494 109.996 mo
396.494 109.996 395.69 109.696 394.431 109.084 cv
393.8 108.779 393.055 108.395 392.237 107.933 cv
392.151 107.887 391.998 107.788 391.964 107.783 cv
391.866 107.771 li
391.806 107.768 391.761 107.773 391.725 107.784 cv
391.655 107.807 391.633 107.857 391.639 107.916 cv
391.686 108.098 391.723 108.114 391.723 108.113 cv
391.62 109.004 li
391.476 110.017 li
391.372 110.681 391.253 111.318 391.124 111.925 cv
390.868 113.138 390.575 114.225 390.302 115.134 cv
389.751 116.953 389.269 118.065 389.269 118.065 cv
389.269 118.065 389.003 116.883 388.808 114.992 cv
388.708 114.048 388.626 112.925 388.603 111.686 cv
388.59 111.066 388.594 110.417 388.616 109.746 cv
388.665 108.724 li
388.763 107.519 li
388.934 105.717 389.136 103.988 389.341 102.506 cv
391.755 104.63 li
392.787 105.579 li
393.256 106.019 li
393.406 106.162 393.438 106.209 393.532 106.308 cv
394.166 107.001 394.706 107.642 395.145 108.188 cv
396.021 109.281 396.494 109.996 396.494 109.996 cv
cp
f
37.9473 148.288 mo
37.9473 148.288 36.9126 148.22 35.3311 147.902 cv
34.541 147.743 33.6138 147.522 32.6108 147.217 cv
31.8462 146.971 li
31.4546 146.837 li
31.2568 146.766 li
31.2397 146.764 31.2432 146.771 31.2354 146.775 cv
31.1982 146.804 31.2124 146.838 31.2139 146.842 cv
31.2148 146.842 li
31.2148 146.842 31.1958 146.813 31.1519 146.827 cv
31.041 147.23 30.8711 147.875 30.7183 148.346 cv
30.4023 149.359 30.0581 150.259 29.7383 151.01 cv
29.1001 152.513 28.5645 153.418 28.5645 153.418 cv
28.5645 153.418 28.3604 152.385 28.2593 150.756 cv
28.208 149.942 28.1831 148.977 28.2222 147.918 cv
28.2466 147.355 28.2637 146.913 28.3457 146.188 cv
28.4941 145.077 28.6763 143.881 28.8813 142.685 cv
28.917 142.48 li
30.0093 142.985 31.0874 143.51 32.0771 144.013 cv
32.439 144.198 li
32.6216 144.301 li
32.9785 144.51 li
33.6631 144.933 li
34.5474 145.496 35.3179 146.055 35.9521 146.554 cv
37.2222 147.547 37.9473 148.288 37.9473 148.288 cv
cp
f
49.4565 44.7021 mo
49.4565 44.7021 48.9619 43.9731 48.3594 42.7432 cv
48.0581 42.1289 47.73 41.3906 47.4229 40.5547 cv
47.2686 40.1372 47.1211 39.6953 46.9839 39.2334 cv
46.9355 39.1094 46.7935 38.4736 46.6924 38.0337 cv
46.374 36.5469 li
47.2568 36.2129 li
48.7563 35.6743 li
49.499 35.4507 li
49.9888 35.3115 50.4688 35.1968 50.9302 35.1001 cv
51.854 34.9082 52.7075 34.7915 53.4341 34.7222 cv
54.8877 34.584 55.8364 34.6318 55.8364 34.6318 cv
55.8364 34.6318 55.1489 35.2871 53.9561 36.1299 cv
53.3599 36.5513 52.6377 37.0195 51.8115 37.4761 cv
51.3989 37.7036 50.9604 37.9297 50.4985 38.1445 cv
49.7891 38.458 li
49.7881 38.4702 49.7939 38.4741 49.7939 38.4741 cv
49.7866 38.4702 li
49.7793 38.4678 49.7671 38.4648 49.7515 38.4688 cv
49.7451 38.5161 49.6943 38.3604 49.7363 38.7065 cv
49.7793 39.1865 49.8047 39.6523 49.8154 40.0977 cv
49.8384 40.9863 49.8057 41.7949 49.7524 42.4775 cv
49.646 43.8413 49.4565 44.7021 49.4565 44.7021 cv
cp
f
40.2617 47.8311 mo
40.2617 47.8311 40.519 48.8418 40.7251 50.4639 cv
40.8276 51.2754 40.918 52.2388 40.9561 53.3066 cv
40.9756 53.8403 40.981 54.3989 40.9692 54.9785 cv
40.8633 56.604 li
40.7104 58.4277 li
39.9736 58.2764 li
38.1304 57.8726 li
37.3418 57.6865 li
36.9043 57.5659 li
36.3257 57.4028 35.7715 57.2256 35.2466 57.0444 cv
34.1973 56.6797 33.2651 56.2925 32.4883 55.9375 cv
30.9341 55.228 30.0029 54.6484 30.0029 54.6484 cv
30.0029 54.6484 31.0879 54.4932 32.7969 54.4688 cv
33.6509 54.4556 34.6597 54.4766 35.7681 54.5649 cv
36.3213 54.6094 36.8994 54.6709 37.4937 54.7544 cv
37.9438 54.8203 li
38.0508 54.8369 li
38.0542 54.832 li
38.0576 54.8232 li
38.0605 54.813 38.0571 54.8062 38.0571 54.8062 cv
38.0601 54.8096 li
38.0635 54.814 38.0723 54.8223 38.0874 54.8252 cv
38.1118 54.8242 li
38.1255 54.7832 38.1235 54.9077 38.1563 54.6978 cv
38.2588 54.1279 38.375 53.5811 38.499 53.0615 cv
38.7476 52.0229 39.0264 51.0957 39.2871 50.3213 cv
39.8091 48.7705 40.2617 47.8311 40.2617 47.8311 cv
cp
f
286.616 238.996 mo
301.941 235.505 li
298.134 220.977 li
294.233 222.44 289.807 223.734 284.601 224.776 cv
286.616 238.996 li
cp
.929412 .929412 .929412 rgb
f
162.438 223.705 mo
163.29 225.75 164.164 227.78 164.941 229.774 cv
167.39 228.509 169.984 227.411 172.329 225.967 cv
172.671 226.13 li
172.812 231.92 175.102 239.404 176.812 244.95 cv
176.668 245.293 176.485 245.525 176.264 245.642 cv
175.788 245.68 175.32 245.705 174.858 245.716 cv
163.791 245.985 155.969 238.625 152.363 228.942 cv
147.122 232.063 142.39 235.346 136.727 238.33 cv
139.449 243.227 142.874 247.783 146.96 251.734 cv
157.72 262.135 170.695 267.972 184.83 267.629 cv
190.156 267.5 195.647 266.493 201.248 264.522 cv
201.217 263.247 200.807 261.969 200.476 260.745 cv
196.384 248.179 192.295 235.625 188.286 223.033 cv
190.728 221.439 193.541 219.987 195.757 218.092 cv
195.585 217.508 195.383 216.93 195.198 216.348 cv
193.01 216.5 190.712 216.719 188.276 217.026 cv
177.103 218.429 169.034 220.83 162.438 223.705 cv
cp
f
327.267 207.701 mo
328.581 210.5 li
315.545 214.952 li
315.544 214.947 315.543 214.942 315.542 214.938 cv
315.542 214.938 li
315.542 214.938 li
315.542 214.937 315.542 214.937 315.542 214.937 cv
315.538 214.931 315.535 214.924 315.535 214.917 cv
315.449 214.683 314.85 213.038 314.799 212.899 cv
314.791 212.88 314.79 212.875 314.79 212.875 cv
314.79 212.875 314.791 212.88 314.799 212.899 cv
314.843 213.02 315.049 213.581 315.535 214.917 cv
315.237 214.096 314.992 213.277 314.804 212.473 cv
310.45 215.175 305.917 217.822 300.313 220.122 cv
301.626 231.764 308.981 242.75 320.964 244.389 cv
321.869 244.513 322.875 244.559 323.957 244.534 cv
330.024 244.385 338.297 241.958 342.171 238.267 cv
342.171 238.267 341.309 228.925 340.922 226.458 cv
335.72 230.694 330.34 233.963 324.754 234.1 cv
324.332 234.109 323.911 234.102 323.487 234.076 cv
318.143 233.746 315.928 229.183 316.529 222.744 cv
324.945 219.469 333.718 217.084 342.326 214.359 cv
341.116 209.315 339.329 204.563 336.777 200.719 cv
332.803 202.192 329.367 203.838 326.203 205.572 cv
326.616 206.214 326.977 206.926 327.267 207.701 cv
cp
f
263.828 227.076 mo
278.133 241.808 li
282.616 225.154 li
280.524 225.533 278.318 225.875 275.968 226.168 cv
271.511 226.73 267.499 227.009 263.828 227.076 cv
cp
f
250.407 226.263 mo
249.141 237.606 li
244.314 237.036 240.634 234.104 238.106 228.788 cv
238.351 227.134 238.681 225.447 239.036 223.739 cv
234.649 222.475 230.546 221.034 226.201 219.746 cv
226.41 220.35 226.567 220.985 226.66 221.646 cv
227.146 225.126 226.164 228.388 223.525 230.163 cv
222.069 231.138 220.508 231.618 219.001 231.655 cv
215.591 231.738 212.448 229.558 211.392 225.754 cv
210.42 222.259 211.484 218.989 213.741 216.918 cv
210.01 216.375 205.908 216.063 201.243 216.106 cv
197.859 222.55 198.014 229.129 201.739 235.846 cv
205.89 241.901 211.186 245.284 217.62 245.997 cv
218.353 246.043 219.066 246.059 219.762 246.042 cv
224.739 245.921 228.895 244.165 232.226 240.771 cv
236.872 245.772 242.177 248.2 248.134 248.054 cv
249.08 248.033 250.048 247.943 251.031 247.792 cv
251.544 245.872 252.107 243.962 252.753 242.083 cv
260.517 241.896 li
262.958 227.088 li
258.271 227.129 254.151 226.813 250.407 226.263 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.0.2
%%For: (Daniel) ()
%%Title: (Logo.eps)
%%CreationDate: 5/22/2017 5:28 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6HZL,rOtZ[H,4loFO!?dMXtX/Mmd\;V^sh="nfo^3Y4(&s:d?9OED;QV'KI63e)/BNXB0UuCf6K'd*3=pT[9X?7ohg'Q1`*4
%oCK#hj--f.oCIJ1APu6oa]_HH0pCneP:sZFlcG4B&)B=c[+;73g[s!O`_;t(;dkWk'#1b85Iu0M4hLXNir!KeiPX[Qo_d^d?RC]g
%2J84l2fIW<c/eoZSt;PR3glUXNdcQJbe>ebf-dKNp%cS=c/ll=.k4LOl-"SV!8iA8n26KCQf#H.U)2S-95#*j9l9k!lZrJ#Carau
%rmq[M%j/5Vn\m09ZiC"<hE(PRqPmn=het,*QRCs/:t]2&!j438_oZrrH?44Tl(9t-GJVJG5>AA>s(Cp$HS"tXhm2_o6!)$lIjaM`
%&?]XIs/"J]YOJriW/:5oq;I)T5"#/cC^%]d+%uTbkWAi<^8+6X#l_2Zp\o8U\Y[E3dS4/YKGO&)IhQ^S3M7=`=_OYZDJE`/-:Yf,
%f$GAM1JRH6T-rB#s"aE9G&t=0i45@`>eW2n*TdbYA-)nQ`BR\"DD2!<G&dnAAuVm%e*uc#nb*YXRD-C!h9a)PIAHo=Nh83GDmkut
%S*-\N3"(5(e5c;1];p/%2ns3ljodp0qtJjOT?dIh)Z$Nnd%a4^O;^%idahiu1qXGq2LhDqX8p!V.X!d/56).AIrY&AjQnNRXc=@Y
%?@I<BEh$fAiCqXKe:D>)rANW$gBkR-]\K*4L(!ftnSLbWeb%T<nA203j2LgU*<$KDG.rYW!9p,I^Yqu;)u9uC\9cIaTn8WgS\l7=
%cEQ<+:VQFmeLuD3]n-d0^,WlRs396_o;>BuS/n6:g.m+.fGq_uPODlWch7Y.s3'jh7rNn7SfGF,gRc5crqsacalR]W3I1Y&)sW&n
%?>M"g;trDeKtjh]mu["Ul3'S=.e'9arJ,FioQ5HRm/L==fNeFTmelkF'L#fnrH!=3rdHr^S/kE)F*$l#a<Q-nh4/=7-M0TK6=0-A
%S$U<*`TEN1PCH?aD,+d^StGoo^:8`&*V9IWV"ZR5oHh)HI+i^%A028,eE6<RnCm9_nV:6Dm-MtGcJ[7+S'Hge8,W<QWdjQn]3"0n
%-Qh3ab4CekH=0BS=O4]Go1cs/qXA\!e+rfRXSLVO%rfG`PHteSdoNN#C\[AceUul+I1Ma<S/rcj,8Qctduu^,S+ghsNr#@<2u`aJ
%agUqP42*q8\rLI(qO[QCrV#uLc"ZV[]3j<fLZ,JP4ui^r3?b7;++i#e@t1i`YeBu5&m-G63aD1DKm!*C<5!P`r''<,c^nFgks<&.
%cgk;S^=XEtJ1UL(nFc2Ef`fss+")!P5jiII)*N[%bM6WWr:J*\4ag4&SMRG"oZC-uEVR[5WfcqRWC6,<Xdh;$?>*E.L0bbR<1k;r
%aVQVnTKW5MdjGO8E/S<_>Kdo,V-9=a?-\c*Ek,AqQ!.n3go?*E^7*HW==rK8Y:I-D>/Oq&Q7i%2oEkFQCBp3fs3mm#/t;fXpbVqV
%djr+4<3N$'B^T'>P6<uYIk,p?C(8dPI[B]=KQc<3VdJ?0L9I%li8Cn[R2)Z-n3?V?d3[`aE)irR\Y]`boKS8qS:5*m20@Aj3>a3X
%$sl`%/2^[i/kMD&X'/P^2-mqIbD#tadkuc?a/aqT^rt/;(4$!;#lcEb,[:DRC;,F<2.-3`cKFd:>n('3gqdRb0`(f&bpqS,hr;E?
%?)gKch[2t%I($sp:tH+jS^[THWc9*[YG'NZ%[8h0Es9=)0&]mV`G?!eWn@`/B+&AYrm'I%frUUloY6k5qUIA0^M5+Z\&.$7p%/P!
%jU-J"o\22[rS#9<YG,CW<;9\$iHGHX5,[:mIU-gLf@7Bt[=Va.Fni]QP$>e&04@*]DWVl#>ReI!iNgj+3ou$qLa6%UfLu"1=a6aE
%XgJXf[?Xe/De5V3+NKaM^]Z=7bg`LEc<0j!7N6%U.-_PG[O[aA3DA+"f=K@)>E(j>$XN!(#RlQ!Tk:<*YR$Lm:qb:L.A;E",OkfF
%biK6c=Mkam/WJ8!.4JgSKri.m2NC8J_I#f_D56pDZ'$qMU(R'e02JTh^1K'69jPZ83>soN=rKWea02XZoPj/9o]@iR3.?+YjU4*S
%j+elC`t0':dN[YpBE[Y!:M:/FOKar$'e<Z;iA.q4E#aFb?n<7L%D^Au1n':k1Q3]A.$!Osc[].U0WpGU'lJ\E<B)rp[d,oaEu<f&
%C9V^I@"UE6&QTX*YodO^8heOdT>3]XLZ:qc%uddop&]&\(7Ut*KZdi"E2)8''sSi_dW;p1'b)!b0THl+#HE;in5#EOi^q4FOS^Sc
%f@7T;OIIB]=MeNcJ2\<I\[\5NV8A+coggSE(t5!V)m$5T9e1"qX,5C=XITO=ILQsdBoT3%D9R92(g%H'k&O4<BP7PTSh6H[i$pEN
%$7J*bqM]"hl!,Etdk'Ds1dFZn7UIUd,JWlG%ccr4\rj-1bX!(cA<RB%9S#YQRR1Koe^CDV:IX<XY*O/]i:>n=C]popcNDCBUPjp;
%abVQ<Q_[9]XrHP:pfquT<N,8I40DjRSYcamQ^YSDENOChbMEWIDuooAFKYG"CUW8<ndB2+n*1p[gMto\$YhL[0"p:C4"a;2TM:)@
%n`h(](4Cj=Kb;2l>Ce8U[g8Ek"gj.l_?0BScY/-'k<RQggFK(?ioBg/LpJ%&#Ik[ei^LrakJWpW^nkG`5]`'(,ci3N@tl7`6hpc7
%%+Z:G#"qj#f$Iu5/<]e&f"d2O?!:@$2+aP\ER=rk>3)]!)EL0i9*$if+-^CqaYmNL^mc.9d&]JU_[-n<A0d#1M5shn">t-*&F.%c
%(*l7K-r47a"a15T0X>I]1)Hc?MQ7W:is!P:OSs&+Uk")OZ5]9JC.n-1-5eZcH*mY*KrX=)#YG(E_ZA,[+]sn]W&)Xo!<Sk%+Q[Fi
%XGJV7%P$s8NLbZu3m^H5i0*kf\dGHYX#R//5"1u75Eeg3`DrEo'ka_IR@At7UH.p%#'1@=bKn`pcBRt-`&$K;a3W$lcA[didY&J=
%%d[gr`4<*l*p-l@GQq+erAos$Nk6BS5N4*g_g'Me=KgaEqb_NVKGSWE73#AnW_F>XVb]PnXasU\O@or%c@BB^?m6Q:,Nk_&/j\)o
%"-X<^l3an&6afM0f#Ih;h.j3LjX!0=<ZqE=X1"[[e1e-`d_imN=g!=X$+<P:aA17P)pn<AA=7sB5dQn^32iFm9m5cGWU,f<&p,GN
%\)tl'("ghYoQNS>n!pcA)<naBBtj8!'W2g#&>DA<J5Q?c$`R$c#/#]6)^n@FfF&O/XJ@#mm9%OfFD7ItPidRb.r'8Ydd@mHg!*'o
%X%=hM1qT254'?6?W7rn+[qeODF0#Ig]hT>hh'2-,T[NoX5g;OtNK,jU;P/#u/gjM_"!\<KKgf*V`,&M&/SJ_k_/B#l`KGJF+h<GF
%;:6sJ(0<'S4;S2r%]3l)dKUN$,PbeNG+^Cj//(.<=2;mqOSa6cq1hmYjEUFso>tb^X`sP(aDR70iLPjIXn[B7'Hf)o;LB7%"]$9g
%^<Xnqr#7iKfjD^E^S^o!RXH2f)mH04`MA:)9N5FU"Pp#5G`drIT]\`*G7[KQd&msUG7dOlI]a8XG7dQB!aHt?mNS*M/RK`mXqsf@
%=V-3uG0fO4F/U3"]Vt>:,D[#=J&q`OJu)1:)5nL-c]"IRJ%XfRak)D&FR#s&rp?g`dKRbgUI\3r&sdcFEnFM-S;r889`igO?7PJT
%f[7(%MnNWW'ua4(G>Q,]@#("k?>7,E$Y1'?j3.<5)SWjWb]ed`j*bN9,C/A&RC6^3`:JE!QZp-*<k:&6!MMoVG[4Xfm%/HYl`[3^
%f(.Nfh/MWP"Z;Slk1\#8E.NCk)Vm8PII5SW>u5$W2nS%;QWICNlDU[f?BB5\lhLR#"Q092-`C?m+`IY3)a&?.RL>][&>&s!BBa\1
%b@L*)__BtebW?_@[cXr=]]jsuR[%,5+Fk\][8!tN@9BZ'.\8RJ)E'*XX:G)<8-VPMT)_CFEYV_*U.IMmQ.F0iqh[c/Ib3dPIh;34
%;tJYfaA.KJS61mE_E0p5<T998G0rj$2W60iG'Xl[.&;<dQGf'k"07SP2AbTL2`[Ck$D=/'+B_^c</?Q$OXhHoTb7:4b>QUDq.0qc
%]0gQW.t/Mq[FO4:m`YR'Q;!:tR#$fX=L.N4=`Y>2DG-!d1h<:_ZH<ka@hi-U9=DUJm0.YL=CjNq>\n7/fSf1b/Ai6hLjnq!>?5lY
%<@++A"Cl.EjVCj.:UR=(_NlD7CW$-Qo_)thLPt@*pV(V8M7(_Ili#bBk`'H#+7&m_.f-n]!nrH=UWaZmU*mBYn$cY%%4sA/,cQUt
%Ef[Yg6=%&ED'@U[fKm'n@W!X[jtEoCJ/X\AhbsBs?We'q.PKU;S7'Aba5T@D$LtW;.jd2f26)M<\[iNJZ`K+2`Ji>(W):Q:SVZ^`
%2+R%7'Y3g:Lu8$#'ZFj^qFK%q4VtQg[j\p)RBIh/;hUQP$hYI(J6k+-:aiJJ6`s?qnn<!TTZ4:uH8V^tL:&X9"An-$MVRl>i%F+G
%]t6QBD(Dd&hC-Fa8&M[*9S4(L"2PDe%=h@HB9aS&Y#P/MMS?"f[YeFlpUO`T<nj-Shu5"'o21c+Q2%;n;k1O5YFNA#7actP*1pRl
%L;:jtI2mb(j8'bUp[N^S#_7F/0T6PC)Bk>2U6[^3^uT5fs.?M"J^1K+a`@Z6O"^\mDJ;gnn=3,a?Wt74+J2LFOdf3Ac=WY"i1PdR
%++;)D\%a2s[jJ:B)WBPFO$%_X-9)k$,hE3fi*&L]^u(9tc\UV6im"'APQn(0q`$FTM&F@3;=-j!S<$ulNb6lW-D"@:Nle&_4S:+j
%;!iGm.<_M1UBL2YF&]^sS)f`3DBEk:3!'U87e-8=O3_mK??,>ga73r*ld%T:O&C/_&HIao:lGl,U]@@JNg+6r\1cKZa5<0&)M%$T
%"2@cn6h$HG#OBIJHC@]A2#NE8#n?Aare5PHi5SDl>7t<%b(A5ss2'(,hmDm&n"=?@Q-(UpN]iL\@`qF5[6tf@aB$E?VWC?G_sukE
%8e`\Pc5\hP:I?it7'WG`:Y;B$aIs8P3l.do;5>1M2!ik7=]B)!UI%XW_OGW]la9/\-lI1Y%a,09lm!C;B\impD]T<LU,&At0_B`\
%.%gi\G5ZY1D].@q_#`V&5_^]4[:2IDVEABk_=A?%'DM8,'bM%d5Y?Q%pPI.mG4[Ka)KUD&,mU'#1f?j4opd"NjOo8+QgE8$aB%iV
%5O\SE%_rrP(^&kJi]\>bN:&p)(nd)Nrq"E"G5\]+:UAMg(3p?-pdbW\!AsO-k@i*"4O5Tm(bij@^5#5mRd2K`)&e=)LA>!qDkK,\
%S,gh#26D-kl[4^>19P?+MIEVFZs%Gi.Zek19:H$m76-*#bJL'M>[!:)6Kqu\rC6=[Li,<F.uRO[/uUML>kcqeQ0sW@qtZ6XL&BX>
%-#[s37J%U89^d-nm^k4Q7A.!T7Bt5=CR<pqf3jMMB"*85Tcl207-9S:7a#Waj(jsUC*B0L72sNVEP[[9H1csf)0"LN5?gR7/k8B6
%[d/NV-]6!uU)Q)pm\\[_P8UZB8]obW]LC]2$b.UUj.b2k$[*UpI_^MeoiFQ1fEMab@'BaH-&C2%c.FEVX[-k9K'[->0Na#8+XIMT
%e1tF-U4qe<1g7gh_5sdV\MK<!SR=)TMc"dG$X8V6C6:N#=/9]X$)Lc<1=LJR$gg9d#+(:\C`$r%aK@mWXs,^aOt8N@_dLF(2D\m'
%8]FAKUuWOZ!^J-H5(U=m"Fs6nI0+We#_7rflP$e?7f`26?D#%+*eD2Fq#p1t78VM<9dApIfNQeQd;hRH.JdIMNPlU,s)nDVL2.Kg
%!,OGDFGqE;$3=FcWC#,:eI:dT:(sWN%Ds/CJOF&MEV)nLc7i)uMImDiK#`\WSC\0kba7s\SBi8G(a+l!O^W7Q#^o+1"9t(kOP]O9
%9ANrt"@IJpUs>9S$&MoKVgr0;^]<Y/l/rG(<@n&RNZh1"ScCT&BHVh_5^=CXl.?TtnK9/L1.[rId6[pN:"D3#Y%_#hJtG[k:NNiV
%NDP:V#lKBLOl/1ZB%!*h=[sT*1+lW_FsNf-.G2uX;'-g/kF!ipN7tecQukFHFl.Q/7f2W>*?o(-W5n]GUJ>*-aRp%'_Kf!>-to-:
%nHqO-IjH4cS\^C.Z,3`^ec[[4OXMdbWJTPBcP"h</m^6AQinkB7SCr[!K8`_<"UYr<ZnK]-*>$!)&N9r6,lBEU#B?X9V)20(igWk
%@/OdGg24nbf!KTXR4nQCAof;L^Eokk_Sa/DSqU![>i,Zp?B[+NN9bj_#1>Vc@HP5bBA&_tUeY]/pU'Xf7MT@m&kt'=Xg*C`;7+T#
%b3(V.3&D]UXN@7?`>sq#>3i-22[h=BBoSmf:[iC,iOHVL'UTI<\+'`TQD55I'QX'.Lg?+S@n,e1&f=c8!ste`P/i/>aUPeT$pg'l
%>-YI)?qjBkr2FE-J0B]E@&WXJ^rgd6\$R$'g]Ol2A:o\l"V(BU5u^ht4fJ_W?a-<]19=h:TRY6`IcE`l1fp7^f,hF4j">>QBoM5n
%;([d.N,X1UAT"6P%)OcT1'\:\nGF[]GIu+Pj#d=.CNc?EJs@Q[j[R%+"uj7$i*sQXONMeY^r:s9JMh^+^r:s9+U?L[!#H;,"R,Sd
%J;X`Bq"2[)i*lmFmPE4m295PfYKR"$BkXb]+hp]jg#=3`#\nI/eZGl$Y$#bh>Lt')'QdLof;`s.*r2-#??VBY5a>&.Wjm.jRFYr-
%bGC,]j19@j`AR6g"tO$!fa3D:MQRp47l600(o9ZSNiuo1iN(`]'qNPq[P>/.]:/niI$qMR"/Ho<H@V9-TX&b`ee)4P,JA(/*Jl:E
%P,\dE%o@>l:;u-l7'6MF#b_k>3aW"+,:P1[bpXf_,QQ1Ca[kl<$o%<6`RpIbI9r%.jB[hgq5>Md4i#Ku]A#Ck4ZK"gOi1hP,mjF&
%N49P^3/2McO$3mF'66jVK/]FDFVpWL<T0fQ)*VGpZcV52D/pK@(6%/_RUo6eH/oo]=&(=6GL$t-=ZW&rC(b[E@MuUTqESs)nZLkp
%b#pRdK399)qdA-1E=\Am,&WLDft;5BpqaU])u.Of?SF/Q%/d#!GT1+!aM6'2%sj#+D,\9Pc]!1e0F!_)=Gu%+#@frPL)d<p7@X\8
%0l;2>OfmUoWeU-L7jG$j4%Pfo$H,A%F0d-+i9(bd\0h0JTp^+XI^)9kL+,T383R#`7AR)UWUODH7/3B/X]6)I-4(n1TW`ie*7KpD
%Gr9_oQ8`',lRo+j\*8'CZQ$%YdKM*oY?P(Vj5p+iW%kulm45?:HUK`d4<eS!hGDHF4b,'<,H;XS<o@67BWbcSndSV&(JPjM69re9
%3%`$AVG1+HQFP0Hm!R:8C6e:OD60PU2Ht=5>7hq)D\-A`>;5>>7gue8jE(Gk/3AB<!/L&O#bW'T5L3FF?SL3%^^k;HbrTYn_fftG
%oG^QV//u2VP8p4eaZS<93K%)fo8SitJPu3qXc1''.Hm"#IY/2W+4"k]Z9;Ks,!<ZiFCC#;e/W.I:7e'n*KuOtQi.Y4fSB6crRFC"
%#O@:a0:;!7I3nb@\%mS)(9F`JLP61JZNt1e-k#O6MCgS$5qLEMfKsh;)+fY+mf3#8+$4q7r!j"XU`K;+."6f+f*&`ecpTJ%;l/(h
%em>8):3[eslPl./YEj.2[/g)X1m8+=1tE(O_=05F0qULcI_[fV?FB@hQ$Cu)Xh833HC)9=f1j[Tb'Bq*QNhE2*YG)MSVuE)iTg?Z
%E:09I\@[B2:S6DOLq>b4`[O,i%E.'CFQ8T-42PlDA/LcHMK%'*K2??lIQ/nfVh?K4_CW$H0HNXIZ>He6!Mb5KTBd=nmtT@k?sU0!
%Wcg;"k2GtM@/"%KhOa#qWkC^KEF]'F>ph[p"kmn%]`mklEt#H[P,C`(7mjJ;pO_i&JOWpc&`J$2[emGr^@(ZO"HQ+9%>!Ybr#p/.
%J&j3)+p8'_@Pf7cT&8uK$/Ud%#mjq"#fm'1d;RGDJ1QrR)#m!0($>TZN3cFrKVtNs6fs$mMOd'-a:,!IBS,G8diKC&*e`o(#pQ-1
%-PXuMb4,XemU4sn?U<[Q-/U.s8DjD"&L2Pjb4^#On(&suAUQYH>5P\48Ds/\]/"hZ9gk(Xm/LsMLKK);l57bZ0nST;?dW6;,Ibfn
%?j/MYo#:A0BbB<t.*mc50mOrn+A:DpBIF>u3Y_*/+/,5=%gl/-.KLeD%akp@Ce"=2<N1k,Y/p'n-u/l32T-34Eo;umX&]?co?]lq
%E*)ZQc6MCm_3(r:nm%'5b6WV-CW6>-#`/.[`"6tp%Lt"&Sjhh.EW,[i2*r3kA1mpr6gQHkBiY'=^U+S:6k=DU<A[jcd?8$snOV*2
%Rg989^P`fLKGo8\Es_EZHR_<ZE>15q-XD[iGlQiV_38_?cZ!o[PYP^`CY7t;@3),7mVW"nmK1`-K,SO^[nL*u:6i,rB)clmT?908
%">7!.cdk8#dA?mr<lB?Ij!(Cl'>:K(RsKU,*Vnfc@F9f1d;7u"0?igR70Ge)ZBpc/Z\fMnYg[5+d`bO"ZHe";ec]eo0XO]=lnnoA
%Xsk]TdX(;S`jD0C!?E3612+cP'?#E^oLK6[JRN8`c6tF),!b[>/4?aap0OFmA7OLI[#,Jqh(,ji&Hqh6Xhl+IpC"*tpsD??<T`V9
%0bc:Ug+b!W>\3i5Li#G;VA9%Z,@g,5dNqfR9Nj4\0Z<&+n[^KE[j\D&,VY,h6B/<P'X8ZgFN%8"-d1-g"g"B:'\b/`T@YIN.RWZm
%pBPqI2rRe5Juo0#bgPbOKR/[K/r$;_?sX[m(."`HMI$JYfdnI"oP+#(`1cEDUNRg.!]"=7&rk6d4]o'"M<8ekZPu_S$pW8J3F>8f
%C($(l/#MH>ICO.r**!Ro&i)%3gpcqN1n``O"K+/?p&gijH4H0D`KYhP8;$L>=!bH;89UYr5Tt[s_S!'94il#41i]$;RsX"ofaosZ
%*Cm.]S\mQ.MB"7,)+N*C`\lif$moQ,4M'U%NXO_.3+pjB2`AQ\B)TC2d5tMP\'g?GcAR<cN/G-acoZ*^0#q*O8f`J6U.G[rWed?0
%T>PUh9i2jN-3YWYZ/$:b&1IZ0)_FbM%J5lMKTa7k$8k>gIb-hP!cLZiF33E?d4[Q\@#F_"\cXhinn23r?DV!tJlVE?^9jW--e:h<
%&ba$Aco&EVQSB>g,aY<&U<sP-WZcS_/bZUCN`Jp)On-YLrN#%OeN2!Eom('mB[>iL<M[V;"T0I4k+!*LJ[%M^#0'YaW7-FtT9R'`
%'XT17h6WomN`MR`%C!?qE6%Y;n]Yc\2[S<3Z@:fu>Xuk>aS+j!=u$1n2$@qUP\!`JGdZL8Sj&(1&#MD5%(+cK(\2ULBVl]:'hrEU
%Y+n*0kCRd:C<jr3i!d+6-lAq-hD@%oL;n\a)/N$k`n=1;>"Jq6JrBmj1-Bpna3,)pYbJC:#RUjt5qI3$,@N:`.?206R%pM%VBUV9
%RfM:+0aN<:[#`s<!+K$TbQ3aMCmU=.Ft%!j&/iV7UGF5Fr;i-@ceU>&^Yk2&>r(e0M!H5qU5f8h&Fp2p^Eok%.19SjrL$sgh25/Y
%+Uf1hJJ8He4oJq%`"3P4PFB^)(hMr(YZH@!j\VY"YY[Ph-j'n*^5N2V&ok!Q#'T86%IJfX_&W)6LZ3-7d%Oe8:^J4q3=%7D?3jDu
%Yl[6Kk%_PW6EJUdap(o`A@q2\\jZPTK%Ucl6H98.l4Id3UKQ](][)eD3G7imP;S`C[VS8V!t+3X1FHO@VGkRam#@mtA;WipO*R05
%W4@2bC@*BAk%PTa?t]5H0N!$3WO\GNDlCN+)$+G&gW"!N\/7rk!sl8j<fNjHlU.SEo01KLG@)bTJ<:tE=$OFnNn@Y\Y8ui`?.e!f
%FZlhcAsCCpb^q_l#.3Aa)!RM[&]PCgrHb"+::pn.5@Uds,#=Mahp!rfbnCj<AB'M[YRl/PkLWA*OFR]FaH/NFhC@MP\g]Fc&rNJ&
%F[QY^@`"(c)ip1ooH6VDd1QS?(Fr(UG`a2VmF=#`FaHF6`<Zb^6H@BH#k:mQ'0.=6A_:[5,8DbL%nt#F3VSC6`GN2RN9(P1jeBP<
%1_D1KA0t7_VD\LOT@W5:+Jd/uc#%dMf56l2gA!"f(0J]#NuH@gq:b5;h@-g.N2B4Wg@BY6,''TE]+7RpA!nG)dVV'f@Hm0"l/".A
%(4jMDjj:[F,&m/FY&PQt=f/Fpog"(tS]IJk^s]dMOkbKqU`b-qoB1](H*?UQ@udPJ'UTa2LDb_ibHjd:dpV0\0JRKFar87pU1-UX
%"9j;fL[f:qZ;.'CTHg^;`^9iS[*3(iMZco:QZaB<aZKh/JpiIW#$AnlNn8mR\h2R4Zj^9<Qmbt>+%ikHb-D"kOm0LA8b7l_m-r6^
%235U^cJh#u;$oS*Q>\@$f).$2+lmR2B=YtY48^Z)dOb:g]SFi0<3B)Be\+;l[u<aT/!j2+a!kP=ZF'>!J'm:6Vi];rI8*B.I>.^Q
%hDaQp<;_62q6hPq[hSYD9#$^#mZW$3a_rN#Y:T:<OUl8"J`e=tMe`$_'?@gJ9Du]@#o[$<%ic*b#A=V6cHG5]+1_^[&X:ko$Z?OU
%OT]$tAFHDbU@^dA+?D-4m3Po:K!I+bbW0fS!A58(dH<e<Qj22nH,^g\h,S%pQ7"'`'p%tJ^_HujS[.<eMK45\,Sb7[6^4*r8W_">
%JNLr-fU]@gA-o563blL#68V%6"3AK_7U@g<dg0HL,/YY;UbPj`lu-hWC&BgLR$j)eN673U0RA?P=r7cAq5KgM=iPF[W?q5d&BJrg
%]LDs`E==;h3Ft$5TPDXJP\653<Cn]4'BM*Y3`b'a140S[,!-#YjiS)hU+bCoPKSh#Qk:Gu6GAN[F-(ELBZg%2]V-JW)$5qhr$X#K
%7gMY?OCZhonDC_:Ii`HCg<rRo_@WH+0ne!"o\j8`1(.1O$l8MkM`Lk``pUcq&Zj+h1?oAgonJI;JYNc7U6'+skbpFbZm0t*.tH+k
%67RRX+Z,RS:h,NJ#L5&e*N;")eP/AIP>Kqcl^EL,-D@;nS2`=4PqWlLVI1oGXSBc`-XXO!ms=.=5/+.rRac3^Z:s(Y1UARAK`\+f
%mXRO%Bu30h;d2m;%'1+udhr'r4V^F&@s3WGqr^RR6WVXk<<XC@o[<R4W@NtI/i<'[d'3dWF=qq>a4,-br\md?.XfqJo=+1H17G2m
%ZG'D_i%"2pKhXG,)f>&MKqV+R+b!&i>N=P\K4q,Z7?Wgg*e3Z($T2(3U&D(fMSrKF.\"TXW6C<,<Pt?e[t3EpFDk/^kW)L0Ue"n^
%'$I/[^bgIEOdo&&ne&Khb!(9UjOA_l\>QUkb3k2-e5UtXHET0F<Sgdboi-JlI'5-_.X_[V1tLZQ*SdY'ZQKhZ6IbKk<Mlp=?7\d%
%CgmjHT&bRu0suBkh1P2"<T9V6Sh'\odBQVLg-0\%\<d#b,7/LD/r+T#U:NRTg911aBYKmd;LGYnmq]l8Tdq]7mN'U9hJm0%O67TC
%'7@DP`RDEi[hAcWLL[oZfe'O9.Z<M^d'Vu=B(J#O(K;/STPudOm\$r7SDbn"g%4uj-GqkeTbj6=eUni.OP7[`diu`$^ar4M#0Zm/
%K3Mg<!Aq1B$tt$qFrSo5SoVScI\^J#YAm+dCH,aE312'SPpOG=!_B[=D/)S2qI3/f[#)S2i<5H%k*2T8iA@I0LcpIUdis]:/a"X)
%Ts(2;ZHT^+U:[]nfdW_?:Zjh0.8P2r:3m7KqgEo'<:<hsJ@q(9's=)/[h$^mR/JL-5FfM)&_]TCh)Xp<:&/Oire-Le)ilq[6d3b/
%k[Y_X-S'qAXMH_%l)b%Q6SdFbZcR,7]&jYCHY;.YlmX+PP2?usG\;l1_b`M3,f,&[I]RhMMm_Q8=D=+YV?FthDi#dXR$+R9I6t3M
%R%<Bj\S8qWRe'Yp/)'q6o%^>b!A)n9.*7_JDugV.eQ?ua2=)N'GRp.u'nT87"hUs_:EAo,>=T74b[1+g*s3QhMrCu@ir(.]kjWOK
%^"7)p'k1:^+&9(IYL^niJrZ[@kjSl$qjqc9;\dd"?GDsQ#/?`nM;bX]!3?T[j[$*f#4$o%^oC/G0O=%>>fADI]X*6rDuV)\-3dd7
%095hoffbb"-VaZ*T)Fk%cKNpXFNA+I6Q+;e&&XqSaE(&B?(fLWr]DCO)<g>@S-ao;h46$55k(AM.QTfG&XVpJklI=r&F':m5)WP9
%-6h$Y7?*(FkTYaE^\WEOmOK?CZATL1e<kF4Ff@*M@d+G`-LS&Fe<gJOqrfbgAJ:;b"1**8?kYnS?&D<9O*2hmDUB_\S;-Cp/J"CH
%]6ZP\8UM_W9r?.nZrp;)k/.9.$I*`aZmdi0d69$+3ou!1'<S^B<M[:p/W.fP2PXLap*BM%ddaE*VE7l<jSU[:YiudBab^X/eUZ&J
%Rjebuc&Ln%mgI]-W6;Ij72[@]j6.FiBLjg;d*PT\2$V`@R-(mTjt/IU(IrCnh-BmW&*NScmDYR>fpg+P=-LC9c7ZT)@:/a`1djcl
%Hg5-AHZuZ98n0g_)I.pK:t)<ON!6m-j?]PB&raKC^G<1p1qB"BYHk6LP>L'\e2@Vu9gW-L:t:57lC!k5WK']ZO0-R[CW"B0[Hh.g
%F_e;^qq9Zbh=c*aL5RA[WO\o@el!dQJ+#P!UBO2K)LW*p<:Q2;&Tb_+clD<G.4<>uo_g-!U7GAl$shA8*GQaQiXUg,<%OgLb;Z$A
%fl'a#Q5el=Vg6[h?*3-VYK'r3aQr.*G1@I*5EE1\Z.EF]Dr4\S[YV=I^^Ys&qk2>E`k!4igSuo0<h(:t-13R:9OpccBO\!VOR=i>
%[k9$bUj_k_UX*E78&*4ilnhhAUlT'IM3ncD:s;YQ`'?BO5L9Ofgmt`m7e+*^Unta(JBYg]>MmSf%QUB3>/YMdU!3t*Rc^ePH<bj*
%U@WEJcf_G!Ua3PNNYT58,N@0&AtNZmcK!eBs6W"JSH+UtZR'ad];O&BLg^5JK#Y8\W06hTNsZap[L`pr$qEIX*2$a#><LW%O*.O6
%51!c^Rm4=k=AmfB[L54LL!TFCk9>;6]eq6[:'mNXLX3BDF-3l<ZgRQ-'prPfl-JU]Z7G%IR<nEVp1@/qH)?b!WoKphF(;^j][CEZ
%[#'(a3fZ!;ak>'9VjKrJ-7?C)"\R#H#Y`e0`NIU"N=OTq"=X0o[sD+,ImbS&o6%obEq'K:23N@#Q1[=hkO5>DSp.1n=JP@CTU%-d
%+NhaV`UNs?),cYb!B3mMJ;H<]'e/QEMDL?LW)(J2\9^>B?.kpTLf3R4TO%#39mH\@`s:?fr$Us6Ni-4(PHH\PCcWn!a8ZD:s/O]R
%&9\)mSH)OJ2!iu@^$d*PadP!?TnbDa+7Xf(8anU,oIrJ'd;kiE^5O9C`?4Z1j9U2L&bU563Nkm9',tNuQe;Fdnc_FB%;jN#eo73:
%TURg3bT"pN*"W/)pQiLP2Sf/?@/#nt/I)SZA#"*$?+G#4G@m_EdY4+dd[0K[Gn+<uB+TejAXC^/qf!UM@o"QPJ1.%$f-7hmfu<2V
%j//;bjgd0l,:B=GQ$dP!3kdd_\Mo*g/W+CB33i#p"[i"u'M8k-aPH>/+Jjr/Lr^//agfB@&^t`HZ9b3f'#E)Y?IEh3idu?M45,gW
%LOUl>8/UE>rnrhP*QumXTc]0d:=%tWBftTh6-!4Q@a4@&>gX]Dc6qqTSVD4>26JAGpX1GHc5/"WELr^IVh7):CjnoqT%e7Q>mi^[
%,[Bs-b3:X)[HBc2P&7e'`nYd,Y61%qGs7WYf1L3/@E;`/)iiR5(Tq=mj\`"&9VMLTIUD[%N[!`FPtRgA4!$i=^FRn@@d\CR8cPY8
%TTE@u7FL2r"N<_1"erc+16saAEkQb["(&e+:@.K(h<q>[9kXup1TEL$!cb(3CHCD"/B--'>?4EPEC'-AgOD:If8'd4(c<0L?2g_k
%XTTq@i2_kFH.t!$Zs'8oI_?$0>6'3K:P=5L3-V%ub"bN^gZ@&3DW*<#542<6ho?hpJ$&SE&*8*:;oI?ZRr,TjT\R>TDr2)[#ZT<n
%1'W="iA)e9*Ob>O%"b3E3K%"ZBPrXeL+$rMAY\W^MQ%Z\9Sbga_^[F$FtRqWF0Xp*-C5;di>IIt0r$h5V;tlrB4I9j\HMV((]/,*
%%suqBSMIHchAb:r^>5-.4l7QF>Eou6!K)(lCYI!2e&EWf<e6_igo>(^&7hRDQ_=p*EJmD;lu>Yfd)>Nq@PSOgM-V<:G@"A&Rm_qo
%#?IfTBIH)#]:H\o:EgGB:Gu>gO`Z1LTW0c48D"96-nFZ&?"Xk;dhmoeTX#o%,o01BgJSdmS/qG)ZY]Z1Zi/XWSE?ut+LKiaFaJ=f
%-].s`POGoW/UTrRMN_<4U5;,Io,FW:(6MN][IBE2Bn,snN+I0[]'Q,FJ?!AIpB=_#RKuJr&m(KdoT3YU9t>Y,dmTpfh/op7N\5#:
%LLV>Y:e+2=;c$#XOW2T"+CccTFdOO&B=H11RV:(;.1u0mSMF]0,L1/D-G)H=dL/@gP$LS/pZ43=XWuQKWCkC4a@.)3p9`<AfH!*?
%=sY$L2Wn1J.@4RMi_DeRV2PK7f_.<oVH9#4eg()toL>ngA#*db?-PpSF`r!kD6bCmeo)k9aY]ii144VaD/HbW,M[VUE1bMn<\GI-
%abIgY#24;O0gnDB_WQU7Zg]Bh1M1XH/BQ.r(l_f,N>lo15(.JKXn((jn&Gk2]<\'cDT`i/f^oKmAm(!HJ$,&-.E=oH(hmHTM30-f
%V29!3DR,.t0YZ/nc#e`%mPI7.$tbBb]HfsQXCu?;q[R!6*.L-<)o3O"=\S!2hu7;Qh<ZiKTfeCtN$eF8ZB$@0BX3[Gqe39r-MqJ^
%O!ab&MN?oQ8/!4BN&:'$-MtR,60!u#@]1]%i/H#R34"'?nQ_=PVU#/c1B#ETEDpL_'4$8uVi@6qgZW1<D`S`!iRfS`G^F5(mb(!p
%Ds[s(Src1LmqBpF7N&hDd=q0Ob0r=pF6:q!&aC/tI`q%*j^q\idjP!5J*itp813q,MEiD6n5[^-Q-Q64ZpDfZA'W;QZY:nXA\W9W
%F^&b6mH0ULja;j6?00g_iu64LbD)95Z44D$j%]+_Ci@N,)]o0p1Zb.W&^jh!3>ZBf3T#:2^'YtW<6T$u/_J!oSr2<TiFjT@Ag+qI
%]TZ\VjQ<LP:;1mh_3-V$N.X;6EXV<r&-\,^a'<p:TA[A#UpD_A=7gNk6kc-_OP=s%12_;A`:Z0P>@3lnp/e1ipMA&K#eoEna4kbr
%^_1fCD1S6jPYc8Cm\bhO8In?$nK9NL;8d<b6M%Hhn^+H`O(4c*dY>DuM)(g<=N4$o?-87NMG)%4\D/5h<62ZgBk*J4fd0"3B`_Bn
%C(dI8TGA,]Lk^$Xj7CglJZ(@ciQ'=8VcC1o/Y2HbQrZV^3p&-l8O(9n'JpZ;aF_^ji7!u/_2@kn$,;AQ^n7^eO"N7Gf+h^rkCd8d
%iCj]L6%>Uu9f&)1e-LF^X]Ji00]'ug3:b>B]<aCEbG@oN5@]/cOP+ZBm=Les8u:Y/Tqf8ANR&HYMg)h5_PS-OlW-5/q]@RX7@uNF
%oNg;4F;a"^++[qho6Gs0pCTC94qqf)ESh)Cg4-]XDB*HS<t&g?#9:;U;S>&5j0j_\YX`.<4;'/X,C(R\q'?Gp->IY5UMCj5?a&'+
%9oLn`d_nZiK4q"3rckJ/DD`//F6>52IsVF_gK%7TRbcX^Z<M2g^om+Xk'On3gU]U_%HT13H!ECEiS8g*gGR0/;pfe*:4)64[u.!+
%,3AA-Zk9Dn^m@g>.C8%,,nh[.Ht;Z@&79n17LJ]$+lp?nQh'Ke'`?^.l;H8Y\XY>A+l(Onl4,W*MA<sla!,'##jDqCn]DQL]Rkut
%-E*KBlSG>.8GOl9RXp\G@'Lq.6Bric:un8Ta"`;o#`_TC1(D*P?kJn;!L7Cp.5,D%WT&U&W-[&H'H0_D^YjKaUo9K3/1L='g;g4O
%'G2ccK^X,V0#GUJJ)QqCGDaR1AWCha1biZ%Mi)k-eR[^mF?XW#n',OqRlKQH#Uj&FTBA'kH<&"5-#c^#;_).T.u!lKhb`IV,dc'2
%RtV,^r1HMDHBRMb[EK2Z_E9?k4nt+[?PLT#qq4:T4ikELm_O[KH]T]0iCEd,F)O>9"l*L>`]^<EQiM)sV*[`;%q;CR:,u/sSS4jj
%==tCDO,KBMU.d_t9g591H-928q*[n@_5@U)#q3A6.#J\.nhZds8LQ:?>Pf,4CX-p7S`H$+ji$"kTJE1JjS(3$F"5IVMI$sg`H7DO
%9t\nD<gR+#PM7J.mfPF^:6SPPb32QcYp3Po1/F7Q\VC5t$qlt-D9<9EBbtJ>L*k0tOZ!<kLh6Ec`+trM1gs\G&nOi*o1i7O"-<3P
%0LQ$0N:LCrhR37eJm;6dg\3_oQ50i!9$""6FbWe886OD%"=Yu>=>N.GEc#tFNVgeC5$!#prJ3s8JB(o=g]=a]H?'\nl<tQdO,P&\
%C,sorBOO(8`e(TO&bB=n!5;TRp@'5<^bXAqQ4_!s%kA%N<f5,nnV5A1)-LY!Ojo[_8$,.XDhOn11PjGi"\8/oV":o]>@Z2YJJC\3
%fM_c4G)\gQ7O>j4?to-VbEPkJ)5)6E3%YZO8uGf=4[&JP"h9.*<]ts`b;jKnefLKVX#Bm^$al_(hs2'9WXj.#9)B0\<q8bB2;.5f
%+mVZ%%decUXWhT&-J/n&YR;G6)/s6qF!Z's*9G\a%Q7jm;825p%P7d%-o8WOnXWPA`u\5[W[0?2f-r$K%Ou3D-(t,G32ibpfT&pW
%YPk6&A9[cdi*f;j+2J^1F;RrgO)YZuiP;G*QdEWs3,gA9,=.CZd)W;FXrTV7I3HU.mRX:l<;q+`.lGG\+Dr]ZJ-3MVaU_!PGosG>
%nSJuCpB`j-N24r26CSn.$0o:2epes!J&*#2?uUhb8^DN$[=,,)n!E)U6-cWdETb3KF(*k70^`0_G:nh9(WN!Rj3E?ukJE$G*`;2I
%9oLn`d_t<E2K11j7-P>om5K6^6a"Z=GRqgi%dUck$ZOHNJC4[D_\RbG+S%L#K)jtb+NS#I(Tb*cqpQu]NItV5"DSh^F5-R1bH1<.
%kYc_(Qm^/#d1r;@=lH`c?rH`QLK!0RY)UPed,/&u&!rS\pT?l3Xd:Tk^1@&&?'0MF>o[?mc<g()"`HmIL39hXXR4I:^3pH>dAHM?
%!Xu+g@rHp,`*F1s:37q:IlRW^i>N$UaHgBRJ7Z%%?OHbn#Ec0!#d=R9ZN%dJb;_nT6`9iD&J"l)nal7>Q'+R>*Yfrg@0M`m(K@g.
%*#dk.rk0],,`kiB*_ea3-(OE::8<Z].kb7fZY0KV$FXh7Mh_8@7&uX+F%nK\T1B%mS?bmCrFn)OB@81lRa_m[qnkuE3WNQR_6LX+
%B8-27&qjVc4Y=W8Q'Qk9A^.Z4$.^l"eK6>l&'=B]X;ofU?rjVt(!-=U9a%j-Dh3BQcD-e=qkk(^D4[;sPP/lFX7?[io$\>G*42NJ
%EQV4%&p1:)`_Lti=a*`s3c1epgn"?G*`#?`;@h21<bZq*oIg;cNJdR]/*`Ng[3k7dP%JJATh#K='ECW(@[(7h$m`ug6V@KCoc7"4
%pB&EH%Nt)->"%j#dVue\(3ND*'%`^Z1f(>1MOs"8Z0p:6!Ap*MA*oJ<$HO'ZH$^]E&MUZY!6,r6m[S3ZA[!!p>Ng<gCnB2aWKf/6
%1i&"/GAT%e%ObKCOLSUFfa]--n!Qg&o@Lh"(-N57)bsXi)@)kEF=hSc"-3I7m6#H(-ZEl;YN4GuVaqA+Jubq64&E@(dW6?=3tt@h
%P[LX<S<g35A`sY5gc>i'[]j$Z=4+pQWhrib2JinK4Eka,GAoZgE'/>`4Eka?cQ1f5e+Goe`4uGWr=QGbXAlR?;UMr/\"cnBV;`m<
%8#\I?`BBKDq]Ugi8NM?[<-5fOd>aOR&T^'DN^q=`LcHM2a!9_k`#Oi*j$-S#El=<)1bmFs8/$>?'7VFSEIV<)qNF2c3E[Ro^[;MP
%*!GX:Ye;Zr:DN=cQ7C$SeH5I+:qf,$?gc"D<?#u2%qQ,OfXam;S_(hW2Gu(dCR<;=CjG0H/s'oc?aJ5Zrh3Q7m1:3+ESPFC<%2BL
%C."9?5c&UB5B9f"2Gbh_(#)!MQ94h,TK*+)3F*]&K[lOhMc)TfOoQYV(@ODG+[&Zh.\COMdAC[D5*kl('g2s1CO/!CF(YuK3u=+N
%eIU66.%am$]Lpf82&n.Tp166?GC[)$E[gG;HJKR&U;Qa%q-rI)??TDq(KKuTn@q)<ADgj,c:C=5'ht$UV;P\<8=p>eqN8l(5mb.h
%"hU(_h8IGsbUh^*Zc%8ZE0hT"G!k9'VCtQl@X]U*lsk`TQIs4tkIp-L\dYpg3;XBN"a4X-Y/jSS$r[6/;F[$Gai60/.nskO##bc.
%*<G_Q+/cbe%A/>Cro`F]L[>8N7=GD?R#Dam-2D(a'uOc4AUIMmS2?K.b]4cFRdr]?6tl1`'Ntmmku/M&`6u:/Eu#W3Z*R7/qb:-u
%`!+I9YtY'eT(Ib#l-X\nR:,T_"`J>KpUZ_[G/81qguGFkAZ->8^<R^5)+:/92je+,(h;s.R:9L\&4TgA:eD(lptU"\@_h'fjV4-D
%KB3*VN8/*69QNskA.Nr["1MkIUmH<Ik^WcCAk7QOm2LN/`e#4i8^a;0k$<r4r5PLi=CW_8(\\Wh>)pfVgF@g63lfp"_q'o,Dgt*c
%!.RhFHAB+"%l-8fBA$h)qZ,etf7BDr\#"Jp*4H&)8`?LG7P5*Ya9=jnrAam('$+q\S.L2b#\T?lHk\O<e[P,ngt%,)-G:Q/[BK8d
%V^Nd8oD&fuAJ&_M#b_eE$7WDNgbI^JQ1fJT3)[+-nXHH2%OnlnUtZlS%$us?j/_=CiKMGO3c<4Wqak6'"3sg?W#>bhLU>5c-FGK#
%7^^L\KM(f^L=-PVi2Uc'4$K^B-@\Y48\2Tuh!c%XAtIir_[)TA0=8,(C@ihD:m1c_o",(o3*Z*jCV>KA(ED%2pAWlJ6hoDN+h'17
%^N.g!51;fmMi7W>[r[_gOKFS(%/U;H=^SVOI^a%0/-Xg,9'5L195/$6^bO)CI';\UV$,*eXjVY=_br+_HhKFsKQYEN5DNN,.06eG
%4oo@Or[B1HNdH,Aa9hua#co4(O2+Li[c9kENAAq)2327pK3N)cQeE:R2Nk&ll&qa/AEsl1X3.W+3hE6FDXW9nmtg3T<%`C8[._R+
%NQ#4l[Raih1rS8=460t>]q#Df':>]TB,ED:QLNUUF*(.IB?1*,m3>rK)l.*V=@WU..l6nHin/ftVgY\`KMH2_)\_]gc5k_fKJlP,
%dh5g+'Z"HbJ$PHnQ`KW-VdJ@`Zq$M/N0K9bopFEOkmTLdGi,af=,(o1>C%$-'%?_+6\6;/GN1m8:@P+?4'6(FFQl#'$9L4M]"2PK
%VP(hO>'i5U]EtnGJQ]QT>K6aEDj#tO'RZe1f@`/"+?p\c+^nfN@*Uf[4Eihnqq\H0O(!f6JOU)`]N)99SZ^V$KnUF`::K,ALY\)1
%T+:+&Tji@hk*j;`LK69tTH/UkQplY,@mNi)D1m0mffZl94ft:*H+r'pXN=sPJVo/d5*p,Gq=:F]29(dmfbiXM<0,En35!F4[X);C
%F&N2,+E,]K=2kRA<E38?i0m,KK"tD0!p\^JBeU8UmAb8qUP*A9E[nJ\q%h59W.d#6"#"N(+!%l#eGc:^lAG0/f?i7jCOiS<(&NoJ
%Qi`VqBBiuAq';OZ.!bXEq:Q8p-YJbnB5aA)b<8c!-Vp@^pRXQIrj*\)Q^?HbZbK2Jr,He#\NTi_+3s,/f@s6r>.'88G%s8ISHprM
%f#UF"J4)ghEQo2R_.)H.Hk-ASiTK+rqu7,/rs)/GS`n2)PQ1LJC3'4dbCBL'5AsR!/h>t^-dT'!ot7RaI/A1bNDt)P=2hdU<AD!\
%B>3-XF"3ac6js]_TQ>I!'qn$i!"Z#6'l><.LIO7*i!'u7#\[&--9lFQ&oFM*Jq\.0'Le:*[q_RQNL7M:)E<G#['WBmX[4=B.GOLf
%kC%JNiTpCTV1H@S0u_V;`-#b9V\OpEC#SC(qs$jNZY#*[?EAdNAf=e4b*D!/l6m!JJV/cFAJ<d?G+TPiVg'+;cLnS)'S`M#_qV=M
%4fpk2oJFqq/("!%H4t$CU`(rHYPVqGGZN2uITB=ccaoO1$47rVYAHiS[K_n]\u_YT$ks>grk,G[m[R,p8saUB1JNWb/"4hf1Hd=k
%k[L[)HKoT0ADWlI$8=um-FE+*5-7q&iFt7"FEguoXP.f?T2s0?GhVTU$&.>P`>#`Glr%AmUS,\;.$u3:18`-^WTc95A[(DEktP4/
%Un^H]>*@cTj1pP0C(pO<LBN1R5]#%.g#:0rc=D,Xpu^ZVAo9Slh7[3O1SSi$<Bd>TSh:Zp/in_CoA--N\6'`rb]euaS8F"`<NS,>
%OGgTJl9(j*:t=Pd"1`X5ROW!E_,I[>?.)'EMMF"VG+Egh'uQI65Z&].',AEQG:tHdW(_ld*R;<A.hff8V/U'I5,\.HmM[-!P'T"K
%7SITu<WAW%7FKH?[\tEIIX#&bSNUbUHX5!I(rLrqL'te?STb[T]e'_Blb0W[p+u<Yft][AWBO/([]2sGq"rMfX/Fg)"J_1*a/=-h
%6>QVSr8R"ZgK7M[O\tWOb5_+@R\6!io(0%\T3U?5gq`880>2B$bW4T:o\V`XB7Wr4%%AnrhC:8bL;c2\m_@CQjM,q//YU13:DQ*T
%?dhj.-nsnEnNMNDKjDBWC8<,9"o/9tj/=:hP&E`h248pE.4rZP;d3gJ1'T7!B.!uh'qtXRSh_^mih'lEeX6:2'KREWS5kKL[aWCL
%gh-j[$g)#,rk)NC:VkU=4<Rci]?4&8Y?FrV@]F4sn8P;/K^s:d\/IccFIKS;4KIXFgQR5Ag=rh)3#%YHC<Wi#kT;`s%'5G#o&ZJj
%5QBme#m-]4"KXp[oLV=@8@NUH?dr4='<e!Bfgm*MHE*E;F#ck6`Xc0KhQ9#d@J0s7bJ,s+.HKL^huMfALf03A;A+7h]=_GHmKr6Z
%UXPI%mTif#CCkXuRab7E3?]P&YeXLb?(YHZH'312FX<LM,WhA5N>\'ePDm]0RbG1(MsmIC9rGX.s%TPj(t<c'Ei$-W%lUSQ8dO)k
%Un*LuebJdl@a]SVo5TDReX)D@2F]]0n*Y=*X86Rl/?q:)mrnI&74(Vj:*?ps8BHq!EY.uQZ:s6"9T?DRB*EGDq5DF!H%*A2-%"CS
%Z3R`qp$^FkEPGr0`U[K:S96O8NP:-b>=3NDo@``^G2pb8B&uH+HQ1iT?*2_SVL`J`.VZec[u&[QrCostmtYUs,%tsRE"PaE3A.+$
%)%5nJLE%X]V"gKdjgcjBEMLAQ)^+98HEpAiKFs!>Ch$IGrk)5@1K!+#ZfeH:G*Q_5S>EL$(J^'H0=;:WG14N-De`Nk@)O`HYDg_p
%jpPsLSJ<3"IV9:SXd`7eZYK(uC;WnmKT$#^VPlB]>LA1%GSET-DfC/H4s@2bc8\&uY<N'4]<9D!H^Y1^UpBi?1`sK=X1Y8(n>LZe
%kXp&u4Y;q^g=+J"WB/V:X8K;#HYQhXm<Nt&943V%W"oEGBjE1@V=o58Q&qQ5&NX2KU/[LYHTjcY/7Z(6!HT2`e/fR!hjdJ5XL9np
%T8;4e]2O'kSaL5M'ftC&78YY7L7LkT'm,@+6GF<D;cC3^M935&]`ooZ/[L5I$iJ6",*^^50L(c/k!B2eLI-7<K_hR21Pm>KdjSS[
%#VGg`BI`8o@#g&#$F(%,eQdngb#-N'9iEJnB0&K]<:,qqW7H]tV?niQV%2B!T]Ac1bH&d!^,`Pc+u]gn[RS*^fG?4@4M/+.SfD%-
%S=aXNI[g6=bJ&?NJ3#44fKW+0r8R;,jQt.PbP?O/FEI3Da7II`hYa:n^Yu;%iI@OWJtEF1,aE@tIh0U:_c;)UG6l%CeY:XJ`&cdU
%.'IA)-W\Sb)plBB/@8_"1l.#$q8@ULA"c]+N"`8%cmWDa`-O<BKt=FnM61&3\&-(?eI>U'D4mkN_RBP8`+2eN2;DT=il'!d@AV5E
%G8*6c`%#X373=_:e4SiA@g*WA5.)`%")j"=ZfXS+W`Wpd$f8I</tZ=tYaK9,*N(eLHh;lBJZW0*FB[j+X-nZ/m35;Bd"=Y(BPPX2
%!GuKa0X>M0D9WMJOcmM=C:J&VNdRTALJK\9n[T+;r,YQ7p.o5=RSBqq;(Q_5FI6=NKuDQZj@V?;N)eu'45hW'FI67r=JKRq/B"O<
%/@Dcd'tss!WXBL(l<n](_eE/(DF$BBRoRSd!m-U;eV-3;.T0;-!2!k(6aqn&J*L0*_q$6%>,9Fhe&>H*P1D&#3g4Xpb<6]L=D4i0
%Ka&>a<2@BoeM)\4BR[0r)pa]^\h:K%<NWg9d@&s%C;]/EnjJ!H?7i]A[K-^S*SOn3`\t\sKa'UPFN;0T'Qu7qLok[,pW:BEn8k:c
%f^d?C\P08?=uV_f-Wc%C(o94&Q=V0&A79MlQ>EHo71Ftu=0V3J7@77b1G7rG1pr),,POtl[5*uIW2DSW$'g5\i7&+S/T=JH;la"M
%X/ZLaKJo33;oq9EX\nj=;_*LWi3;=8ASPLi9o5Ye_f4=a"XS030X[&OF^;sQ>I!@YFQPEf\n89</"J$="PZ[?LB.[P:oLeF-C=*(
%-oXoAan9HOW^WU#(3<bWGWKE":TausQF&\JDNNf;)Xe]%:G]Q?\P;Ib!M=OU0`WVicT35D*bE\&?kjRX_\6B*)BSu65&SGq[C>;V
%4%;[9(s8C^Eu%R0;1,])'c1Uf419#Wku_lT>/Z[:MK*3pe?r`UYg^V(ql/g,e3MS"\%AoEL'G_]FaC$=Kal4[3OP&/<8/=Hqk%,<
%KW/'F2B:9GjHF?u*plES-D+N\b!C-haUO]FW^JD>'e@BsQ20JFI97C(-W^P$fG^mOjD&94f%)1?>T%F&9piu4Bt,k*!@LrN<n*t.
%q;eR&@*M^l:9J1!BT-$B]ArBP-<CG7<+F*9q;d-rTbPs6=L0bC>`:DM8=a;sK`[g?@Gsg`N!n;L@m/.$MZ+J.#$+]0:W7';'l9hG
%%Q+5bj[(1[ABPn8q`meD1(OWUdgA!J@N1uel-P0D4J9?qTu"6)`>;F(,i?"!LVhV%h#HHP,Im2#iXe<$jBh#h]*gAa<;scOs7,dY
%j:nV?qW,um2)b6U5C`S.]CY&7]e92&bsu,8^AQTpdkgdg))UjBjOMfBp&jspL?)gm^?=_Iam&?7f(WBDrqt$oAblu<]DV'pQ9P6;
%RB4-D"tm[TT:=:[^?],fDF'=1h16+2mFgAlr&12]^HGgLKHAQu\(d**D_D@f,i#oeh>-a)q"!g&hXGq(eX>)L05%KFCgWfPNo")[
%s0ar"gjXTjq;UTiZAZ&UioZ8m*"V6ZhXka(qQXsdjMgrF`R/jPqYoko^gNZA)2tnWS*sFV<u3f>j'qoEl?(*N$o^@LGP'..q/CVl
%h#?nu`T<(B.W6D"Zb%,/Y&!rp/UtJ4H?8c<_o_%W^3eG:[U26*q`6s^6_r?(",a9*I2J\J*'^);0l5P34nh!erVFG*ns\+uOZ_tR
%fD>6k[t@rIVl5]N)0'bIH@GCN?f.G[DMKq.hbJCO<cV`^Dd5=FeVt+.[n#=_m@pdOPl51oM-XE"hAgB>*,UF->&jFlfb`1hNkoO<
%SSg&\s*B0D[QPQb?/;\H=9jWUDfL7"iGs"?rhZe<W58!4pFRK$kCQT=+2%(%R2je;hZn8`pBT;)IQ0PP]6lfdcgl"HXr/m;WBOt.
%i?4DW>P\Na+T4PHJ:]JT3hO)U4,5rabk_/'`TH`=J=dsromuqdir%X0o+/I8L&L-6"8%sfL+N4/*cTX?&8f2Kl=\KLZ.Jj505=$"
%e:,`]/k8mg#CQT"pAh"_QgS3fCu2oi3I1f`nato5LX!q96g>5:io]7]o'O'VjcK<66OUq%1kKZ+l+P@$HcQNlG'iakM^*M/g<OXI
%ni5gmPIBHo><iIcRiCk[jnAB.X/C<)qKW42T>uKWW?)l8B2Ed^#k<OBX8Bp14H,`ul@664Qh0gLZX[\/r-[,EmdRj'T:K59(sohQ
%mXaqDhg"/Be]"Sie*Yi9J=s"Der@Q[.t=c54X*7*QSG$'jm;9gpICR>Ir:%gCjtu.$*e2%+?o[;o3o8Ff`'bY+O2,SX`aY2FmeVo
%`T>5'd4T$<?l\[MT2&,d9jD]4""VDVh8D/DgKGK7,">)PBCF.`ar!j`d?GSE\\7FVTp]p'+NgH.pD?T7f,#CQlqbAX5PZuOF1n,i
%BObqq;ER3SDLep([,jb]DRALp>HZM5d?Y_g3RUlngUChMZ^8:S=FZta`<1hp:\24;,%e]O,>5Y@rZ%Q#DMDt64%-ONmJ4`u\*'[P
%D[*.Q,@A&/?aCta)__C>?Q8gpaO^oRYH9G&O&*2#UWPKpD#;K2[Qpc9B,`kc*B;fP[#I]4aOs&.p/j</f:/gj.-3W4^"m#mkP"!#
%mI0i-g%OF>,K,AYl,HtJj-mR22<Dh82.-^02)VP9JnCU27tBqFeqngqp6isTm2OQG_nl'Fp&+IVGFK,tMlWBtP"'uZ,6R^(2A:7A
%p<7r_h(`d?UK6.CN=1\ZZcBH+pRY(?&[:5Y($8tP4>?HfQj<Q\m7oW(5<n9Ui3,m78&'F/nO;X02b,6^^\t!t%[&pZOVaP!q$>R$
%^j[9W10Pp]*TS]]$^3XPnGCT*ZL>[&_qWH+q6,]HZMHeP6ll"LlsjYC;5q9V2i^[?^V1Vl$Zkc^^u1e(bebI+?'.3sMZY:ehfu*V
%%6S!q4I'PE#MWV<j4X#,2Y:7@ipMTeeRpkEjq&Qi64Fd!c0m%KXp.=3iggT;c*W92AG"T&WF,t,,i>31]7D$_m+qtJT9^kC^`WOq
%Pbj]p#CR$',LPYjku!N-glTRZ.?$d4NCUeWo^C_!J:!MQdAR_<3ml1]):+&lV&VYffl2SOUJ]V^S_^'IS(g0g>d&Q?,AtTuCAWHL
%glQg6[E6&EKA,cXm/%Z?_kSRU0,5QJ<d-YNDA8+X-Wp(J30"6BNl(=;bcJJoOIt[V^ch//-lX7tCck)ro%cR,_\_9!:@*4cl64Ko
%-Z-gg;T'eBeDZ]'n3%Te2s/FN7.EJe`dD_Q<K*gcOrZ9K<:MY@oPOc]%EN=(&3O2k._bac`KH^;9.u&s@^tq>q#&tVXfp^<+0Imm
%*UqoLg3iS\F_bj/fu2q!NZRHIYq\bgIP7F."#R^):Qk870kAE$FC(gLl-B$5P)4TnpNN$s",N5t6=&@C'ni0&S=lJqf?p07_JUIk
%_<m'GT[qD=D1i/#Gf4^FAt;emI^k+(fHehiYI>>6PD]\<J*bnu?Z'0ZRGEMb:<L\/p]Yg85DH`kMn:'uS#ig=Nda)]2Y*5kD!E@t
%jKXp%f-?\H1ms3@cckM^$4\3m#IchqFKmk'n9W/a$@>>8\))).pKip8l"LBrG5=f,FGf8FqA<K[gjXjfbt_&)$g4Z#E.h>B)MmK&
%C;Jpk#K_@51P+uk0hD-q*.p)H'8LW;d\*A7%d+\)^\pM[rUt=p^DMWbhYSQRj#KXtLj1s+pi0C@'0d7_`/m1Lq]^D]8@@KAe'3t2
%Itq^1h=@*"Oc;Nr_V]S"2$>/.n'()PJSI[:[C=@q&3+gi&[m`$'D-%T-CasH>(b<#O"f:-e+"ei-@<MY+2cb4Ns`EW!4R2lqkU89
%G0.6iHJBnHBr5QF19l4EL*l8:fM)6rf_,7(0HQ#5*'dR%000>[ia>1;Cd;fUnTJts[QT&D4l%.gZgYM5H)U`06KmP4gtVS,qiqDP
%2Tq9pmnYl4gNVDYbAT?.%oVINWmi";rPkZ);A:d&mdS&'k8;.opKg;un>YfiN#L'"6Z_?/H;9SgKXLQT@t:\ps/TWp-OrUu)fed,
%B@sT%Dl`9u`HM.U!5IdaPF^pm(1QJ!iT>B+qWm:Q>oGt"[$R8?JQ1t(I&JY,=Fun&6e&d?#?:6u9Za@&RmB`=n(V>)o(qADh2mmg
%[lkR2%@E==+ksd1>n>JFe!%-*B#(CJ8"7u&DpO2hcEg^sW`*QnB*0"Ak32$oh:4BEK=k.Ybn&@,M_1@R"+#-<HuaN'cU%Me[m!cp
%#3ZJ@f>>G?UJBV"^[h@/[4F4K-gq7:gV80:(-I2u'[Q%VM6[p%g<jCqU($;)Tt)gG,g&=HB*U#P]jL)d!JrS-'8PV,H&O3LX"e8e
%^Pu?[LD)lS<6GB[U'tM`qi=0k*5_;%?r;Z#ia@H&Ld`2d.!m.Y*]Fj'quO#MK@p(XbG`I372aO16Z_B03Yl9<@I=$YGRR]=+e:S0
%%;ntG.#/A13CHQcTETNIY47TpH.YV$%t`c"1N@XW2\'IE5%uMgZ3?:=L#MBfQTq#<CO>p:rQ4d*j^X)URqcC:(oi$'IiN""B(nJg
%YJufJ!s\"!qsJhZHtpUl4ufG61#ZPro]6('UgbO^P1;r;pqN95moSusrdG"m$og3+@,-/XB?/cY-YL'_KGQ0(rH<7m*&Mro]arZ$
%&+:)>4CWk3/FZ%"l6]g%%gW<p2q@,3jfa*?gVJ&(VTQ,\*/o*nNS`InhuSo'n=bD\@,KYj;)lJUql=#gr"/\?Gi[48Ee+6T^0cUG
%r*LLah%0#DrN`Jr73BGM>2BAXYR@4(oKhm=4R>BI'Re==f8!RF`d9?PD^S3g8iD-m?!e-&hRtnZI/@f.3CFPX6OV"'$q/m6BZC,B
%(]`ER!:XLN0K98eM]RlZi80S6"2JCHGROR.\&8i^XM,Uo3QIf]_ZtV1"AiUTG7==s#-2AFqX07hBFOb*d-8QCmhk\Flljg;PLm"A
%*l[*sK6qVm/7=!`P<6H;56D;cCe1Hbhfu*VrO+jP4ob3;/tSZIH$]iV4?LEn^B8f7rk]^PT;Sn0"-_p_G<_I#4$YE(?+^BTHt^"3
%gBYltI1lj\LMZUEI4i8)89/Qo!V"X/Ms^6).o<.P?_*]-T=d2alCTHeVq]Cu0"/f-SR63YFp=d4f@f@K)dR*OlR\gH!NP/C5C7?\
%8^mj:+e.@bhHaFTaq%ZL9=XSekfs\%cLqt/%J8.\pHGgNApH^DicA@,%gl'7HF*9)YOI/iqa]X$qXAr\"QJb,EImC@gO.5ZLsKJ;
%mr-76?s!AS&),e]03S$"&(\PtZ6cmO(2gqU=%:6Rk]ln+>oF_:I6DjP`s]L^]]4^Z0][^$*A=2JATYSDNgJ/`1-/_O_XVYmNF1\,
%YR@3..5%#aeW:S`n/Se?l*9WT]p1*^FGu44-MDF(mG;F\f_91q6S^OcHa\bSo.XdGfH^%O!D(16kEFV@\TiF@q8;?*Vd'!/L#SJ2
%@\8A7R#5TBK]AGWBg7:2/^:B1(QcN<b/)0=0a6#J:cKM*]_rTK4/Q@'dk<iuREiNlq;UTi<4Y5>'W:DYBo3*6c@;pDq$3Z0$qPq-
%DJ4O8`A?F_g>h(F5b!4L3#WaaLB.VbdnT_Qm.[)uS\KXP@=*j3iF7-rO<l"&C"2$=+9.-t^g1RHELI",2D^sZG]5X+1>6Ds@&#ju
%k)5]XFGRSY5]Jrg'13J3#Lo5rWWmS)m<0>(/)L&/h9eU$oBXNg+I",.pJ@F&4W0;(NV)GV(d/almE)T--Y'>[i;+%115>F0oOR<j
%XZLha%Rng+SrA)/j.du3oOJqt-Ne4m9@2NZ*:5L07gn^H=_Oul2Fj+'e*kRXL7lijpMLt<=T*kol0+]n4V-"ua5A0[dYWT2Q\T+U
%3P0V34Y3L\%SA%0hu$<AWhok2&&$\EfWHm9s7^8TFu7.qCu,+fI60N?EHuRb7$N+mqgLRd*Ah]Rh$;*ra)j[-nX9\X2`)OoE5q#8
%&6XCpkM51l`VI+h,Y#7+<)4Q2b+pb=d$Qt0bT?C*H8S)bq?&&TqGaViT<9eQ?(Ji7+0o,?n`2qQA?bL6eNG5cq1L9l;7T;S+ER5r
%nhm3Nq[WD$*Z*aM:j3BSnF[mXMdK74?>WKAcJH4h[6sqT*1CA.@DF!khP?MZ>!N*MoS=L?"#)_?kf9hq8+u+bA<5<s+2XHc`puTG
%DRARrHZ$4R7XOP6B[7.7[mk`41"^Q.&0ghh/@klX+qDto)pkY5TGn?Od@_Ef]$[0t!/']tff,XO\N2g4L)lNs/:.-Jq:Q9T$_=0e
%N6CC/mToh6djO%d&,";)07J9BlMM?]c)]I2s2/RL(0/Ti^Mco.hJUXdP@p*Z35>5'5I^]Il=i,D4ag4&IfB$)P:QK29tn[J`2'-n
%kMPdbs+XVT"(f5B6oFd`nmDE&9oe255QCNNaYVPYH;[hm:#=:0>#$"e[4fDk%ULV>Xd$0V]q$_Ph>#:\an+k)m40UMEbZ5Y">B^t
%:$(:.mqUl)&an2DXNSB1r*=URXa$GN95R@Fq**/hi8p]s078!C$AZZ/o=%7S?iL!4-i/)Yk$iCZZ3=F;J&78E>$%HHn5;r^PZI>d
%qu>h5Oj[!aX8Vp.i=.opdTAD+B8iG+@?=jV1["A-:];0Uf@2YZ3X/AVU2cIiXb$0bftcXF#6.#l;](m*X3&\WD"&]G)KaW]FlSDL
%^%?rTKb3Ks*'@@4T(IY*'bkf43XoD$$sjr$>l$sDHYZj:jkiR;Ym%DbZAkh9hZlq.Z60p>hd,8)/[J@"UYrm!lW7$Fhr>[Ra>Qj-
%hh9CMGB#J;]8CP!<Ce(`,Al9Y)95Qd2sMln_S6E7U3CS[r&\d1=5fVfqR%_tq4)-]J,T?1PJ;IMrV?6Q'0H$\:QqFN'+:,=r+3/2
%p#Ol*JIJrUf#fgX]YmbuPF#3,VlDK('O=M:eUDE*]r@kAL*R1s.41885qSu('/08VBX^Nr.>eUl0FW+S?ua/4J]Nb\r;0$t.VfAm
%cqJ<<qj3af/A/?els)7N$bu]<f"Ckn/jWQ1M2Sp<7B`f\0)B4")u]iV.Q;2o$d[D6QpYRq>g65.AL9XV9Ab;),ttmjVZ/`;RPqYu
%k!un1cMSI(Jb?#p0O9'$j@uHV6*Yu/jG8isUD4uo$NiLt3_,CNo0IRL@,84jGu=@roA'L%'ofjP>4=md62eTH-&qdX//>$:oi,%I
%K7K2`Un8(S@%*0KLQ9Ck^lL![r7]Rt.?.t6^54Zq\csohp_`jfm/=3oIT8\#ZS0eoh!r5P_%4Pn>*n-kBBtJBTV,SV.d.[%^O-6U
%(dpu[kIHu+B8D'9nbb-gWIV28hjs]@]CX2f[n#Tta"TIEq6a`4k9%1&dr.27J:HOkP:m`YDnb?OrTX"N`B4);571B!g%"m=mE=0A
%btDaCMp(!Q[kH5%_eo1@VaG!9820V#"Og\YI]Oa2'VmVjSfaeb:>@b?PD+*,ht]@[G0L%9V"=3L;s<g3_YeBDYO1QbgPa\<UJ%fS
%rH31)bbqVa0)p?4?#g"0"TA^!IHlbQ4@B't$&1(XRMVkLr_.O'org#DNrQNs,AUCOcL1ZD<6l)A(ISj""a0X\`imZGY>2RA`/=0@
%6d>V%YHL]]fol-iV<gAf:M7GPbb!$Gd=f&&RPsKP_c>i3POCD"D^R4K^PiNkk>7PbT-b\,<38lin<Ghqehq0e67?&^etn\Jk(M?6
%T7o41M6Mud??-lcR8JARe`V]hT6'B[0+Q.2gT<Ti2_!)L*gLAdXn#`[b&^eE-fs$KU2P<YY?.8lnPl4e[M4s=m=]LAQ"P?;daJPi
%B<Qmo,OJI43m'6l6C#t\P\93=(:I&2LH_W<4C@h&d)N1boap6<,,[+UlHT=aoCPcsIV6:]i&RrX_Q5gT<QL:YV46nYE[jN.j@0%[
%2sB#!(,4Ln`+r.8l)OIB*qi!(.6nJ6T#>qSe5%AI"6iQAhjuZ<9W&5r$gAJ*N]qR33iGkU0Kli#ohBf96rsJ+T/Ho'*?<ot4Ec1c
%a8-CL.btM2YO>2tmN:^W:ojKWi\>2u%fZhiC=TfDWe'*R7\tE1W^in3<2r0H;Q];:Gbe'7aeMc4.?s+P#+<SghPn9sCt3g/_`ItF
%C@VE6SZ!h*7E(c7l,80G/^%AI]0#6,'l)=P'aYR#.ud_>eJMhscHdWt\+M!cXebg!hMOHm^rRI\K/AM'MQ0!_T_KJ/dQQKi"jj^o
%/A/Wq9f%*NkK\#9>X+Sj8lkuJ!@kO0Kd]4Ih1Gh,RSb.amE_PAMc%s;Z_i/U4aMH8WnO5J4f[52W]g3^8,r8F=1*%e7fTmVGL+aM
%jK\-e/,e'hU4:`iAq!h)J"7X##<dG.C^'iYT+dT*2>:9e?Sg0bML,$KK^upQEm=kRD19*pI1f=5lRelHq+"=7YKeaj0CGcBNiM3>
%>)oWEW*2B<C5EU:7.B1KonI0+Deo0o6l^lNb,R1AO]BlMP79^jM)#)P^9nWnX]9am-U2L#_ubA:[78AnK[m&p[Bq0328:anpf["u
%eNe0b0b-F/!b&i7fmLF!qd,77='e^^#/8"8k!L4\j4?*j3>i/fk%^oC"WqqYH?A#()YP4ff`1."iZHJ1UL-Ioq_KYQj(>u%V1)Z!
%ose.CgoP_/c$Dboj^pYPra9"IITO+]goOS)nRgm-k@Qk.1r,f"JeR</ofE!31;@J1k=n^B;Zu@+G3\o%E^HW$E]md4[=Kr17V,rH
%+hR&mk<g>MUB`;;4mZ4_rfQ(?9mPNl2lb#-XuHAC^GtH[1]4GT'E^:Zg>P@%X5-CPY,56M'Z!$?YVGGF_qSFo60kZT%J!#?^'PKN
%K:Z2cGa:frg?>UX$f+c4@Y\'aX;CkZW]b!G6H-fu8.aF+_3uAmOOAd\PQZ?`(P7==Q0(D@)T63`0D%,tEW`G.1,*7?6n7G4-G3o$
%"dkN"mVPeXZsI@!)?cug6Hc>(:Sk'p2`JOO*,XNWWblSGGlQmFAhE[-_QO=#e=C^i*`?3LQj*P8O(k-MN#'&^f'.3g*@_<:P`l)>
%Nbo]&'eY)-Ul>uJc(KqZ/YnoI.HjF%*#7Du(3+'sFoVQpQE?WB(GV@\7SX40W`^%ID>G6l,GQ^jn#WLpE\AR]M@XH^oEl0%;$DkO
%#Sf1@b:\5^c/8Vl.]ZO]2/TURM66'U<_&U3.%d)c1DKD!6G9&4PW(sJKliak[8gH;AruP:b1=C0!tDmYK$14KZ8)s!P,?+=#;!-a
%nJ#PM):V>0!kP_4G*-]q,d"IU+gps>-'FRk=]Z'R\%5$%'#.pN=H`>V)UjA/)o!ZWV3**(WtZAIV+5C\-.ug%e^d'A,meeGFm>9)
%ZU";a9Jumd6`SisS^BdKelbo]/aC8P[UuU6>`0UjGJ2D/>@<k5K0DS7')Y`Ccl=%XLeoY1FIu'X<=^XFrd&V]HJ93,?61[_]hedj
%c3959UO*7._b+iYf0Cn,0__LLZ1;'f1C7A/"YLq_-@LbFf6M!rWWEl;GY"#>kJ,b.Yh3Zh=qkN_/_*gVlc(iWX8kE%BYtenVTqu$
%!l!fhQC9)afO/rL`5Y:1NrLs/3NF?`:\d+ULGb;R/er!Sk_uatao.rNE3RCm5d-Ptj1=r5";I8H_!ntIVM;&102c6J"Ya91`(qDV
%-Rm4gJ4iqY5-sGBkURo*X;]e"=pO^H'nV)m<h!3DA1%]6`K-(@F3KGt2E;RXm)"ucJ%UGBk?I.l<^dq#np*h4M30YJ'kZ:cNq$!-
%<6lsKMR17B/Eg+A7,>K%3Y6M\HPdYILn]GbKAB@Nq.I6p<X#0;$@NRb7!`:.h$cXPK#d_&.Dgjo$:@rA<Xm,d)[@*/4&*.+4@A_?
%6?PS?596s.-Q4UZK#Z*Oa/TK0%A0a"0O_K679gNt7ONFuBir(J;BmD03M_@qj%rjWn2O5IA+.2U25H(4";'(3Jk`nGCeD\,j1NMH
%$Fp?II?dOmAp@JS_$&c&XBAT.Wi3>XAQsp9Lb4d#m\2UNGq1JJ`l>;@V<nq-+j>hC68,Wbkbk\K+(qG%$&hY6jBKeG2H!5F6tc\8
%UN)M`L:&B7)ei59ZYWGJ74#%%r)2c=Nm?t/5dN0.deK5\l-Ys-@j;o0KauonjHq^&M(O73@=/NW4rW!ET^UUl%$K,IMI:!C7AVC;
%*@e!*0FZ*e_kpWj]RpXDS)ei^2jiUf.JBL03hs?ND`p%<UFlu&4";XV(fj"t6GL2;oI(T%Si!5E_<B6$574u=/c@SN$tHX<*d#_#
%:a'j.(Li/gF$r<0Rl\hW;GtDrCn4uNp/KVm$R>scCoaf6',t`FE`A4(#`j&<nLdU^S2W%24=3Z#\4`Th`_-p*K$+nNV2it-b?=dU
%OlL[BGu4j;:,aqj74<q2!>THL<XTRQU';Rj^kH"qL97R+DhbeY%5E^@g8qMl6WTd93)uGjXYUH9Lj&*DFomU>rkXLWKTc,>o8?[u
%3hlBX3ar1a^(NCe'%gS,A0_kA+\jL%#Y%p9Cig9H7\pIE7Ypd=,BPss%,j4.XX_(GRQ+%k>uh"`<(g,>ZH",uf5jAu)V\"F84ec,
%+:YXJ5kr=T.<"tM3VuOGNNJaAG$(s,]k`t0nS]uu;RNun'WZjm[qth7/j'Je2Y4f`B%pChD7<pc_BN5;2%5SQ.9mM.5ls[qR_b&K
%dbe<:/JK60':(_Chq[j(gU,_>fJ.9i,Nf0g0obN.Bi^i%NXA?P&ZBN1cuHmG(.2gbDUZ>Qoi:>3D-2H0\@`g0X??/=4Y@\Me@'Bg
%;b+-_;jXh*Zbg0B]AjZ^e5bAkhB(+H4S9^%Ko^RlUP(sdmjs4CU)N$4!+n1%SnbUK@RsFC3M]f'f(\sLI$A*parsJ"a_jjZcDo+r
%M]qJJ>9$O_+aQ(Q3M]f'l?eN`3*D8>*?BRiO?-3iTVLVn?mp6"bmK@P:$(JuB'!1Qj5[FB8o6)61j((Y=nG[_'c'0j*Ok4BeR`H1
%]'pW22C:s/0T_dH7rCbUTE>RYQP1cm)AS3D*)T\:mu]]?/-H/1<RB=&EW_9Xa@TO:"`)?B$`FLu:l1cHA!5.sfu$k@5p%GoIB1G>
%%&rf%T*=\lo3fT5hYPPSD`=]oW4Y=?MI;MaYA0o6;;5_0Q^SKBa7Z=pg1BA[]pY>X-^3=]LMS6V^oMu:mEEs%X9t5:RI+Q?X[T!G
%6NPa[H!\%Ij@WIGT'H)A2Gl`AYH/1m$aKIUcrIQ18p<=O_2<7eW3@8X&Br4rP1`esc\g.eV5gjN/]PVf:/o=t`TX1.!YqH0PB%1[
%RdeS#D42E*f\Yckj]1]A_I-<[_H!^):mXW,A2PX!Z12^7mB(O!9c_7#JVc"lc'B)rR8nSY.]^C2Rl\>6J4.KG<X\BmNJJ@KP9M7b
%R`@*+YQ;-B]OZ_("%qS%TnZ!_Pec'TNCcD>BaO]i@;Qr"B.*mdWP.&[43iaNH\6;aMjriGk#6tZ0S01VE^-prp(,\ReJ(I+HP<19
%mn84=30mdJ6A2FdNg)\t$_ufZY4qML)U)2b[X#9[Y\ZTTcPi:QbrXAmJYV"+J$"Q]l:j\gq$+)-IgfiQlHT$Enn^'Gh-@@I/hrd-
%B8]F<`e[NGcXlRN7(2Zh<A'g9`:t'8+r1N.Ea/k4"fs3<j0/I2-H:>:.T0]"*]n^I\Ued]X2Pugm8`lLd.!W$K%R6m^8ttH`bp!]
%L>aPGq@ha0E,Q@c3("^_5n>&T<l2ATRM^f(8jdA*\Y1_D,s?Z?UJ[s0bESkINsrFk;'iZVTCd%'\dWE,k<clC6e[<G.>IJ@`(N?#
%HQ)A/0L8Zhr]VhG(0FO)3GC)e5"A?kN+&$+aPY@bbX<>l*J2&=a"p_""5+u`o^<tiedZm9i]Tp/,iM0tWN^bh.aM:d.a@fgoPZI'
%e"*W>`Z&$Y)BCWtF]TV)$j,4,Z22fS+W0DA/A,D*iutq:nAtK2ODtOC_C00kJQB_N/a]WQUm)qGB.X-!X!pk]@hC9Y,hQ6o!"4S0
%NU@76>D?B2oY[O(W^`b_p*(k!L9Y$;Z/p"H$YhOJl@cEAZ5d(p+"[b[AT`8?OGTq=9naKa@JT[tT!^FU)nM7p?/d>]\P4>%S`ZYu
%MZT#tRR:\lYgnn=%aDGnZBM"Pd=CJG%7GHU81[iso"N%JZPlbNCE?r1f%*f;n,iKRMk]f%7eJiS5s-KUEAb.P0]OUDAV^e'+REC\
%Wjj$W%Z9:=%4K41G>lVamS**jL;G>YJbSL$jr43E'R.a#9nf8M>XL'_W/f>I;H/Pa+5m[,e:pd:SaY@lm,lg*XP3)%$l"ml?c1BI
%Qoa@QrafbYlE+o?1;J18Z[)-!!+MYs)JG+<6Nnu'Q0YD*+Y5&F=j7ea`),qZO8&1IR8=b!$W?cXC:^qk_,m"=c-!O"7tE[Rnn`qj
%WjR[,afGeR(^&?_^"LZ0A#\2M.,;iOJN50D1;"!Jhh:^C%NAJEP&F+W1l(BfWINMPLP_6VbXs1NkZqd>$A_V,=0rNQ:^O%!gl0%K
%MBE"([993GK:,lQJL.+EMhnFQ\7O]O:oOnt0MW!7357Ir/QLOGL\mGSi#!7()#-hor$Jj24KQ4^k8D86[.3'=gasZO5>1*KX`9jC
%ZlKZNK3>?:oPGLKW/\t-A";>#**dYC/.i_$>umF%6Q;br)Tm3PcVq4]I3kmGgCO]:<eD?]hjh9JWpPhaI7t$9'ip"<'&ISSA`_q#
%g+4i-?_<JLgdi'g(rTH9M`G`:<lc=(gkARe`tX(-L7M0CrId'ZN0>MHX%[[m%'aSQX4gYmg5r0lQKP1K?`cb&ar>N'%A>JqCUq:W
%c$>Xc[@M<I(SLr\M-Ce/f\nc_]i'N]W@giE&Egpo%#pa(hmLXY>Iu4AHRe.5YTUr#O7Xa-OKhsI;=GN?^Nh-?).Uq!C/p`1\IHr)
%*6M,un<(dkD8;#CD$Yh-RDfW\DbaT]WpPb_rC@i'0T6@%`kNtCN1Y9W5+lFog?=Y$F!Pua@X7Bb9q`h+1?>'ac6T/Y<Z(XjZAg8N
%#2OfXI9EtW0XTdepli6.?<O6/Ssl^&8F[9ocYWrA8&9Dl%F/id?-B88Nl/O]*s7Fe=WG1/>)U_DSYa:VGsf9+d8A%:ndgq]'YX-<
%LW?]fLut%qM'A1dnr$P"[O;36'C$kJegj1?Eb$B:X-O+/@$V0P)]2C"3J.BK%W&CO*]HE3*lWAO_bBG7LE3B``ZYedJ#KN[U;2q'
%C4VZ;=#JE^n6:(6<j5US"1B4[<a'*3<S`<NG(egG+99SDlWT&A=J-Z)S]\s#VK`N(:P"%WX&rB'@'D/Ar"G.ZSVs9!qq?_nS!>Je
%Ua&K^3C:I::`cdZEhZe!AH!)TJkg%l6muK4%-$RAbI$Y5Tg!&dDSV,f)@N'1(^NDf*;j&W1mFCV)U@Q)]@\fEaFml&"MXSW=6$M(
%%$h`]nUa6,I(nY^P\;u6rlbDhobi1O6T+-b!kXH%bFWVb3g69k8>g_0I!D,pUP98PoqidtaQsd^H@`6aO5D:.X*K*6X`N*WishSJ
%'Hjtt95"`<&)4.tI205k<//u,V4aWV@i8)l27i<_5\q9-LWb4M6,:3jf\g]rQ<1/G\q%SuQ%s8S6LkHZ6BNCE,!\G09K;'65GdXG
%ChH)0KD+^M&;Yp)l(iehn'FqqF1-[+(Gp<rI]dH%oHrM#Ojdik?VkU17u&L"ZS0h>Q@W+o?kQVW#mq%p,SZp\g3M#@niis<[7%3d
%Lk(lD>hkSr@9PD?&0X!"3:U/5%DE1sT5#P]M?`D_`^<]_L<-BlNe_5X>/N;3/86F4"7hhq>@Sf#"VbYq.\9)(Pk4gpK%8mUph(4!
%FQEsrD?\C/4[fHj+rdma-nsm]c@cA';&rTd-R'E$FQ,,:;7ID\]?jrg`4k\,UT=bVp]e(,c#;'OG1d^m[PYB3aJdHG@R3tAr8Bnb
%RFssi=0AAhiR7<Xj+1)_Y4aJUG8rs_5SZ#FgGG.#YP*!#XRs(1>>-_mMi3\1gB]q9FsJC6kBe-YLaRFg'l'iR`T&]KIBk=@`]_f"
%,]B?W/&0&bS2F_nJAo$Si>q#\Lo>C4A9n[hoNB)E%<8t>[VPpS,E7X>3I_M>DUq<j_bnba.5"DB)"#H+6B@`<s4MbJXu;GRJ,":P
%kKJ.3G;,>]bf\).ZEXj*i!gVEn@f5Q5Xn:H'&D%8ir@](pdJ`E+pihTm_1j-SMP>,.P$k,fHW-a$FOq-UG:].'5D%mF4KG"KTbg*
%2`@GG;c4p$.a2-mP=P-Fm##s:aGf+3E/lH7`^ZH%&k0<BM*$GA-306)UF!^3"11mA8NA.-=>Qe.>eibT:D-,CX[<0\:jun!7C?#U
%r^FsGFbpN;6NW`ur+d=:fI(BpJ=2c=g#]IQFeJ>_6U6uD$[Tt);eG1g>3mq8d@VaDl*Lt`FC?HZKJmVaKlY!UbCrErF_.(8IBf6F
%@=U*n5D)7MpK@Lmnu$IP01*%l\[GXbae$H]L$,+r">gju\jFYb>9&GFjN'":A25&R,h>g894;D]m]Yc+M)^d10oj_a;(b1>.,nBm
%!>;p(/d>XC<g*8S$O]@J_[S9$I!SI/G6AJIatJV0qQH^Li?FPFfVCgqpP5.Z='pf&EiP=jaH=V7+JpFYA0V3b`MnAW\NYgR)9.rD
%JJm]*pI*#u3L=p_*3L2?Y9#;H8"9kiSPUbbo4dPBrj\)G^o\;m1;^-"nZ@JkUqq^4rdu[sZ9MBdLhWRr'\b^&n\iZAIS"?9E@4ZP
%Jm<o>or`m&DYT&<7>qF.7#9?dj+%A.IN7;[H,IT>.t=f>-0;M4#P/ts>[1rOZ1U(^`8VHYLU$\)ht!W8^u[1;JM=#1XdK[Gp^8K@
%&Og%+"ViGS0sX$;+NemMk.`Ej'"RB;"2hO6Am#8:(4!#1n\.:(`6M79@I,X10K#PMMHG=Qr**=efMPN*1Gk'G`5Je58GR:DHi]iY
%$b+)GA'hJK_$F,4^F2eSog=sto#77'++Ael$uW$1VBM)7bDPBTMaTXfN,k40f0?3S#g@;130np#=_Q#+^,SMKesG^H:Q.mX#V-5r
%+b^E-gkuo%kY+(&^G9iC)V&[%AZ@"a9+i"KA@s^8ll^aB=#-6&V,6Ic:47af70.3@X_m(U>pVb`m%I!+Vc*rq2+#.pNM\EM*O:8D
%.dfa@>a>X3%-f@a1K"PM8OHt;g-EQ0h)k/7-/h=?,rIN:J3U;9RF<TR<\3e^/B53@]Y]I=mMRK,4+K0W.:9rW)#+JkKZD@L][2N^
%1298U.X>Rt6Au12<=jpM78`oqKD[[j6b)ECYghgRg<BAP$85:u"qJHH^-E<&/JoeV6e1;9LQ9lkbu0gH0.$84c8ntY]j0PJd`D4b
%,.*/c);d5o?'CQgV4NJV#qf_"nRj)69C0gUE^K3H7?h(;k-?CE?U\+^&%<K_/OiHHB&rE%40LcZZ"]<Ula5NFTj:EO2"Jn+C%QC3
%lS$SY&]/tHLXcH9V:Yc"4nSsZD;pJ7E?&cZ=o<eVKS%=Ikp$g7s,ZJPEe2<38J'rpDmE->PkU<-Ua?0lA.K>.$L4U``elGsR(,6l
%RjY;Tj/8I(L>0bQj3u?oWma.-'Lt+h^5<Wj5cu0OX3m`'-n)(a0X70hZ.\7+kV/$:'qS])@-l@W,n25fljAtN;;Qc6f[;)G.*tin
%<GEgdKJ@HqE?.G36UCRo;uLoO9N0_>A8EN3mQ-U9MIXtE=MD,'1AU#ecL^'Alc>J7cmg;-L0RB8Q-=qW/B&C(S]d807ObPB!U25]
%ZQ!0i5!e=4&YA(3CM4/\)1PH'Po>1OeQEe]./?"EZ-"VU%PB0I/hZoP*4$'=YA/e.-/>mM'&o_T\SF2`O6OO[@t!Es&ORI8bN^4l
%E]3-^*(_>k8P(/mHN%B7A?53AM;ukMg$(KfdlYfmi[fODB-KJo@Vt"q:+u->`&"s&-!;VL!b/+-VU@lEciuS!E!I7<$#rh"=;>.P
%f1$TB(^ih\jcGE@QUsfHP;pI:"f'40</D6L8OBYQr0[*i"Hu[aJ^-%eOL'9?.o[K3Mbq%D@e2@EJIY+>JmrU(NB?ON#_?'fe&B-.
%kErirK%Xs6`,(*9%L)c>hPCo8h*:mXk8ub,IolVK\CiVhle`P/K*VsX4;Thm`uUqrSN'QV'ZMgbYAWb-SYanV0WNW`pebje/WQ/V
%q5H06b.#FNOspit]L2#RF;=f2b!M,oa?mYY-M%fsG<UX8`00"$V1:q(TOOrr>d\K\5LI%*#YF69p$.3)aRKVRAH0YS'nr"jhodN6
%^]d1S(HDB1o3/u/J6)nX_R#NOpmrn%GU=%>BV_oE_;@8"rVL5']W]UF"nI;TE@q=Ps%BYf7#H&!n`@9iG?X-WH>[T55BQR8CO:F+
%``nP^Gl.)IN5Sa03EQ8#6lV3-gS:iH-AoJSj%Pg_ON^=[;/AAVNK-d[?JZJZPH@#/Cn]7Y+Ub`hp5joG^:L+A,N:.fn;Wjdjq_4c
%S8YM`lm*R(5gCL32buA=5&(X3bdBKa(*T[V4C>Y:=!@`S0)\mA<XJT37!Z66Z9-iti(=WJDr:'O`";j0XNM\4>qkc%Wem0m^/\pY
%Hl"57A6*5Q05@H)/jh;u;@fg!SirE,,MF/(,XjAcOd*QG$;K(m-#?WX>Jdn8Dg^DRRef(!-K/@+iLDN+RC__71SBk1J&'?/3!h"g
%&!PFDAO(7'.oA68WINibBZ]/IV1KudgZ/c!M/G^aA^7rZ/*a,#C,iR.lXV"BpX$rl'B?):E.5XQ26WUVQ]6&9/3u9+.k&e4g,o=a
%,f4PB,akA+nb7RC>DLJkBYTJW<Eb1F1N!?q_&$*RQ]=Gp/<O'4<.)Y-Ot6=U>%RBYFYl:?]@<5E$^&D/<(;NQ=;oUWDTI3CBjrVb
%dSLq'^6PrV!EYKC]DJ+CJ*]7/dhEbm'pVt/'_K8(DNi&MV.k'%N+P0Z+EoEZ:5l\2R$5!6nXNbN0bA/a#aV09DkD]N='-*l;WJXJ
%#;8oYUA-PI5"F#Ike+*aNoV,LR'QCuPLoiUjFEr1ou>jQM9(\`6[?S$9JQGWiGq@U/r>bD@S%YW1(5>ajk?Zg(<(Qucprp5p@?&2
%9\ptr\-e>Uh3-VrCd`*iiEtG6r.`BGb)im?'5/_4`D"5cj0;[gm)5F2mlkqQ(mQOF;f'ZZ<,2)a0+N7[4V^O;^Kk"g1n0\X@1ZYs
%5U*[uUp\A%<50o97nkto=PSEVlr=,O`?@#Y1JVWD$m?i[3>(FXcD[*%QIo'FT;L7C3oms(0>9EAgZ0W=-<QLfd>TTUjXSE,jEl[%
%-('HJ)Ad!7mQ3a0Pe7a#+j(3l?[>`DNA[@`-ZFo,$5G+5oThEZ:sW#Hm;QRT2,af6()e'2Wk_<gN:4=j3<]K+BPs?&NtY(0hPXiS
%(tS;j-K>4A'L[u,"Au1\dk$K=P-J$ILNVPUL5U5uiWuWMUNP[6X/rn/-HOMEb#,9e%;)Jc<"R@UN0.naSBRjLeO4Mj+MagP;eSZG
%1>K1(WI_uEnjYo[;/luG<YF^jKA%k7<*4]iPbUt2pIh6$B7u*c^6Oil>AVMb:h\)i>8T3SeeAt&?Mod=\Gjs1IJ+8c]^gerOJI2#
%bTc3fKuE'?Oo'oABB[cTi*B*u0(/\RK4dX:(*-BT7-kmnb.E6+Z7(@.Q&MMJ@tA@UXl,aiP#b2-iki_mkZS3s5mDMp(H\N#AS2kB
%L+P4t<`!VW(0_W_YcUJ6XHnQ9&H`Ed]HFthQFk<BRnXi7GN]Bn`>.+DAjU_/4Wfnq7@es+>_!CdWa,O;hAO;n1=3XA$]Uu]b$23k
%('`$m2$F2bB>EY7!E5.9(rDPKMPJPZfOr,VQITm6*=_SdI.=rA[ki-^msEOi=^bht_Rki@QL#co5S--%()P)F&k*fW8&-!BkC'K%
%QCX2_L@:b?r^Wggn<.`QXij^2M65R6_)%%-3<h&i@>.a%mU-#20N'i+;U[?6_QK9Go?>.D#+)lD-^bO`3o_J1O`'2,3Ni4h1gR9&
%HsAu@^5q8Q%8q)hR)a\<^$328?Jk;0=6ADQk\D6s5B](^@`u)^;SEUcNJ`c$*'=*RCY6]I8/'N[UP\WML?t,=jsdJ%HPu-fk3C;X
%h:E6qo`TbQ_9jF&J4*s*WMKEtm`0O898ug,oZ]^dPJ<s1/H7f(cT__-)N%TfrHjdqL6-F@,#q1'=&L,$)nON9GVqU!b*H3N9]Sr4
%T6o43$jnfCHR`U%&B`:()$+d7Aj"\J;'R.h*X^#>-8B(UJFuQ)I2-"D*.)3O<760NkGYG7jN=_tgqS(,qB)1iFRIj3*'Yc-,=J,W
%-9X/-G7X61K%.@UEI^qCE+?+^_t3XI<b+CQfS"5V.r9qTXA5*$")m%-9nX7Dd8?_sfS-TIfjt*5N['01UCA*Pf]\VtC@Y"L%Q8qt
%19r<cWZ3pbM^&20karE%f6SsnY9>&/2J0$FaB^<F:J.3R.h*7`jgBij"<E7dLP3;!k\Y'a&q9%R@t%m4P@&'E0H4$3TeO;TcLX<6
%PaYYem0+X\6$CP,arl\OjZn"h$8Zt)-N7TV3mi\\$4]gFLM\N@..\Z,JUb"=,e$:g_8IR]J(8<C!.&=b)R[`&).MCWS3SBs2nP3p
%Q$>nmjjh5i-6tO#$b1GFnIIN#OKPmEK@7^$>k$OBJ$:(*ID'Q(7l4?\h\:"(i^+_\W^;nAM@3f^jHM"jct#l?@OK:9*0]mE-pQS(
%J\"ZIG?:T76ISE\`(=ZGPE-iH2jHU$-HG\DNc\a:HIqM/8>U.=7_Z$G0/GN!@k5DGHn%m[(/FAOJRIJ6\Z$"doSfZaLOY:qN6;]n
%WSfrW6o1"RO<'5l_oej+9ka(S9g-NnBC"X9XcPW',j?6+ihXc*+Ka3e)L3O+!"S=im&gap19K^PA>A^<@'S]g_BTH2#P-"@r4,9C
%73Y"850Y2I7P]9(9lr6qrb6XkPYRHe7E\>T9b>J%IANd,G.DV/1-Ou-+g.0Mm!Xi7i+FF8dDepri&X+\-spB(rM(j]a\q6W5iDC#
%I[62H!><`2>0m/@m`Fe$r+pqnE7"$1c,5*k>FcYiA"C$VDDRE+QVZE@8Xfo2#J<bEpS*ZSZD."_Ul16(?N_^3o)>WHJ8qm2[0&ZF
%EHK>^hq^</Ho%MW8:k%8r,@'H)ZdqHXZWdnlACL"o$fp=A?L1',-/?fA.!&mVS$kIp2NM09,gU8%]#Nn$skrQFZKQER!o#!"Q6i%
%<%rSoV)-qp/4GIeG'-i+))^k_lpfs$P$=cX7]qL*-?OUtMbb:`coKuimaT3aM*Oo`"PM`O@4<-kG)c.4W;I3QH#?m?9Z"n_Q?G*u
%l+;>G\<<"CJP.f]b:^j7PQRJd=7#^V@!;CdV3)!l@(92^4qtu>l%oe<C]giZ0.)TM6oWe_QVek]]).?hpF,eRO=HIQ+g<*_Q+Zla
%F@Mq;C+m]D364@Op]jN]7iIYf^OI"YOYDo5:]:1(jo22.Qe6ChHsF.(2k`n18[A(/bNgO3fg&NLLqYF=7,sB$iR`l3773uX\?/Ul
%MXrW;:-<YZc<CktN"L+ir7[a:5>Z\i7P09=Na/jeKIgRjDc$QoU/QbY,NYDk\6SBZP\H`kpio+f;0]Gf03,fkn-<U.?Z]>OYNj;>
%Uo;mDnn+Dk3!Hj9&QDs4j-0IVDm(oYCnA!aa8N\+"loLpd[r8;q.Zf-kGm!Fl`f37m`7Nhe#g#7Or$si>-ioTEU;EnnaGdGW_#fm
%*6DK!(g:tO-Um\0%O/g0(1]9m@h_!4S`F?^W9`OfLK(*TDW'hL\WUS0q9YfgTrXHkQ\tuur*@i0$c:l>O7<>4G%/OU'K<&0`4o<p
%'nE(oRnjMgI0g7jlZAF`Rol:uM-B&O7Ns')fdjBYPulkDnpGeG2(%`(;i2bF/<8MTm]A:\gq?O)^pN"&I6PpTLTuJ)[Tsk;Y'iM"
%h#/ljEq2?4e?bKKId$ELLoKPj^\eoQn/,)D5^rM`/3!au4?=id^Q\hce%YOdE8H*BP]9&k4,Z[5A[>=t_MGq13s0fH"-Hs?&I38,
%MH-&BP%9VVW[(MCc^<mc?hVIYc$%07KXm@S^K4"d+B,%QrqQta9<*4saYfZq1,Ze;6'0WG6JcCkb)dF>U1q.f;(0>aXa`JjFSG+3
%pji`?[d)AWhMh6CQHRdJ?Z4b3C)mOC@3J%L_9eH#;Tc[L&c&FdGX^+^A`-jI;5%teZX40RD2Okjq%J&J(9)2oQYgnW"%-%<#^ffH
%*6NoUm&Kb*\$/`1r1d2)?4"ulR#O0cZ-SD"-/Xpr+4rE$>g#NiP].MS3@]6[-dSNO(fL,Lg)`Fu2ZkgN_m^!p8+L,1b\E<Uq!KXZ
%\m(`+R?]$&b;I;)09A]jc["q<+\5(1A!tZc6uh/h8JN2:>b;:7_i&N64<nM"6"^4J,.3FBpokX3nb0GV*MLsEg[9*4>c(co$;?tu
%DfiR=<Z\Bi)9:lGY-rS`<beM*@Vt1`\S4rd4iZFjJ5i>$V80k0K?>Gl2p&WF)\ZbIG)9oL?=Hjd[CJ+ISe=U9(L'^`R9YQieO5Eb
%OY3]kV"8<>B[:!fN.OBepb6aWWG=/S$:d=;-`^n<cc/Bd'"BL&dco(R83dIkGV-]tE$*<>"H!bp+RM9hruJQcG+-$UGRfY2Z/=M%
%9K:ppW;/FQQW<T/m7*cub2-_@Ldk8k!9H#l;L)d"(#*bqZ`NI:E@hg^-AYq\_ubSNW;b[l@M_WGA7Z^VFj@3^,IU.*d:dV;Bih8C
%-?%*D'CTWI&W0knd/$#87!G'S8?V88S@C$KTap8%[#]/n5b*M05;:R]]ms6ATdE#9-Y#X/l1cEH%gjDDQM_W@-j#4m5dG?R<$uRO
%RJVJ(cm%L$XY09:'k]KM!U*]*ML`XDU#8I>.8QI-i^i'K,SL&W^4N4e*7b)D:$b=u/oMtQb'"o&aurbJiV*si<mUGWVuReu]7LZl
%l.O_-Do\P0$;Sd/:Fd4>)P\@i=LNr.<XX#;r_X;b8hcR+EM86Sh_Pkm_o)#E+m7`iSK>)83nGqk;o`3L;j-YfkBJSd)gR1[UI.pE
%LEaa>jp3!m*/P[#Kc0.fhoND(ThCA_*=fIjH+n>\ht\5_a"_8R@$3us0M</ogLt6k7OU'$V9F2ZFsg'`Ar1'q:?fhSi\DIC4_Xcq
%K<i'V3^u/]WbUmsM_d.H`_][.S!J_83X#Q(JaU;MX2:uI=J9#9;u*-.lG$JV#3e6_V(hm[qG'">cgmSqM4Q"BX$k9S#O9XbG>S&d
%`KOq.d4k%JMOHu^0hNO[7=I*^^W,Iui4<-*&3%hEA=UH]T;$e^.6')7Qa3M<3+J]%!S"\77mVVYEiG'&8j"FsjOd'+71QdP:io!r
%PX[7'6^YBV+oS&:q5Z5&LZe\j`u2b34b?ht2XUmqJA\5;1R0dY0AKk&ku,KDP@))PG\0J&V&2;\Gk/*!>ZD9iZZCN(aHUXLr6V90
%X<SZ:Oi9BR%^LT/eq?n>/9QiSL;u9@/:LJj!_2!$<*UX,O_V+3L"#K'h?B0<A2%f3MNO:t5$%b;/D=W>49"*il[NSk/rbEc=s[,t
%T305/P&i5-?ETBk`!H,d/FGr`^KgaI(2pk;.W@eGk<qk!@70-hi_shrs)025Ac[m9Fk11d99\7`)`@+(*!=BpVUp#9S<Q+#,;1.*
%Ig?H12/[a19-EI:+!ml)W@'7#$V`HqHHhrc<R''=m!+u%lI1[k>ng<nCD:cos2c0pKR\K#f'baDFF#08I'r7n=ck<8o$;eJ45o'0
%q<`J%Pl>lJpFGWb<*cY+<N-L(LPM.mc!L"74fE0,p=b/po7!d^YH,oc[mP7ZEnG*:XuccC`QI<rbq:Hm](15J>FanNoL<=as!4'4
%a]Ra!Y)LbE*FAN1/L2Q?.q.:;`]4!^GfKM6`l'7)ZmJ,iboWGO@;5@[Ze&t'W/lnR4WS!*l2?"Eh<CMQHGap8nmp,8%,6^3Q'sd?
%_MId9rX!gi#*aWJleTEDTL$ttO]UC;T/IS2?LT&,]SL>Y\&No6KqndQ(IXjKs-^3Sm9K1aX(7QM1;3OJVD"X4bV+;i<CQoQ+RnR1
%^IVG3Jroulk:cbrc^[/DB92:Ah`^k_-C/?[O6$\mb<d!q?58Sde:"U]s23is_MG6J*TSm1`*(:ibF`<8B5X_Ybf*b>&'jqoRG&Q4
%14U3FTo?hW14L(`;YeS(G9$VR+,`p@rEjpL05)P`FG[tLZs3n2`>-g$IVEGC(0=dngj5kk;!-))&"B+r7Cl$r=MTit%u.&BLRhK)
%)`aoM::4<n%g]d<iDAWsjrSZWV]9(1%r1K]Og_MCJ=nN3^VICfeks%\C$lIEW-46uluY^&=o6E(RTf?barD,\;c.c,<;;pi.5Wk_
%F"lT^VJLO)e8-.RkE`SIKDn_pp.(SOdG5ePcKFV);*);[WI0JjcWfgqNV7h_:5*jR<u>]W36(^#g@+F"G"-+]C%fU"m5]-U\c453
%r,UFrqk`-'gtUkc1DkTO<3hY3L<8dFf"5e9nfQNF,*23uG#R$^5/bZ^co5b?C:?sC)#9;LR)1?XKB@*;_u?>#HbVK`3r1NHZSM,\
%r_HoDs!,A[Ol2:^TST).6*iL<n`)h^C9m:imD8OQRLDM-5Ch3[7-XoC,XV3#qstR0UuqGja8KB!Y<G/mA^*!iTY95/V;TU#CU:M%
%5OSI+SiV=qI5#=r"(1l]L95'S-<P2p#R")hGWY#>LW'ds\s@hnhB'&X]hs&7rb\FZo.([Tl;d(!j4k0@ZT[c$>[sjn:jJEo-$>c*
%VoPk:P>6Ij;#d_,d[Pmq#OVKP@(4s-PE&%\_r_uI.o2VI;>\*pc\qd=4n#:8C3+lSfH.jq31PY#iQ#-.F#"b2chEoUQ!XgBXi!n\
%pH(6A-D.KTd>9577qUT&Yu%$1l0f-Qha(OtOc5EkQaK?f$/];g&q8GrM%L8t,DR-)CuVX>1:sH?-1qM]d\"cs`q,4>.\E-6NW3]j
%5EGC89&fV`F?f)R#H>bA29IeU&4PstH)g*g3pZ$q+!_ibO6`^Ys8H6aBleOk#K=dMFpF;W^&5JbCK-^^Z?;0Aq,9!.J$S&%M#R#g
%UapL-L&*5hs536DfI##liohO<e*6Nrhie>^ru;AqB/02=lVMhZYXmkA\,Yb>6Z*>/-^F):k$J)>ZPi<:_LI>>!L6\Ka$".FcIRak
%A+DM8In]#gBQ_;JpC^oDgQU[><jUOD*I(olG<$N=G4OO.MJr72#Tm&iqZlNFreK.[_/\Y2EnDH2dN9I9%gea)^0L++67JKH6CjdX
%1HM+%Gu*3#qjk16",iE<h(1Y4oYZsNJO>jE#Fi>4[g3pj=2n,I.d-2:Yo)uJo2bd!fpTko]kS$<q1ZYdOp-;LZqgs[LRZ!JBC(N?
%[>2ZA0=KTj-I?Y.?`*!ULOdC"G&&:;,/:tHkR:7uc/7TSo2Fb<n7'o!;f_Ij[5RU<\Pck[f<COV9.Z>e.qc+:Xq+7V4%?mJI,R!j
%Ka@aF[lb\FrmqGfo<6j"je)R6GTY(Yrs*lVJ5S7?6ThYIGbOqI45MU4J0Bsd5O4]oJ&a.]`;D'OF^^?jJ#rHI-0,"9>(HY5p&EXV
%?N3U0^8QAWO.ZF\G;%)Fr[%L?^W!bJYnY_CV`ljVVXpOI.)glj_[$tmODZ0++IRT[kbiYeIkolVs*&e)h];fq*kIdn0X%,8f_b+k
%G]u49I9&*%VFKtQ>^-4>9`F4dZi51pWo2e3j3GDWo73'F,QiIM11&KgP!i'O3U@9*57:LLpPu4J/09439W7^u./MQCNrj4_rI@iF
%OAVm#m55,=-"gWJ0?c$kSMWFRV-)@dR42T3fU>CWoIRG*K@^(>.;,pDpV[kpF9$Y0MemXMF*uE\g$kD?`MW;sX5ohNgeZb4o(_jI
%Gg31o#>S6*lg5G8eBcHbJ)9P#M2#O_cZd-6iH+I[2i#<Ei0_luh>91X0R31NJ62a/TDs/mRKb,BPX!)ploTSj>sWF[?^jHug#09f
%=K[.F.^&("@EQ9m*n2]ErD>IOOOEoO?(dKQ.^ds#S\4iPG'>n2DbZ/lcTsjlaZBtr`3JQ<IIX=?..8@\.#creZVBJDe_cg@s"lPu
%Jq_5l8rTn5JBI^]D$nnP"DJdPr7J<7D76$&pSZ7<d_qU-(T>h*-bS&](`N1;%^"Ml[g=O?#$e^`QJ]08U`UKIY"HUSK=bPqWS]R1
%)<uIhM2$uYc6P>W!6ss]\S%V$6/mtJ$C)AKgsl]?(#$N$W.?#[lB2tf6Y1N9BThbE/ZUuL[6;$XHi3!1U-R*Iq#r.K--g#J%X!.g
%3YRR.FeJjm%2KW^$Z0Dl$PPkI8BYBP$.ta/VlhQJY\b54fjGC-L6^?Y7VRm-2N%=$/d<.9WZ)AM$f[3Ys+cjG%(!c,+;Q`R_JCop
%0pRLoC.YGC:qL]N@]16j;JU)"`R(M=.ub9Xj!c0<BmR4PCEs#b/Z:!-F.P[Y'ILUB;ln1)A&SRt#P/'o&.;[W_l+Gk4^)M"SJs+h
%kS#8ln&?[n.kqr\$KKo/jpe;u8<cCENJ[l=nZ'58fCCo3)j(qLDuqp^JL!reW?7tUFW0ir?TLgT#mK%QFYGN?L]Xt5&4UBP!2,7E
%I(Nq?MM5/B6B`"G5K[fSc8dO&KdPQV;MDBW<=J*,6kOp/P&?,hMd,\kg<!o/cmF;h+,^s>kOPTK.jOLlEp6)#SiCh+,laH_!pYU>
%O@IS5ldOSMd)5\mG,=CZ1Q1Li#2#!m+qtWS(8aDL/4jlB(NYuuS4+]!rZW"$@5aiVl("/3MY#('f<<BGOG:5Zr3D^U>?"AX;jA0X
%Zq=eQYS6oo9C\Sr65eJj"OdH4L^J_RGS0IcAfsKQ3qA1;GQ<r68%c^SCrMT+!)ge*GI50`>ba"7_88I8rooH5%=-eG3A8"BY1U'c
%3kfF/OQ\+O;?\ICJb$T9br?DWB`l2i0RoW-6d\ao\;NMI@6k1Y2'up"@2(0,HHec!d"+p%@#6SF,4K-J))oqaH>/LQVI:/=4c!os
%Cr8!<+D_k_&Xu=V`BqWNTiKD!FHAmWgY*P]"iTbpNsA^bKK4o[)Oo_>r/o1)PS#oai[@&H15RkNR^Gif,fg&L#:.?!/mnnuN>uRc
%5be0i,"P(c\HDZi,\N&F'A48Gq;?=VZ`#JWfj;k_R:l>(8Y-MIJ3:`;-ZK06U6,1iA@,c;7_rc/8.2j3[.#Wn*L%?%m06=i?m]NU
%A#0YDC>71WUe9Rr0F@oUKJlLEP;%#hXP[KXk[S`)fYIFl'Tlr.b5&,.2$i=Y<bmEr9bB&fF:]tIn*N/D(h#S[":^TR(CO\R/?0=g
%+97$AH2n^rq6S]XL<hR'WFd%."]sp,[$*["_8UGq^bCV+CBgdJ+sf?+!d!O7;]HkMGQ?^a:ecoi+L%6PI]ebDa&.T+Z61RX=/\I1
%-Q,#/BI71/&`^-d*6]is+[F=]9_;i*G`6=VUt.sX+(J!;G=^YXX$#nU_Pu@q%,m9cZmRlsfQ.BXFPGXFi1SabW;M,0P<W\Aph"uE
%:GV&rIb*r]&/;+Xl5]G(PFO_Zj;4X5]Oi\Tgeh=c1Y9%b+#YY=DDo,iN`GEr"3ta@:Ijg/YCOT"^[6bPRDF[Y]J#6;Z#VV]UH`32
%M=^s5/P%an`KWTnYn?Xd5TM)B:(iKamiOh9s220W@#P:6(=WC`Jg4;(8/'DP'4@'Ebi::sHH&gQrRWQI:ba/uUaTmM<X3%WN0eg/
%'G0`nfM*>Ad>*0Rj+"R9A#;KSn8X#17]Bh)Ag4DL"&>CTOg#8;(EHVVbC<0Z*<-DlQLc1rIDRs`U4[Tq0G2PF%t1a`&c&hos5Aaa
%bV[uWUArJn<e6H,.`DK^/F=*OK+o=nO?0@O9-R,a;&#%K3#s_t,a"4p0I"IePfM!B.)I2%b8^K!%ipT#A/upJ0R%!+CkJ`)VK@Ob
%2USBnOV=92ao:T\-SVVPJ=Y0hk2n,_H2#7gB)*""NpkKIe?<ZcO%a6nfJ3MsleH.ueNf$m#'S%%+L-#/4.B,Y6i$ap7Na3<#)>tR
%S)`US-;$8k)J5GK/o$$7*>iFk&HG0Q[Z$R.Z.BGlN1(oLkZTOUj+=RZnOkr[91IC4g^E6['h:Qh`OfPu.:bXH9_N^PK[5bQ9'h<J
%e<7Zr/('<bEC%;DV!Tid14bsW1<)<7dW$f>O+jaSY`e)WPqYQ]jbJ7jcb3bTcg1JN5&>=qUU"YhO4F1"r#:8EP-k6Lqbm4.EZc_M
%J?n)t=S&7l-P]#IJ,d`aZi.r"_bPEJp[j,>`[c.L-iIOm]h+.IE3HD2D;O(4rpP(`rigb'3uItBpIOdAjYHmGcmBm+gZu4*P0mq9
%l?7JD_fL1tG@qHZmZ_"'XeW3a;6O("_6<WB0]EtBS0#&L=WLX/lXk@JhaJ>dRlU'V?21C$It+OTmJ+Sjj/'WJ$-bGHLX(m.lh%^C
%)`='/I[ars2b6NJP-:GrhE9V=f&(88nai<ogqSl]4mGj\N^eZH/nlrP!nsAVoj9]&:R\-,YBAL^mdZk@>K*=Srb)/T.'MelGJ,s5
%r(D)b]MloI.JE_:ffdS@j+lS2*>)?H7H,f2kH4b0;"a[up-kY(mC/,0HPZaIms=;<Z,,6kDiY[80!\'cRI0_3)=Q\h)_H75R7Ql.
%5Z+k=E\UC4:e^CGP];hLr]`o+mq3!:J%7OC5i9<]_IK4?e)@6Tr&8#5Ik$?4*]=T;L(#@h]Juef'm)eNqR`lm5Dtb]qnN+>nGD*n
%P7LN1pHRg,3<59YnN$Kr06Z?)':rL[M*cMeEpgYj]?n9@qjZp[gTnrs]-;n*i:')21@+eGfUot^H>mkp\%uE5Har`hJc3-NIuE]*
%)/a*TCUZMP4_(8#5M@*!aK3)%(+2?CgSbh1/%>DRK3#UE][FQM:-kWBDm>>_p8GMlb19?j9_uYb\[(B\-5XP06LPO@<Z\*&k$YRN
%D[uIjXa\leJtiekc_UA3hE/'tm/>?PDYqRur)TVTI_FKRmfB=n'c*4@CupdWQ-@99b1PrMA\H9DZgC'?q4N`%DZrcHR6\l^CTQaB
%DE`u<U+eX?YPPE9K?S?h5(fga*e'BL*gud$do#47cp'Z2#6Vtng)_;9[[P*2HdMSZD_"hrg;AC6[.#j7)2!.3>BA;k't;k2+6-9:
%SSJe.1^TFN^X3r\H^/#g*9VpU[(Uk/S#<"pg<r!>5'M+u-1"nOd`'M3":dnV_(Y2u:A\Cnb1^07eD0G54!QE0:#Ss%$*;iop'sie
%#OT\*r^lX-r:k!fUj59d2s_NVG)MEh:<8bUPA;Pj]a:c"jr-_N[c'f-1u?gMG!$S%rOV_u3]4YgT*a?B%WZSqGuRp,*VH`@RJ&IQ
%:ta/#M"%\(l*W$/^2bp?@.+\YGAJ.IO/#@pm>KF?i*P)Ms+72SE#obEJsn<rSYMH?l_iRA5DWD._3!SG^O!Oa11Y`,^R_b-+phSj
%p^E1fp9.?=QtH!HK'$"s*9;?@gu!XU<rJkSd[$0SB"-H/SHlu3[rXm7$%)MU6mW)FJ`.=(/:MX!dBrpHHZ0$Fp[B_5)O'(5mI%mS
%Lu>\gD`,.7HUI3T?.rr)Bs6p?UIM5$nb4%@\sRdnF0;k';.S#7hfnoE`?2EZ!=ubi!o[2WjKq!"0sJO(Ho/gGn)3@k]7(/6'A<-C
%s6bqo1"VC#^\2ke6oX%k@q';f(S=I/lVTW3h2./:E<IGlEs<U*F\[)dYE%aX05o4WII23MT.mh.)Eji8T"A+^ZaepT)%T/Jro="G
%UY^I7;EtRhA;.^GNkCWPNsVIDlt#UUHiLIdf/YuHaF]KE-)n$t`2dKAnfmaGk>b@4WhZr'&uER$8#j,'n@uqD6HSm5-**se_PI&2
%J,c_*gN-hK>_[sK`)imKMl.6`.i(,Y?^9a%g@O]7]9qrtknri3M*7IA>kr[]FGg]ohA6Ebo`&fra_)Cig3Fs7#I1>5gUiBI3d^8n
%imU)JqB?c68.T0Jo9a(lS"Q\<W*A"lml+%S,KB,0pnj+1m]Kn_D4]/LAFGmblu):OX#ScoG>rQck<79tVLTAmSt$4(SR^YX[4Vb]
%5J=&\A9RE=hePSV&tLuRT\sBPFBjarm/CJCNm!1*fqJ#@IBIX2DSO*ZIT&8h?@1<bkS85"4c?f;3fA1DR,#$_hs%R&d]kgfm>R'p
%-g1,e:4jub^dRotG<dpcL[0$.->+nH>r1nC_Pf=b(psQp[Jg/ZhE5][e8q7l>BVfbFb-OJ=B8,C#pq!r<HaiZ[DRoGr+3nE:(E;F
%C2JFaCc5"-7j4nLH-YVH7lA-u:-Uc(>"lh[oHh'Q9/!lWc<MobM@PL%oD1c?j8u9d%nQBt.r)OR(sW13pY:IS7eBYj(Dl;+Z\o35
%0!^BCF>%Wll'r%XEHc=\[djguc<#IGcGc&UTR1D7ds-=eUSl!fl/eujc_BM!hPdm74W3V\HS[,MA6=J=7Z:l&%Z1[1`'.V0AE@<k
%(n^$gYER[JJhs[+0WjZWKpW^"F?HX4@SVPVhGGiU).Shu3ufJl2=8&dT/Y2Q1\p3Rc'r\NdG[dt][4'/r7`bd$gAs"B,6Y,-`7f+
%%\#qq1IZ,BaWs@+c4ooIi4rUXFO3(MljVU=?.'a-^.tlL\$DoQ5l/3fcchL0AX7P+"E0W0_B_\"Mk+#6g,\8+9pL?-a3GDPK7aP&
%+R8$a:Z6#GnS\9S75il1*G<JMl#kEkrAG#a\PoOfS-`*Y2!T1(^YtU/A!gP"T@&M+fXZ$9OE'#hlP@cH5+S[DL8VZ:hSSLsX]oa2
%9r4j5.9`r6Ai%G5qg_=PS]>A7%IBY7WN3gpS(YBNUB-bP@<8V8BFe`1XqP5J"f<#1e%:EIQ9ADan^VMiQ<HmDqBrCJ.LGhdc@Q&j
%fK7@&g!5D\VZGJ)Vu,9\Ts_eehSE@'*.<2E>mi#EmBpO]#k$70oeOkZN,If6B&`Cc>b,*d2b.D\Y&?MV=p`[#LUfq0Rh_d%M6$K]
%%KaP/APKR3+Y\dc`&,Yj3l0tFAH'fYo4Gu9XH\-Zq(':ln%8@$Y]o>\\!K2f$Ai8'F53r:SE\_ZR?[;gTCH>:>XHp<,JdO=VG<G;
%Dt0XVbLjf0Y)'sT"4^l6N?<1.@,]ENl^o-`iM[uUlLTJ6e!e7LcM,lTaA2b1@BKifk&3>7GD.0qoNh728aH[nLH=UsFoI;c__u#g
%:/TT4\#.\\EIH:"c*lE)_!QM?B/;FA^\/p/Xt\8)O&f[^:&SfbW;4%[=O14l:6[`\cJe$XDQhaXAt&P>8K_G&V#].NQDsmrB@&Yf
%8g_aIU(X?#WrN'^D3D[$d5jk4/\l]k(@W-c/\+f97pb,SkMg*kl3]2+cb_T/i8c.^7-5DYp96<J,HC*Q^bLLAM2;^4m4PP3[!S(o
%G3?B@IDXS]#.S51hc6T_d8Q1Q)fujd9!^U\cofiJs+o>uXn&JTppEgU^u*OYgGBL:2JcIGMUU@\:p96;MMsGUq%+GhT;(gOVcTCo
%6GeH2YaAq[_S6\2PFslP1lm\J^NSCsQ/?ABHEHb:f3f+*m0=GR3X"im1#sf:o^lZFr0Pu\n0*bHXPHa/pq#2^?PiOGh)aPUZGb5K
%DYo58-Gn$(ZCkil?u++L.Jq!.4=bn$(I=\UE:g`Tql8-Eo`Cp6klmVe]]Eu%cZ0UM7/Oie<X(AY(T!gLAu`MXCF8a-!";Z-ZclG,
%GH6-Gf(GQpDOk9oQ.T6QjAJ%.N(J5<<,u]DZ\\I'NYC\p(u_""j?`oW90?h$>u3TW`.A%Z,.iA[?YuB*N^9SAUn9ZodseLX3ZRdQ
%gJc)2<5netK%.+t9Z/eT_7e6;;),?QP$Tm!dkbe0dir+20#:9ZW7N4INpAOZV//9JUKr!84#<E\r`dCg<H]2WTiiaN2LE`-B*V[@
%LF["MS>X@@'IK0$iKY%(#'s"kJ0#jpZa/?cV%a!Di5ZX&$<9'V1Y-rV)Dte`/-INI?X>;,C,Vm-e@tASe_&K[Ju7R$^K@q0R5mEd
%GfJI^L$8OFTO35%Y-\E3h<'M-R!'f0VRk)0Bug=gFdeR@mB?K)dDe11rA-[n3mV;ck*Pa^_[^=.RZ%+4FE<CTbOiCLn]SE(W/!45
%Au;Ds:9'RW#8d>/PcE(+fPiqdj)KRXZ7/!QEs0cGIQmsd5%FDaEHOiE,TUiRn83ndi;0kXV\@@78%kZ)mKHB\65e,>g?rOgeAZaS
%06q,Up!KN[C='9\\-V4SF+<fXqh:luGAl8N^:Enr]Y7ON0+T*D+5T3F?$a/4l.4XLeP<G/]P:e;>dILL0>DmRn#<jIHfN#'Vos_A
%<kQ/DT-i0S0irs7f_F/[\.r7S^@S=IF*[$$a`)P#6nctFbBGis%=GA"U\_gE(E:OjVS0[s\U1O1W7>c*9['oLpQd.b)sc*na6t(.
%)IG_[c+E8CQ/hk`E95L@k]#LP]lL^@0NVW5^NOP.VJ-tG_;j@NUKrl.rV4p$pE*FZ<bnnaT!d5>p;c9kU\0\k[thBOKuU61VsAC7
%p@`2=L=c8<&r2JFO0@SiGIdV5p3usZ[!ES(;^I6I\__#!NGm!5pM[^1JS<HKeP?FBqXiD4DiI86O"St`ak*RDgXRf;=i?flhC20_
%I[s\VXgOl>F/t)Yo:;_CCZ4r?qQjC5(7&$?]Nef\TAI6TlLC.W40;QT#_-t4f(M$4ASMr22WI*dlBg7r:QP88h.ub'<!NdQ:00?^
%YCFFok*PO!4q)-DHfrr"jcs0<`ppq%Vfrp:it$>qEP+9d%p&t;7r%#H[`X>@2'*98&`hpjmJ(f@m+q*2/iMsUe^M-OeQ_Ee2h$3,
%H[*/BD0bg%dZrF"\'bQ$9,irKgFN$Xec)J#V,r$4DsQ40+*lXg]kb!OHhQS:*6W^+g:lbO<;5ZJo=!oqo[VefTKZ\-g/r/D?!k@R
%n8<bj/:RB4UMq$<-J6$0aRDD0m]A.Q^Qr304d#`E\(8:7B_ni[6l>hK=L`Qnm?VYF5Ig"`H@:#%cJI/cTD17L("7DsouKor^$:Zb
%-%*q'T]YZ[Ti]uf>BHk$prqYC"7X%0n*JZWb"h!_6=YN8ag\Zio>]=lh0o)CI=CS.bE^?&qX_`+G3@WN[u\!/BUZMX]CT/*qTeNB
%>PkK;?Id;iQ-K!Af@QWr4(%C7Sc.Sa#OAGf2\j0uhNp4Yg?[o8-JRF<T<)jHgjHEaR,<67d.+=U&c`8t:22Etm_<LcP:bUs8TX^Q
%cKOiAcK!=:jQ=I4>C_AkN&QA^I].+XTZpKdY#p%[GO7YF=h<Jreit^@N!E!_QI[".,<'NmeGJL.nae44[s5F^0Ecgl*tD'a:=r8Q
%<0&sZXF,Ju(iP]U:@<L4TA+in>7$U=hWaj:T9a"6AVf!fXgGc*GPu'$p!@RsXY"A=eoQ3b3dBClB!]1Z#=MiEl8lXSS%CGjH>pAP
%N:4,[DQUkGo]u$gGlFrEW\jM4#A_jo]BQ\48WVS$<b\"fSYpfB`,+k<NV^ZLUM9&UY(_<8hT#F\4DR")&'WKooGKf!T7>_2ZegMp
%l%OHp^7_2g^,=VGCO^c7&]Jlsh0d2SVktNL]#D!6(;HBpXFD8X*S7p:=8eDT_`(Y2N$f"d!%2QkqTng1okODRAS_>8#(?48HJL2i
%*'2Y2hq5^6d*d7;LVa\U?G1XJ3BGFSjPs"F^3jno%J]mg`i_=L^%1_tCKU"KI:[3WI5guUXY)>PbN/f&aZK,:#>=`b\Wb>8dK;@.
%@.iusDDmD\+k]b$h(%&??(8J'm<(%,`dS(Xc]-od>$u](U-nK_iQe4W54S*mQ)Li\]C/h0^H>hF^SWMgQBrYqeu6cY=2YV-Y1M49
%e'BQ!V`Q7*PrjVr;9SM#TQU.C**JD#(Z-k$hd#QfnWW+#i:6%0Eq!W-G`D]8Y9#f'HRn[=j0s52qWlBhC25F<gXJN[^VD\FY"eZP
%PIZ<Gs5d>YCHd/!+1]_r$o3p'G-XmAmVgK[?Q7G4FZsfoA.(f/i]oWNEFXBT_Xb#d*Zsc,gi?q"=<3GhMr8;[V`Z5j2.,7,2E)QC
%Ml4DSj&!l64[/2OP(O7(-bFYR^[V'ZdH2)7H?l.^kP\!bRQUW*Ve$C[V&':X#Y<k/GihNl[#tM-e!*XDqY>U/@>paF5)m;K^r)(r
%lMA91k<W+"M"Jmj.7hA?K;g47ERo"[E\+j.q9'<5IP(L3\A;g!#("M/NH^^IMYkQdAJ/>I"&C]^?F!i@L5/<.fB>=3Y)FKW>rrnc
%5TAT?IH2a!`[EL<5cq?Np\.:d@Q^(Obrqbir5d#N/)\=,d[u%ENFX#?i\SqI&QO+ZYO65RiHrCh0%)H'hoOpeR$O:lrfPRf_<N+/
%7QqTs@0%:q1hNAhS,P(t&iLq\^%%et'Ad!IH1duB^3l]h6[$8Z0$95sV+8u*?t9/Ye$lg<0AW]qX9J"IgPOM^W`McaBcJ_>^@Li&
%[I`YSnlkACgNAWq"W\g+4[7]V.I&)bYM%]^[8s_\Gc?[TlMQ(X$(jGNs,[W%P!'Rc=akL'/mUV&h0R[to&O#g\>B&bp<$F>Z+7OG
%Bs8!,[_$pgb0qoGBlX#Qd/CUVrNb9%s)ml&r-L1u?_+:+DXB"+m4DTqR$ObdHdHH`>^Mj=>c^1R5#$+N3:6'"Z<=F"MOF_%Y:tLU
%mWs@ie@(27hAH*jg0]6=ojJ"3K*"KQI.ZhsN0aoS0!%>:T^d%'bJgN7)5:0:3AIU.(@nAugk&,/[D>4S%PP"+3OS+rj#Utc3N2MB
%ro4Ct[^Wrhp$b?/8_r6r)<Q//0:(MQXM;:=EQ"ktnG%QlVgtd\W\F/(ZVP=q7pk:g%QP@I!1l9(Q/9FR<HhqcAb5!s6@0nT_9mWV
%BA"7+dX0R%bimtN]k\/8ZY_tVjQ=;>;VR\##=mD"6t\0=i;RE;?aiK8:+l"4l,"J4X?>pj))f^e%EE9+XDE*I([1ICDlU3fIoA#8
%]TbHuG3<J,i,rSUE=V2V7or_%5?tco/,oJ"UVOngD7Bd&:d99;5_dGQI?P8cD:f;il::^=V>Q)WkC_N9a5$_coseO(g\Ucpg4rii
%9"b/fj39+?CV<Z.VnSH<-\>^7XtIFaimu-0qMXO[ch74jj(E8/Vf/c@]Qgm`$7<=`iUtgLJ[p7nLlY;TT*H;_[I/\+ApZ3i[3s;*
%fmi_F1ei^mlcXpsiCe7hl0J4/_k#`bSM)Ys=+gHnohf/ec'/"A\iHktlIO/;V:%B:s0RsGGuDn9fJ28uSJAE\eo!&M/jFfpIWPLS
%+kH=T%%pgO4VCh#lg(2+0-+N*iUYFbVr%"1(CSi5+"hAR8/e@4);P\5HG\5&YhF=a\G=*Pg*GN[>.Z.f1J09ZFtkc'G3(cC7/#<(
%8',3-VjpK$Kp@1Ia]e'"YBGX@bO1/NHVu?E^9*D)Gl_hK@GDZc8=4`Z%b63^-XH.\>:#W-JIB]:I6Lh[nlG/"=l+StCp1*fSDNfb
%3-Ue7q>3Hfp#-Vt:=]??HSod[LpudEh<9%ZbOr:Ge\gR.oknV>d@f5WejX6jRIf+TjQ"tW:Y4IPndd?)J#e'fb='ukL4.!mmF>tT
%N:[]md)"H(ik%rgZXNk3SkXS[_D_st5fKq!SnsbT\TEgt_R9*kVp4&DUp8\Un(F=?CFoZ2<m4hFJlq!t7.^R?Is>OMl2JllNCV$[
%p\!b#S(c#CS'MUG[WWG;5r[C:I#RA]C2ZpJ?pqfc?#2WL^Mso*a;/tC?G3^/D>D<!orHj5T<DLLgXmm8e[rrR>E-[Eo5h#(jBR5c
%Mh>e8KGj%948W*g&#[Wd8??\<f+r8XrM$sBH(B>cIp.;DFYq7<hOn@B\7A)KlS&\3d8$fIqX);!i6hE,95]\^jK`.el.>n4gRT9:
%Ss$7#CLt3Lp>O81Rk+/i(20-u+8bLkbj+ldB)J`QB61/tSbAuW,PJb*IWf\.ZZ`DL:(`tSeB2sArpdhpkiN?HqjK7/$!b%s,h_b\
%:t2!3p<A6?B</6(O!0=;I1.aA-^FP_(7k*g[t<>tL'hYuiRb$=bOLcFk>3BiI:DU"oktA-)VpB$=-26(I_'R!Z+p76^Y65G2'VrV
%Rk)1!O8@<:M9cC9\(P\jUeg_$e]R%A[3s.Al6f$.goYF-DL#&Q:Vi`k=5o9fcPl]FQc6@VmEtS]OJZ@i2g._.q"/a+J%0b;5V&U'
%VFC#>5NL"cA_hi85a?\?D)_ttd\E)8SWu1j@X[fgA,jLZ6<^mR>OTH[l`2NX&(XgK&%3Nc]rN3VUl._ne%;^:r4;f@k>?;KWA,kR
%L\UG*bKIA%[h"dgPJLmTAPSY*:!__Xo-.FcIX'8RMZ-ZuAa)MTl1)X(pq]>=Rr@c`]Zj2%,d+[9KT#j6iQ0X:bHLV`:()^3Z]@m$
%[B7.-o'L'sNs_=;rQgM;]\Zk8Tpq!Y^TD1&,3m2o%nfE3UUtd'rq+0^]5<E:H+8.RGkbu4Cu!`M?X&u6HL3"ejP+VGj3;qu,gs?8
%9]GF&*@js1e/U2+F,b:OS]/VJc@G8t@/m`%MN<K6^HB$7Id+uFi6%rpA%t7,9u5SKjQOEBJjXJ-=820=3>m,>"r]i;pT:B#lW;tk
%m0#I23c$pgGHFSc7r$"agNrO1R#QH*II>M>CD`]d^b+D"g.S&G8=V<n2I[FK$?+57-dgktCJpH>HsPE)ooQ9Fqa\h&pJ.k*M:-00
%o[hr/!Kb.eeiS6IV-.#ZW_ZrOAZ.',E%bP_Vff[/<CgD%hrq2MU)m$7Xj'Xmf8Z&?qrp/4_qX?)rK[>l1Su>Z5=s-=@uceRi8F=X
%Kofj2cLjgH,2!V&]<aMU!&D<;0HtPol)b*brq[!hXY7Lolg5g0/3c8mju_Jc6d`5l9b6)5G<,Tb<K;dFO5E)Q!/SS?a*K[N^<2ar
%$]%tS-K:Mm?l`I\X8>PBCp-97`RBV66+u#9q(cRF(GMs6b'2H\K;BMUrS@utjbK+=Z]1?l'a/l8Q*(&*W,ZVEgR_K>N_ZolQfJTO
%F+(05fmY2>kL*ad/_PG0Y(:tI\@'08oUYs@lds7is(ZTiBo5s\PkauVN=R#XbYU.a]O"gp]Wj^Ur)B6;n(q!;a!Xr&lLil<WG.f;
%p=IJ\h=^T<Jj)BPp=TQS>5ku,Cb>V&!bUEJn6MJ=9!D(WlL*Gcq7!S9Sh5,ggg5$4Y4&dt\[uO3@G:-ir8qC(-$_0a+cp#9T6jgk
%[AmOS&+?lD?U(DnDp9)r^A%#^eP#&OpKR#?lTAHEG#&ST&q\g*],/_IU]gCD48YrC_)N\-heXhZ^;sd-N&gBJHrK8f.HB1KlcTNd
%m+\F"Hfq0/A]pGa!A!+XiQu@79$5T2Q0hf!F>a@_H_kEn8(UqBQTqZ!e_4T5MKTEM83Z_#F`Xq!B4&@MpaV-hY<H2SI(skC-J7GA
%V&/*g`fhcCQa=3nph.t&esk:CQLB3K8K)=@@Nj+-^9rd]^H3Vo]RR5meW!n%=E=#Xno4TQji3M)+^tD9qT1S^lB;4>^Pd;"TD%3O
%gV0t>[rDu4b=f<>5BQ8*D`?:h9Y1%:I;-CVO>>ir)4U3`amla3ZT4Ua?b!]f?Z'g<!j1PDC:q73?\5;,EqN?gpP@\_gM?33f$0]1
%leSSpH19tPRi\-FW1NndUs$)?];Ot%5+Wf>KB!.T:Y"=(*Q*Y04Rdk/o?3!W032H/l+``ml0TN#1HnkYnrl7LWE@6r.#n+]o\**=
%"N._#LrI%ec$sl'p3L<5A\=4Z00NM<\j;fMIU-u8!n(F^PKZ&oL+C*gZ]ftcQ/P`XZ*_uifi`,Ch0Sso^678tK^l3hYT'In9M[\W
%qYl#8lF05D<kYoHq;`^YXp8kG$!g``Mp!@rg@+Je?h_=P`*HXFH>S'^m<@,F]fCI3]VkUL9)gR<jlZHDNnJ6MIlMN=p%d"+r`[Lj
%8+ieOo:<Dckf!TBm,N!M(ShF$?,&[-IJ)E"oke_G2m:,6!<kNVDB5hF1kmsV[jTGtGKGH.,O9,:PpadF\To!5Z[;T5DW>6im?Iaa
%AHT45:GV//X>.R.X,"lFe]+BPlK^/^+ODc*>Zm\G;GV6icemRD(I1gfT\GDqFC:k5CV)ZD;9gL];nmr?nSjOPh;4Rj/nObb>LHra
%=8'tq?>G#cH>B@$s3gN30683mLuLe^nYQ1,?_AM=o;=[22BQhigM^EddVde):3Rt:F+!"f!!b7N^Nl:,6da4uDdW<bTrb(=rOfB.
%F<Msq>I[,/Znks&h0V[[]tAf721<%/rb?cK)O<4^m3-lR[8/;7LTM.hq>]mEa`lj2^]p..PQ^Zh>\^7jD0p$.\aAN4mAHl<;<Ob0
%?5]e?F_=<E@Gr[!Z*up"iO'6Pd/.J7obU@KQ%u2on!_40"n,CKOe/3YTljl>TDt9_j4A.tHtB(nR=_f=Bm#kO5&+&7=/>S'l7G7-
%5#Z\%Bg,nfB=o2%:LLs5oq27DrT?C_T$DR_qr5q4-Xk9Z+jdm9nM.F@##F?[67_H.L)49tal4U?AL^<K2.NABRR0s%WN+m9;.XKC
%-0V8s6rHS6;.2$d,"kWr</^8nV,Bl:0JpL9(#Bm)jO9n?"\FMNId8]K.=s8%e<J<eGj5]3<bm)P`3h"Mpf#EjRrU_s8fZ$PYmn5m
%P'&5hdkYctV@_)$)Sb8k$G"\=7O_W$nXNNX`Rn[pWCbXA<L>\Q[4&>H^C=('MhO`3NH^n,I;$JrKiM\o4=Qb=;b.UT-B4qR<+Y`p
%s%)0R(^/K.SCBB%hMbqG8q:%X>72(4/;e/F`jNa0_iQ3&RZ<=S+96)f4rN>TZT+1tK`M5,ed1jETiD.dq@L7LE*b#gd7dG0k^`/?
%)`?"16>E4%><3F40j'B+"[]SDKu&_bldIhH>,6G?@8r.o=on^Z8/9,Sq7TB$D,TCQ_l?=E4A`%.3is]]*n5f%M2\Ee"GT=>7:W8e
%[M[O#_Z6nP@#ZWJD)$/(,n\Op27:NFkWt$H:R2S`/`&5BA(-a9ri?*^nOBso,Y;/o[)L[$R4fh-i;(6Y#oTO"X@7fu=I,,4J6B8@
%OFRlIJ;h@&Xi>QGODRi>hTR4%!Lhpuo;W/egoR?K'08O3H:#sa2,d']Dij4FL98H"c^&$TJk(>Sdu!&(MT2FMRMlUc_>kl))^&gZ
%(6#M.It38MLsRiX&KYZaS%t8C%S-$p2hiKO[bt3]Lpe'3+VBUYamkCl+[JZJ%g5F7nNJG)RD9Bo#r^LY$3[5EJcO:hhr6*<Wo8l-
%oSHTc*Q(@S+NEtP:#TC>.PZ](--4OAR)iC$Lf]G:@_>c89nXUNWmEs4`[gnpM2Bsue1FcQ2ad[r!sB""_q:Esj([#";70#g1U1Bj
%@9%D38j8.%KHp>H[5:,j"(jonUif-UD(uIhA3<U>-)r.g``JJ`CBn:u']F<@gJ&OtBr.Ms#008jKL#6Y]#O7:Nne56+pI6G7f4"0
%7</iEV2U^jR^):]:f%WtmErJnR4:>0M['0N:`"A,Ig8H1(D3qS-!,(].8=A@+u%4M(rs"T=Of5F#PGmULeM-n_#cao>m1VQ%?puK
%`;p9Z8d6TH9Pn9S8?ip/LmX1,5q:'oZ`h<0D87-RVBA='P(H+X&_46uXsooi^n@?C"c9@W+cr0"Z:<nn.OhJ':Ero.Jl6%?JTauq
%AtD?-&k:ju>I9%q?I8rP'!K-.'&XGt+e<?Tr^t\9PCPR,Hn=C2C?$G@,jA8r/0tAA'L,3\0Z$>u7DNmLD@n$O@D#$#\X5Zu,N?I+
%!t];m;$BNGQ"nA!8@U'/dOL.`=pBP0i.?%!K_GU^C7uq#bV"`*j#L>@(Ks:A6L9M]USViH>[+^7NF2G0i-sBgXWaCU4GWW$S.FhS
%ir)@3'n_dK9PKgD5V9odA)OIt[Nkuj#USu?I?g1J6ki3RMo,)@Zpj8R$'d&,:<8RUBh!J:CcAXb>bDhgQ.Jlh2`Ca>]Y@!:JjCS*
%X<Jerj!B<!6:CkX)MfA\BCNPg#Y3pg7;[l@&l:#6#)Giu85_8E^&_Rt(_</;*BX]FNE7rN#mBdKIUg"uL#Rp_!Bs,;;q&;C1j+IC
%9@6#V0H^^!OiK;P";8n2nVI[oq?9Ggi`i)g%#$eN6[>o)O,n6[4sY;;#A/6KUg;@B&5@CMZ3nPu+rH"WO]0?5ThQBC-lS6W%BSS,
%Gk@7\&J5=FBEUdMLl#5YCuQ+bW#@K&nPrmZp8Ypi+os=I:*?AD@q]q_Cmn3-+-K*XZC2Or]?uq3R,TJLJ]K*#$-FS;Y%XIoBRX^F
%iq*]0Q:)%]L(M+SejE]7(5Bl^UR7.h5`2G=fYm?FJ5U,=^dL:U$KriLc!Z>6-5!;MGfhiKKaACc"Ta.@#]:86,'(P?'/PqS7$(fL
%$F!2E,bd$3!^o@b,#.nd_Gd#@D5&[XZ4$9C!Jhr>/g=G2;I^?A`m?3/*mhG1<s't3n/`r3Dd#^P)ZZ.j2<c]eK)p<BR*l8!"b<7C
%@iD&0MY&VKNDd[W8fT".EkjI\f8UWLn0,^'1TR>QWPrS--K<7CBH)2g,7pfB^oP0V\rm8>%%^"N7A8^2EK/'W2,G/H0RQ3r$UlS%
%_#4::!Y!B+i4W4u.Y<dX=D=X0&s?698qCOWO@Deu*>QB.auuf4X:?2DF[]hr-@uP;S,ie2aC<C\kGMfGckW7E;%oM/-$9m"7SMCS
%E6sOH!GNo"r.t]OGSg"'PR]6Ql61&h0A[@/&k&.o&0FlW?/hHOCo+3nj3;5*NDLLRZUSC87$)G^QS`=9$Na*TR#j^%ORNRe7T.Q'
%%.U,/g&nS]i[dLaW>3rD6.'sY15JFH0a#Q`m3>L5p'0:_&dIYZ<nK(kjrp>CAU`VMONdtK5sp38$f.8@&nSnL820$L=;hZ#2AIeI
%8o's,Nl:sS."L9=5`(UH"R/C\&MP*K)\h5Q!$FHu#Xp6j<Y33nE"b?9%@.9>S-UeTUHjd*Q1\P)1BO>g1X'85@@LAe,_C223`7Qj
%BiE(Z!AM8]$R?rp;2QNUE>=t!MGFlcNq)0g[9+iYnn!IjKOL2K@/t#3%I<[e#ZQuUQCCFk"u@JZM=KX`InOkQ-F=RT(bWW*;c=mW
%#Yc5`9!J+07%X,kI_co(:g4Ve%or]gKQq@#)cA1lBTXbuI_cW'%hdgurc$)^'9c:K:l&].<5BL(,T@#E,!Vt[/42uKKJ7uXbF%dT
%RL%=%=Qp3%=4!*JO74iB_@<K7)BVoi3n'Y^a,,C1J05b79AI"<$a;"Z&F(0[.@Ra_)`&a>BrOqH\VCJ[LdLs8g96DF<'rZ>+Yt;;
%<=0Ik8<WY9]Ep&W!cA_DH7_5f&Ga8ni,dhR";470La!BjAk8WUj'/_u2GBgC"@V_.1!GB)A1%f8TX%Pj$@X2_!9h5X?nfQqCpF*V
%C'[r@+s]q&$O'.B;rU=_MH%M$L^(0e;*j0HZ.L=t_;MG29cT<FJ7h]!W1$7<_#__s_+B/i2WEQH5j$G_8;(BRpbWFiB4+"8@<q>Y
%coP0!GT>D4kbX\hk<MN`38$,@GD,IBcM<c<h1s%O!I,K;7*Ik<c&QcFRbp(XZpLrh,3,$o>H9_HK;Z$.Mdru,2Z3\;!OskO+_e5^
%#]u(I)ZhEHZ"2kApgdN%$lppP8!,2+\YBd,)lFkmH%OOkCr0:*DlcBNWL3LF@,U,mZ3`j4kiZV'TkHl0V(_ofhZtl+]Lp3EX;Mif
%YSg"jJFFlpFj:7+FA8jE'<X)haubc0:Pt5IDbPh;SA^jo&MuD3j3t5iA!&Vtg`V8T)S.K'`.EUTMSaZ^C1T!ILk<_*6:YS]d7.4<
%BUsueg'+u):s]M)O<+PqW_BJ3^8'8t6J!TT%^l)5TT$^c-f#m\N<-1;B*#=>P(\Z3:k33$2097(LL=s#:@P]s*Cfg9^_3'FN70.o
%i*'Q7Um.\77`&YH0WdTl.PuU%VfdSgM@0U9N+E[TPT)5Bcq-oSr.&?\Yp5JV<`s'_.l7<W@K\N\M4"qeE=f:.N!I-q73@XH*4*,1
%LlW.>C_R=_.Y21QZ;`.K-=B\G"0ie"[0$6*L$O\^h%]&T]f(D'^l4Ah&"(ncTFp0pOST!&KoH9-/PL4&##N0E8&JPs34&`E_(_T>
%V$U&n8L4o]'>&i8!04Nfg/8##icqB1%$@#4fhEK;H18q.p!^a@Ff+\B4n2UZo^E*B[Y/"kf."(Y!6t]C'0k.MQ7..7^fmel2C?gA
%XGbaB2*,RcXU,gK,<TH?6o?MV1jP^GCLYG:\ggICX<[Ln3#/jbaCqm!2mED$UliM7j;aYj&8t*Ta9E*_Z>!'.`!bDa1"g*m'Z8[p
%2_i-VgS$'>KV(nZ4Ubt3qM)5F,.D0iYZ"j;'`,a*>'R#)Uld*o>2cQBjD.(<?4:FEgu=lncH(";98-Y=F+EZEGK6"6*9LdU\lKGW
%$(JH/f\-'#[5G>:Fs4+(EKdi4B#<`j>^pQ3_/mEkETeqmE\%^Y!=<_4X0.^uF"C@UL(Uj;bUlH_(]q^YXHcd)1pVhNNFX:g)1a7l
%P&&Qe.^%G1L-7K4b/6f$.SZ?hZB(`K#3*%1NFL"nr^/rl)OW=XTf@t?%14aJ0%$hRDqm4-o*+G*j!XN%AGPijQ)Jq25mIYr4OV-"
%L_YTma![h-K\D<85TGC3!<HGn=q4*^J65Gld&WBZc*bQKSXo6j&;p86cnM0O0]<R2;iiaQ.H=Yun-,_YS_dDc(/I[4J&%FHT;80?
%AAm+n9K#I/j]dSR45<N'7CoV!JI)]0^+kW82h\l73lM5&/Gh-[""/Q9X;>aW3X%@'+rc5Ffs8k(,oO^[3im&hOZPdJi_<]/?H#/l
%8d9m:6Ra_!fF83<"?F>#kV[e@\Va)ppc6t-%Qi9GhI\/G%YGu3;`8])q2'5g]""$F#d,X\=THbk2@[fhLbM/Y'FDr'3!Rf1%'UGS
%V/qZ<i.rY,NO;cldLFDM8<_PZ",`+4C_@@JUlC&eM1NPoKVT'E@_oNeTj\AlaKj^B=YO1kl[`Urd9T/@#n_k'KoPGU1kK"t33u>R
%,iU>,T+O2WrEp3Q(8eeb*?$msHt<q9,$ohYg1&](hXa2e7(<A;4el.RLD!pDZKgY0%a$b*+GS.^A/'sN':qVoZHPiIJte\n`*nFN
%.&KZ@jG#]_Qt]+_W3@9c2Lr`lfMGt20Ff<MS]'h)8]VBPhCR/K32Tj6'14N#?X^,d,9D9e"umhh=[U5I'.m'7BLYi)=MXHWE!)K2
%iNY5hf2-b+0T<rS@H$I(*tp>Mi)GVLQ\ssoUH\G_^A()%NC7so#'M8,%P^i%:iK_Mm2,?D\]Qar$JV=P![0.()R:[i)`1$k(-^=U
%p/o8A1EQd:r0W,#Q@4^&BV_>c6_m'q&3l!F@N[Y_Cr4Ci_4qCtK`>,cYLlUNP(B<j!%j!,^lj`903=j>:1Bn$#&6iF&4XKJ@"H@S
%AS!IOX:eG`oKqJmkSS&\RL"CT%Kn:36qDkld;X3d4/e.i8na!F%#)AF/Um(8,%=I>L'q"%?kg5*LR7[D#^IiOpe5Kf,(rd.q2?lj
%LkBus0)<C!Arbkg7K_iY/khYPLm?X=ig*\d>i(8Hfod4ER#/R]>E7@1)rcbkWY:@[ka\rnaYdHi`80?`WZiVrDM^WY8e&Cr'@sh4
%g.B.07$!M\_1fcg$p.?X8;i0."1N.TD\-AH<ZDO@ZTtF)CEdkm7cK>]3F]hX',RTu2?odM@%:Rd&o<T6Ln*Fk2S^KadR^k[nj,SL
%a<f3m8L5d>CeH"'9=U%uG+;/]OB<\hOpLBhS&6^:]TL?V>CpT`MEqF9<-EgJ@u*.h8+JNK,%VKa^(LY^<%Tl$LaNk>Kq*Z-Tli`8
%^_[b%>X(J^^c[9W5NZ?1LD\qN-R=E+P"(.H4*82Cp;[bdJXf%GN\"_m%0G4>KjW.\$OFUG_OFBd^bO6VTgnM^2T[pL!QIJdS:HZP
%RR"3\X5ZQZOfdsYJo2<Tlj[3(6o"aO#X4"TVU:EsC[c/8:CQIi`?GGjR7LT=:aS/(!\f5t1:k)R)dG!-OOd"O.Sc(eNAD/+%fgKL
%X^*+WJJamY?8?25E9OSCJln;4j!MdfYqA#@!qGK,g&oqsiC&KF`"NCu%*)k7ru`]l0)um%Hr?V6%_iYA6DLE\@U#&eaDQ>mLJjd]
%MHIPO5_20D]Ahf-L(/jPSMEsLN\+36XG;GA:uK9l7dM^,:2Mb*9#/(QT`uD\jr=Ie&gW(o/p%9k&'$.2*]7=2&UTU!^ESqKJN[rh
%'3p'u.]Wp5!?K#r$TC][*g=_Z1n<r0=@LtWj!56-8#S/)milGHeA1WG64FJNMM37\a[c\q\Wk$_X5J'c4ThNr-Kb[61_RQ2Zs'3i
%Yo#BTBZ&A7S3r+^#U2_>D8:]7'!(B^610_-S/WW1]f#+X:/'GoUj<1K#,c1>1S%g[?tP:]'gb8>e:rTb<M#Cgk^]?t,62!-'I6_*
%3AgsQLM$a]n:q#q/_2VlJ1HH(B]d5%C9Y_\X>u*iMeNbCPlNqYH8rM=*`B:`BsG`J;P47S"Zb0=Js5O^n0oc*f(%c7@MCf"8ZlcH
%?qa?`LMf)jg4%uP7Aq\P5-ho<8!]#KPf&CRQ@loQ$RJUR@ODoC2%?+-N<0rIXC?g)1V0g^SWbkfbZF9`Z":%C';p1;c]obq^t#$\
%/Y7d-Po[pYHmTn)<i_Bt6R@j$N>.VAK8=dN*DV!lWE@^/'e9Dj2">Jogk_G&H.qm?1K6Y8<l:rU/V'_:Z;LsFPm'\]Q!'%9Ls.gl
%Yfe*E,T+GM9&PS4kR"V/ka`$lUbl1\CqMQgboD^R+3Ru0Q9;,T7LDr4NcC5Mc6'6`.C$#p4,$&7p&UE6<8ntS`1BjnI,X;e/LNmC
%>JtT).!%dAJ":P=;(>uZp&^p:$)K):\3<"BXc)kFUF>:sls`ZD"=FG2DZUV7eaY4_)j*2p7H$_+/7U&Se.#+od&mt%,.glK':j7k
%WBY)ki\44)E3LK@OfSq$d*bJ362GU=*o;676k5,#6J`+_:/jQa::t2O$I1PeP^nKu1J*shX&p@Jq\(JGPL1$08NG+O"+?\$=G<r1
%o7uh;nJi6_,#4#X+HCWMUbGCMIg[T+AQ'Z_I;^sIb5ikU][uZD@SWC\KHMT'c3mAk$%B,smj8JXa*RjjI1bp&Lh*e@Po;YL5_Of`
%9<D1II>]'Zjh0fYmK;P0hh@bh_PVi<.XnN7nP82k1o[bXJD14`B2XS6VB#^=&6G=-51Zad7rQ'R&j+=%6qBLfmm)ZB"/RFP*=ANt
%UWAB'c<t7V3l`O67*mfh6:)rMj+M5jF%RJTs$#9HDZ_MuE/_iUnMs?6L0H.5L*m:9f7kha&K-X>(N7:?Y\ZU1N#)c#PrTjIpBcZV
%!O12a`##.%G)'Sd;DTN23)p?BBTs/`+`qN15r0QK>]T=kUW]lifkKK!o-"0]WJ$T_TDM)?2s%OVU/OMo*(f12aZjb@Zh94JO\!E#
%#fVR$*;q&D"eW@OA:tp;ZL2foW@1/XD@eR^[=kkQA8uVOY"])[fWc#Z[Zb7==p(lFar[T;,hUa*D:m+Rm`Pn#1.qHuB]UKhc:&59
%Ns1[0mi6@\mROq@VgAFgTqDRP$,f`ddhUdmYT,tp@)[0##,'9!_DuKHkJeZoQ*T78T]K,Y64L6T=?-Ie,_>`D>T<mOg!kG.kcFuX
%N96ceE_r9T7Y>[VZnX85`6erAV8Fk%+psm5bec2&<eq@Y;%_P*n2gf:$Dj8m[43\=G8"VMYWE2[(dYqT"rue0i">TiNK^:bE!_<h
%FE64TI#XFCB7c=ia9.GB@e]4\!38bT%qF^COB@YGgXAFYL+su%LaIqfa,)dtR$/*9#aA,6J`iELD6--bOQ[lsF$_0JRUdg5O<[`@
%Q99dXE\,8JejpHL!X^s81%I\+3!*=D*L'6/,\!S9p)EJoMB.QoW1_]4fc]eeO?=l7P!/SppH^W%[Y%AlLcLbmH6o'#ZDl4(^PIe?
%+GDL"X`,7!'S@rV3/<T-&7JQ(SBOaA8)>m=,mm\Ee`'$6VF?+pcKo&`('<Sg,e+faE!!o3(to&h%9OF:LPVdI=s8,U+<gUr*!nZY
%K`X\j!DGJtbTG*7.G5Hco@/$f!Z5'k,ZPE[P4AqdUYmFi5T@Y\JT=r#s!-IkU*LGj6-i-r#_HK1Bo##>`"%&f,T);bMiRt#%JkRE
%j@Z%bJhfMUrn!Af&?\b?]sfUIKh_SW;1QP@nZ<dn"E=RqaU2Do4C_eN6"E%<==ci5aX><*!UPnJ<]C2?@q4.$KK2WE=P+J<ZREVN
%qC,?PjG\Ea1hK[BPBT#r!\7I_'2K56G4@#9*k-1`%kAS37KHG@qZI81;Vhh%$.>pT7dTh;^mIC.3MVao#Toj:,Y'[J5pAF\'d4BB
%<FWoi'bc^1V]9Z;>&l1H@4?daEZ)id=e[3D$*I[27.h#-O:!;+!-*AQ,SPss=!a.Sa!*UHi1M?G89?p^;JF'DM.J;p(ah9VX1j]p
%iGaB"cI(]n%7#sE/ZcD%`Gm-#q/Vq)ljK4Wn:Mp79PdGecYT`A2\'_GU&fG`9?tI3Zt]kFHlJrfbBdQo81\s9fGk#$n>&N9COF$R
%h*=g.%EEPKcAVhMGmM'b(;NEcHsRJaL_H(7W>/M[e\^"rK_);CE^E7\Ot&e:QUK3DI;X^)SeFeYLeT.26*`/:,6j<s"XdCta28ep
%`nd'A]Na#smTKk$-D;D%9LN@4Bm/35E%4M-LN/<LC=nMLckS&sVF?$j2=8i:6D(N7e/$/!@gKudL@,nS?=/D)(qON-&MO!=\>\ti
%@p3h"l6usZ8A?:LQ;9EhiaPB38RbhZJNI$AO9)a7@9jI[/96Fu1jtY3Os?g];P)f#/X_sL*@9Df)amUcMQhX4@AD2g4tTHsA*AZ'
%em"9bE'f:uKlMo*ALS$V5&^ulNoD=X2f>^Q@qZuW'(JA<U7EeDpE)0NE=[l#&Wp1dplL\@iFUVK2TR9+ODP^MQNm89YfIY#+bbRL
%fS3gU!XQSC0OXm!IWrrn1=#+4E\RVJ*5iIk,sa:s.R?Z]d2uRHS/fA-a8gP3']:r,bU%Hu^I.X-Z<s2LJAc><;ak^-i-:t.)2f.[
%Dl7a4n;X,[K^p]HWAH%L\Or(-RN.^&^K^b?$8HL[$AWR>ZU5>M'=P8,_uOk%H3!%-.?6HReBBBp&obj7aD'AI(2)&d#ccB-:3\:c
%-50oaE]&g#keQs*@AekdPd,(V-FU]u+c.WOZF.t^NUu7V,2u&u(_`>N_u5[4cO$q.%,^,Upr/ET44Xbp>+-)cS)E\*36P<qU<,.G
%+gZ6kWr:(,`3.)0"%*'n?8MrqUPYfnn&:+),TSo@<CN(@`'u\,j!jSWl2gcFM@sQp1FS9[Q,^1b<c4)ub@2.*X^i>oOTM4JVBT`6
%\/SqMZp9.oq6KG5/WmtuY^Wmph&<]_M^`Ja@o@uP"*f03Kd,W3=p1Hti#"C8V<m$tE$OENTYT+a1_)tZc7DeNWP5@nndT%INHJd`
%^U.[`$$O=.9+ZA+9<NcM="i]h*4TZ[f>QN"BN4?jjc!BOUn+g0#%j.,:KU7UqO0Ce1]iD89/9;]2eN\q#ZR[78Kn^Y2@tr33B/oo
%3h<O>F[r#i)"NqRBGmU*+$5gD"?3Da.@RTOPdD\jdO8#R$lCZsj#"6p\4g[kZ&ngB(-Y[8<,l'AfKu&m(kY%pS>qI)2M&(`1e+,e
%jGIr3PA<kFHA=^)q0MPQ80/.GPsE2uhSQEkEVQ@oreYkdm.+/TO\EiLe'hD"F,^eM_rW[Bei/I?JYa/U[L_fe#[!1GW;%uP(3$XD
%mhRCF+UkQ1&e?15V)Wi&[jp)$'f^h*1DrJ,Ule?BN,T4=%V]Kl^@LEo^I156Ii95Q.]Iqjr'8;c6q`hc/;c,/Jj@Tdmd;_I2k1r8
%/p69_5Lq9JA-B4k_g)g[kR'c#i5c<g]%CUe6b.K!%q@NpZtPB!U-]r6d'FA'??*'i?#`S:=U)V%e94k^;T,=:V-ID3=55ZL,%c"*
%BdQ4n:BZgsW4[1S#SBN6gCYmlB`g%`_O'6V+te5I=d.to7hTs-<gZEkMHMOj-=j;h[sY`ES+nHDIqp>FKNgGUT>>!mBZu.Wi_mK&
%'bA5=-LO*AW?Yr-N"gG0.F,6NOs'$`3o`B1<d>gOI(%H1NH>88%:j&[>fW#7XuOoH3"?%O1JGP_'(h;?#KIh(ZeAc76hDCP##CEW
%b;;;]'*]g:?3rPFc7=oXq198Q:%jFKb/o=XZ5%*n:-$iKDP7uh0"S&NM.L6B6q/4JXqKVh*^<Tsc>Z^F"f,O_o<iX78OL!gn1>59
%)8RSN"tdBiRXID0hQk:n$8[\f,/_D,-^X>1Ki%2)P3B]Zem1'52h>ZV0TWW1e)QQdU=kf^,^r>&7[(sR?u[_?"u#X8.X'TU]ddKY
%nDtMt08!!*,\P"DdW4'Od_`g$S&j,P\7$ZucJ)*5_kq8+,?DU:dJ-[fSd;?(-I'$Rfp.UEZ/,I>1%(*'ghe;Q/ArjacmMr%(Q%`H
%XKWB*8dlgbQ6smIX,X&KHrj\AA#-X7s/hhrM^2MmSDP:2J#J\<+fNETbqG,6aTr"M,D7IeSj\c`AgEc/(-Of*k2.[Q1YWt5).$#F
%S[Y\#EUe#*QaL[ug#>q`*(S0SqEo](A]]81>0$VF/)[fU`ID"2oC"4#;kL2,rS,)4J,e-hs7MG&rr#d5YP:ss(U14oY;rS=MU)L:
%DmRAV'XcE7>)uZP6<,2I^#qd99N1&oRM2t%UPunl9Bp%o,:$GdA*fDV0+BJAo+h[Y;(g$HLgi(!oD;rl3CpXCNJaB$#+EnJVWYJ$
%6B]h,.;V_+S-i>dK@Xk;7P;rRjNF\P/"'PIMF0/\(b*"Wp^0\;6UqiNGKJp5;pe00%D7\5:q/<>5[DT9gT=]=*jtFr4cECe#L.L/
%XS1Jj=&HPp\LD4HeH3%Z\[q[TRJ6EJ'U7ZZ<H=SN.op<IM;/o9D>3aG8E-1aqTqf1Z696`Rr(<3:KO^/]0o"7dc]_rG[<\@!!m;%
%.V(+6XIl?NXi8Af%T&I:.-R"C8iu#^p3)\lIE.RV0B]5N`ur@1+HTJ990!MQ@UY&/QP1UU3(B<tSO+4*e7t7g/qUC#JUXkL(Wr^Y
%l#)g)*7%2FFt%ajHmVpL/?9"B`e>sL94U!4X)qX?`OX.giKm*p"9n(,VIG;nq&\m'5A8@mcXBfrbGKmo<,ChJr17'W>ZJYfiu/Q9
%Z_XMab(]%&H"X#0:\).ZQ[jHFVTKpfAP5kM6ZW3LS9,!U!fj@9IaoJ@5bHYKO'6B&"5n.?[^uUYp26Zs!Y\Jo\#=.smW!YFAL-sf
%Su=OoW)3Ch]IKjdD#j4t3E._MF=N[P/L>De]\+-,MG[M<[l@:\r%sZ^-&>d6<49tu2,l!Cq-K$e^DT9W>"=")Mc\-1V7qkLStU6^
%r0YX2,W*c6pc\@Nh:8F8T#%km\&b:!H:,#8$o6T[F&J?jF33fi.DPhMqh6LN([&9rSeEa^^";<&jfu'a,Z@R_V]#3?1UF4QC"EUG
%WtY$h\bZ)LI;ob33ip)fl/h$241HH*;s%5A/T#a/oH,,S0@.!Y-f:sLnuqd-?fA9)#$SX"f5H-N>5N)e^N/nnlEl"\=tgB&hP3dZ
%E.V!(@N&1PaQdpBTgd%!^-XqOiC>%RMCTl`!Ife>+:Z>&r!3>&7Q\ba8a!;+Va8?+cpU:qOpZn#Kknq)Mh,1s:W'3okW:a;#b5_]
%<$gX!^!#)<acIgUnS<3fK$GBJl8=^CF^dL5a?B`nR27Mcp69OUpsP-?P1gpgI7/HW+dXFMW"uG#`GTqmh'<>ArtQ9J&9YT^boX<\
%DZ&/XR[C`1EAf$.cRY_nfKhg(4B&4n\JI]4-$ssEq*rl]R&>JV2JjCB[k[&j0B9F!Gq,JKc"\_>FZYaR>.4DkIX]h8VA8^+6*ffd
%b$730<rhQ!o^WXW]Dt<KKUQeEd5Ml;*1;BT2Z<5peX02Fg5D$h[gBp#6>J5.h<U\QJNR;te!E&f"lB38MI49aiqE*dauT,%a*0/?
%FF,EA!<,28%_NPi*]8c*MSj44id'L1],E?+OamE(f@LPj_'s=5h0/^M;2YAGYGrBM]tHh;WX.Y.la?Yj;jEg#YOk[&ea.<P.iMmM
%qa,X:XM.O'3Dc^1s(bbFf>q'K,6WNkjKnS*%p1#H-;*SUe\[@Gl[JkBBLul(Kc&kb@PsE;TPB9QZ"u`B/1&9ILu9$*5Nj:`6fB+,
%p79Y=#&mPi#LRKJ'nIh83?_,Q-QKd`9iqmQ?>*ZT/KQ1=PR?BBg`J5G;XM/gdf^YO,:=O5D@SdR9f-NfD4!le/h=p<aiC8EEZ5'+
%loHN9!N/6;Yr\#Rh!i3gTfQjm0O"qbLEQr*gKtCM\VJ^M\",H,8%*$e"IC+5)/<1gM,m6cYGFZ,YYXI-+s3UZSQcGsTKNNH'G;Z$
%#>u(A,.5>l0drD7*+EOi$P.4IPNY;$I#0>a2%+>Kf.glnE=^Tl1`?Fjb,1Y&XE]HE\gjl>J&JQ.UF:Bie)anpl(0\?ZSK=;D#)\m
%:Rl9t^Z$pOnPj(\qcVsPHEkHSL>,bA<[qO[/ne4%AHet7D?Ko*H%;*AV&1/Q3$1JLWH+Wi3J%Q7O:csJ2@9TucC[.\0a+O?$q_N(
%?s,&sSID&P@6$7aRcIsE7ZVM3-aj,,YuK5>&b8ec(EtLFV\5d/878h<WJ:@'On1^:q19r457)\d:-^AtY6cPfgWj9Wm??nFRq]U-
%gt]3(/HkspjFYNB0MMW/N+$]WI.R5cg:=+j+n8+l8LRU>`Qh)(3B^/LINfCKO0cp0C6Bp:IC&7kcr6bHg"0rK1:<l?FR*\:,EXb+
%R;%b,`+I^X3:fM@!_(?2nJNp%ZB0^MB^p=kIZ\o?FoZC$e,:!_.AVBf;<Fgmg?%089QFSlK*:eKAS8%?[ma[5aLk6.&"-?^`@DS#
%XC<fsM\T;eY[!Y.:@R"qM#LsrG@hEQIQ3it7pKSkeO2)U6jumkb7h]k]']C`GZg("7\r!pA#\@,N0fm!1nna4W*\"bXRc<WE3Y!l
%B]66dn:n7q=L`Dfn]S'%d2Cj6pVj"I&9(<NiTQ8h.s7k"UtU,G-%W:#CF$3dC/S6b=@^=Ydj&t';N\CkQmjH$gj1VAZG.<\g2PJ`
%Tu7rIDV!s>'pbo.H2nd1/6,K.jWI/MBo.j(NSA>,e%G3768gE^a%us+E935<jaL`%Sg$EY_d)Fr&1K8Y?.E_414^1H::u!dU;:"7
%Mgl8oXue:>"e)m9AEq_GbLDf5`\#E)2<k;JjlAc8&#r.IAd$\i8'57l2g_^[O4H$@-r$s-MG"P[WN&QQZ:+&D1DgtaAh47K'RcDU
%#Xp:KH!(o&J\8Op;V".Y[01@<YNH;4f2]opKNW=H[e%`^F-U9Q41BRH'm#@GpZq'`\1Y\A(:T8"n'Qi0#$A;N-jG&6.nJ+k_3lcH
%b<A]@hJns0(47Csk36"F3X6tm^Laf8(:Ed:GrWu^AHUSR!>^JZ2N@.D/:LXfUQQ+H/bc)8bF_Lh(V.auK2*K+f[,bSg,LEd8Xh0a
%DAd*.[(&e4Q\aiL7=b\9HVB`7X4OW0a?[%8e*n.oM,f_UpsT@H#9V8qRKF\FVpIDfkO>$<6"r3#]rph8\/o\T;s=55jl2X$-AoDA
%8HC!\D0@:a^A$AplOjL^Rob+]eY4un<E4CI@hmF$5R"9&[q23CgPY`N*YR'4fbd.88LtTSR1RnVI&!%a)L"o=7LHLa.]';*C?DBG
%.FW:S;@Qah[i?XR1FhkED:8km=m#F99CJ-8JsD)fjAtG!;GGf.D0C22J>b36`;KtH"P'o0>_45Jln$+eMCJ%Z;f0%t5?*b:2F%Zt
%f3/jn^7ct=Zbc!?;FnqTeJ)$3,=],d4D\+BI:[ERB8$Sgc:&\ok8idbC0UPqd%Q&_h83$'9ZVG6VN!+($Q1IV$>c.;:e]h<@B6UP
%dkJFp\E.+%B2UM2)+/C_Hdb?Ch.sX<+h:YA+kXH>^*dubY9NjqmP^[JaUuL/Qg]q[+L<i)r+1oi*FbSNfPBGJ6(uq)(/c'"s,k:\
%3,BT`P8J>VY:UqcJ\p=qP(_#8U<J5_pg'oEi75E=^0A$2D/I\+LONkbY*TqUT1&q>!bcXgj>S/AI1;Sbgdc`_V8j`+m5CY(9tK[W
%&3"0->BE-5.cl_f:9j7obUHYrH:=FYat]<fTt(ND04/P]Dh7Fr9.FogbZ!c^6k9`ua$=!:bJiaQR&DG#P/E.#Cg-EnO'CpA51gK/
%I2tY$?fU#sdu#X'n6.EnH["`FfNR.T9i^:1l"H%sTTiu&*)9L0HiHo3'Si4d*--,dXd05>96b@N"bO&NehCQ',[r+SM>U(k=fjrf
%id,orgE2Fr>I;i@[%iqRT/eDn$Hp&>%:p/m;FH^6SY.RYg6/;C%h\_".&\-AmBiWkZ;'X6-;b@`*.iZuqT=9;/Dd3k0;fgt"giTi
%n:$aXSq2GsI'qVPUcr/p=@:(`R:E/uZ-MI/^Rc8;8/\co8.M\m7(TcFGaJ=ehn$jYO_t/&p;Uj,&Hn/N'Ykh8C4TP4adR[5L]FMN
%2G;tUjH;a*Mbt/96MY6`_I<m;X9<'WM!f6T(#SJ@XSH0=_"Z#`nb,d'?!)N'G6,bf*a&K9As[ht'--m&Z;/rIHAh+AI@j(#(nVtB
%$\7(GT#uj\[[!<?]%0q)Vft3\M%-Y*&B=oC>?=s[/RIYaL"0-0AVV(Ec;OU#,_6PDE<Og?p"Xlbd(M(ip0H7:U#mXLj#HCS-mD_V
%GosB*[`4k0H/Z?gBJCtH3E*:8,IMaQoAT3uD;?gNpu%O34.NhFp0$C:dO(N79]qP4>[Ojc0E"XK5g%jRi]`r6\;->D&1Kob!/W:b
%4.;GTD*"^JiEQFii85]QH1YBm5PKM<g&$6Nie`I*+ArCp:,aT6=Sdm(MXE(%'HT"_j=-a+k3dGRICLYh'QL@Z;jh/H2RK/sZEQ[=
%-:>@BJ3$gkTpd$,C,g#(Wbd8b_,;Wo*6?FRfpUO2R[)YNpg,/)(1i+WTIsSSgKVb>$^hS3=`XX&f4WqlPIGH5\bD2qB=aXaj`NIj
%VR$f9/1k"h[O!g+_h(a!B>Fa+j4TKk#YA+@r-ecm+!]a7H'&/uK>f#fJ/3Z/:*P!o>X$!8,WO`qX>f6/g7%D([CF?428Ip(Q+uOQ
%]2VA>-n9kmXCFXq<B//gGrsq&18dhp::5('FoekJRf;VQ1:nSgfc&1EU,![q\lqukk,Z5hjAF&Cpdh3W0aT\qig)W@<80NU=Yi\Z
%VG[Y6E7'o(%*`iAJoEGRV8-U(Cr0&^?["=!E&eDe[Php%hT\(+_$mKD1_C*.F>9`@6eVbA&R%lMc$L*En`?"#Z8K]9E&'BJ?5(/"
%X?Bn:A8i_XF2SZ``\gi,*WfgR..GP2:8PDjC\or,BDUW;6ccbV6m6;K8p/^TEa#isOJg>f;9Pf0in$A2B59Pe1eft^HqhTi=\Z?(
%&Hb(Ia3DI8_ali8#[_JHj!gUVcAgiTVX??YD60ZcAHt3Mc)F*n,QpudO'#fY0"e4$OR6!(YaapZ>XqRq"n0Es(8d(QgH*=R5X*s3
%f&3OC5&:PWPZ$#$f%O/"dtAu&^tPT[c#nm.Z]n3b(CU3=jmrGaPJ7[d^LuoVDK\I&bbB5JjXHfY\Rn1c(JR0Xb=E]C_59%049?$k
%,,T.^>^.$4('D3R=s2oG99"7LY`pViPp_b$2HQ,gNE[D*i5H0TKC4ZrAu,A*PTZW^%RL9^_;7?ISFpTYUF*R*HhgYl'ard>]m7@*
%"h_S9gURWc+CE"_%jq,Y2+o:[<cCTI_sg^E$`Z#4=X^f,1W]fe&l0]N[4?ZOfSF*-;3eX$FbAmM5O63mKN8WWirkmm5S6/,ZO:q8
%27\Xj-Hpo2c-dQsmnA!r?)l`ea)&[+l`6%ue=&O7";pT$EOFrm\FhX6c[I7'K..SEUSN1Z]P0LPHQM+_Po^8Q$?1(5M-.b4C8eAh
%JPOKl^<e4?.\p;pb0\K-8NkGb!?TbOq+aO+S![0@.,]XrdlL)D6A))6EREdX5U=jq+:,R,ilVpY63>]WI_G*n&-O79=a04%n5;#D
%=]Il"gPe__O^Yn/>^kBjaF[ca^YNKiR`$e";b2Wp7P/po2'/]",IBGjjtL!f:u>Mfdg,kI^kX:&)up7%,g\F=,iV%?qBkX>`HBad
%1u!smep\=VD4@uA3YB=9N9DukAMot]3a%-T6Uj>W8'NV:[KN;Mb"Oh:rGK&#k.!Vrf;@=d!lV+dq4ZQf,j(oko82*n''gl&0G]qJ
%%?*.O!4j2!Y1<m;].pg=CA5-;_tduGDQEjA6l9cc4K>^qqr,uOomrXb''Z:9@+>Y@!jB`o9EFaZ!%&sBa?-HXQZQIFIm]MZqIsNL
%&*(>eY"P&6Ctse^_&\H<j8^+=JL'VL3#5I2AlSBkZG0KELY[d@b/alW*F3%dWhlH8fgV1,FW0<`$L;$sR.%J0Aaa1+ol<`m<PVd5
%,O2:L*%=Mehg)])LV:R$ojOud,+ol9fPOI<"]K]ehTW3PG=*>(h$GN<.*9rU(-0m)WDBH/No>Yu9@@#TGKNdS+C\:d=)%m<d84Fp
%X_!++8*o)8LPn%&<4Q.-$,m]!BOWJu^G?q]i+o-&hgI"[FC0"8LLYkNaO,,Z1=tE-]iVjN4g\POG!aB^a0H8>]'38WPZY4=o.4_G
%8T0`[kHiI:84<iBRO<BS3-KYgi_*c!q6?BQRmCJ;mlk!?j;Ugc6SP\?bJp;,bc:6IIqHkYAM"\DG?*hZ+D!EM+,.kkQm"LFA0?HP
%b?>(dEE1W$4`(kRl.+)Ie)pK*EBi!im.5"AISnMkX10XULnV\^%fWt&#6q</.eqC'@G'C+mMCjXChtE,ULQ])_*$.3Lq9Hok@>U+
%OALRtl><)GH0TnEk?1DnD:GTo>Yr_`R^hk#E#g2\CtJ`W^?d;paK&@?pn#3To![-1>7O"5[gu=a>&k=-kii-MnjLbDK^O3(iR-(T
%S#NHfl+4eu]<$1k#0`Aahp=X@Xj>D4ctfB)aaFa53PkJ).1^]OXRdESa'3Dt/[tJi+.H-F7!Dk8;eFo\3*6'uG7**"_d;HNd:SkB
%6DEVq<"`hH0b\@EL0\=Ejg)rgh:%d_WLr'(UUs0dM&uXiCj"Lt+B:-TMG*io:JooJ2\jU.gj;!?;fsq)0beSQ`/1ir'2bAso$rfZ
%5$QmP9ZE7h2ajaoo.CfHQ,nI;#Qu'i#OX>C)Gsm//D@#rQ^\SMgt8btrLk!nY3TeE"h<AmT%G:AFQV+P%YpaIXA3I&Wp9$MRLboc
%bbY+2JUJ>="KP1bCC\fkS2<d&G$0)q/Rs-,*gLWn]ZaQhl&4k4UWp9RAh>0B7**@&[cOXfXYeeF(UYWh'-L*^7`MH'BsY,LOlC[,
%,W)$(hX"H__dWAgOCm\YgY'\eS0A>1CGr5=bAJCpUk`+I+/:*6RnXinCT#oYa*fS4ZGMUt3NDQ8.\F:.&f55jPJ0]qeRB$9S)<M(
%\ca#9FZLoQ>o?.FDq76#TRkJT9b:;B3Sqg9jt(f75")$XjseFuPo+e7mQ7(qI64$V(_#ca(@<RIHm9[i::fq[j7j=:SkLLfKW%/M
%RjfZ$rI-cjmTCFYppiM]7GWPC`%ORu"/&<HX(okC5,/k[2I3U7e5QOR,r6F:9bh0/)nHl5r2:Ogc;N6B"[5A]MC@2VDcTo.O$RkZ
%c$WSOFmGZT)iEugg<;7G]b^??H)RD'kKr5:l!&8aL:JI^bUKcUR64q<9t/\LdFGX!CV6QBE5bbYaF(ED3KsEiRl0%Y]%B(7(?N"C
%9D(:5qGV>l%V*!&T$k4W"R,4.8Ko3Gq3D/)@_B6,/lsoi<Y7J$aka`o.r@-(&7q\UO[-G&Wd;m@B$1R1iabQ-f\2slc(M`iVJP@J
%>*"h"_X:oj?]MRZ4G=rr2\I::<GSQnl,RNAl8;^jG6=R'oqOC"g[>KHr<)d%<R]3pMMb%tS=M,=HkuPQQe=0,IjF,agV1cuqEBZF
%O'8MQjQPn&iDZuZ"4!PSp?0/;1Qg$'P,ae:pj_/UHGCTukZR2m(G2n_I0=aQ9U+NQL-nuH!WF0nO1A=r%.%N=2D"UC?cSY^X;!_Z
%'B[r\45A%hPX9#KTcJ2gG"r"_o8Qq/.!P@KDosCI=Z7#q>KS,K^TVZos,.h/1b1VrQre%sX"HBk-.Z>!VM9O!M^**X;5Q2t'n<^j
%JmmEoMC!,BIC`"(TJhtb)cVR@MqL"$?BZg<_Y32K?=<(qj;RbTa#ZM_Zm=&nYM>I914W'.HhH,J8p's_C46Y!U,F23VM"-jbHQDQ
%[80k>##/.QkbsK7]@3]Qpj/>)^Y=rRbCn*CDRM>VS+NtY8H.\i$nWf0M5D.:E)cF<d?HWe[J]l<3!t@Z$V%5S%[)CR)3,&2mN7rt
%4W:%P$8&9@IS@VpXNgrWcaJctS\j.+MNHh`WA(3J3OX_3\hp2?DsGBM#%Q$%r[lhP2k91#9Ve,_VDWX<#?=FhYT',o)@gOVA/)HT
%Q62TC>8`aq@4Gqb<=(<72C2ZrDM*1G8%L#c''r2leQPt)XYLP:)%I;%)EY-WpPOlPN)00WgQ4P)h..gZF]WdZjm)n'!V"M>QA4n2
%TAF/Qm+:s=A8m@ST_2tF>`"28^im+f-[Q<s!tM1KlLXLUQ1@hq!lo>.o/3<H_(&GoL*M(O9G6<W\MCEk2c$k;NpV3bIOPLfPkM-9
%\0<8T8\ESMZeIoEKYj+cI@==l<A_0VcF0RYJ,^@FQ0HOjGIF:AUhi_qJ8@4RX9N223Q(pEGD"1e*sIHbHp>UFhTEllo4(`70%Ku6
%$G'+>FURO^CR?6(2o##>?jPu1HJ]CKl4KaK(UXWjFh:)f36Q:i&qf1h`-M)]jfWIGhm*$[!TcjJNpb9V4fta]Bn#VbQPQ@-jiGDW
%:X6abI1mOjN(pJP'Zb$aO5!r*p!Cb6pZ?.Xb!BtK1J?4I%d!_4!53=>pE=Opd+[<(&HmB:;8MjE7Eo%R9?OVh^H!4(f5OGH_(@42
%G`anAdsglKn7qF!KjURm]#GP?khMqg[?lR?di[=B>NmBfnKB9b2hU$DjAphT9qs\BaU`?3.@Dg<p%QsjB-9_t^V1697:j<s-$i6c
%+tA6pckBQ2!q&Q>Vu`$alRZ'EMcGuR16,-H730=4VA,S*Q=%Jk>O8Qt#UGk_j8!s?I9*+i*4OXamUg@;U%Z7A8X>Ufep$Rr.Dh<]
%;>ollOOC<NO1!Z>X0(73$&p[60kot%k6D2Z(K"^)5B00)ALkXYeXn&O%fpJGeHr#IV!o'%$et9*lU8GUX'u*["Ltij;!N^X%Hft3
%f;E/m*FkC0b-3n3U/]igP'UGrN`hf,X3,]=AV0\Y5':5.5*p9pLO@6aM/G?PF?_FQTS7.3q)ikX])6[lkASA%I3)3+:t/u-bnfR&
%1Rd(D*B#g2B/".a"`,3';U=p'9+?WbB-BOV4_DWKBWr>P5M3B9N=RY>RbbLa0[e8Gc/j_L?7h5^5p]9KJ5B%._gC3.&`RD%raU64
%QL[A78Wk>OKT9Wi/Q3+`Mq7ZNJE;[PGhM4g=Uof0!ODHf.7h*o1WgcCDl.@c'@JWV8jL:5?:j":AQsT)hJ?skT6>4rKTC1he^RNE
%rD=SeCr7-FSEGs5?SWRRDAKg*2jE%0.ueGN\dL?9!rp=nW'uX"pE@#=]OMUom@Cj&=qr0m>!D>o4@abp$".\kcFQC]3<E:#$!jZ_
%N_CLn<OuE!eYdfRbsQ4qUGVSRaFe(32V\2DPZfhSLGMUhp<?'Y<793B[4GAK.GAD]+FV=ZSS,7<.\]+"#_b=3A*eeN?7G[k$@K]V
%0f>\:%QsrX-,M70Sk(9/_9uR2IrhpsV6j-Gku`=S:Id-t<3$SMH?3!eTaY9sF#o&&)X)KTX`'H)QCc%Qf\AMU?a@XE+8/q'kH89'
%!#6+n$XF^(U+Y!7/,DH>&LIYj)9"+_BX=ckGt[f<e)c,Q#^l(b-1p0_U3#XE;rg/$H+c4_d1#`FAaE'.=V3nPqp<(NXA/>.Dqg0S
%\=X`%^0M@gDq@t8a5tgm&V'0Mr:\TX/p[`ZC^.;:qoNi)kS$J!>Fo"0Ir9K,p=#'`UL&.ArF*aslgCjH3k=*`g%<_`os-==V[g"N
%5Q.h@m,>lao;e]:XuPeQT..nB(r'n<=_lSf>6haW4j@OJ+5dFYOF,E+DtX;rN2j3g<Biq*nsSmdl;[n$dPoSp6_Bs[bf!"7_28,3
%n<)8BD7l>VYaR22k[[t??T2JajA^I8ga:%#$lAY`es$<0;"<n!g/m@Q5)rUi20a#!.[U0S,VG.T/9kjYV9EU$CsPX,e=C48+?a"J
%f'rmQYgdO6BKG(%bVM]pRIj/3.Q[S?"<-GZH*1Vmj]\Ms=Mc57)g->*fkd0RT;T=kaKclbMjWO:GI!SC5(R_^oX\Q0oMSZ@>@-!\
%DcS=9N,FW>377WO*o2D159r00j[Yh-#fX`%8-DnheQhKgaq>YkSsuMH'<?qP#nI!^OoC;[6?-HKYXFd)k(K1h=/Nsi6pf]n6HdqD
%[E6baW5P8bM-8,@;F3D:`Bq&D%!nW385sU9(JFIDb#UOrbMtu<k;"]<A+g;+mbj;\XH^BNTeY#RZ;R+J&n7C!q(]0m@PM;g`^l^/
%U0NI4@s%hE'NG)lUL3V<.(Y.V.,!L?I73A\osm8UW4cj=#mZ9Qr(0nDTYm.-'0k!/bT#:&qkjr-Q5T"d_6BM5-M0$[3q[KGVo6QG
%rF=)D+@jREAX^KD$$MjaBkpL$A>s8-iufn2"t-+r8ef[pNA3Su*CL!q1Dj[h[[#a\."81[[M)V?5EY<>eBpAeeHBU.*J\!>VKoH,
%gWef)n_07gcX[)r`qA8HLu]'7mT\4PI$cu87\plGoiXmD]6Xda?$4DX`7W)!N':D>MW@T><$JpM?mM4HQRa`]M)4EMLXIo:+(bDa
%,[W_hDEqlH2Q:lI9e+"sijoh^QKS?V;_I*R;"qpUF&E+:ik(s8Kn%aaBFF%\a9&hoDk55%c&I)WRBWW)]dl2/=KPE4MpuCdV#dkW
%q!7ak,YG;QC/u)MP9jdY;7I5I@0K,Ebm-A*#`D3=AE\e4-Ni]Vq+[kh/_S=UA&^i'_$Hddo9K$"/`nWH81%TJW2j]?U@.\)j6L8\
%5=M91p=qhHfh1rfe\"(7S*chc(/*<57(1Q!ADb]SEs^itCSmK!6S*M-1TFrZg:%5*YD@L`gr\JUT-f$IP2824_g6R:K4/Is9/JFE
%nLI699^B()R03mS)9^YZ)3iU4=Q.6l-QubI"VNhVmU9",%D/%Sh:t5;D+4eL+/BUO%X7SEFI'7NVP*7QBO,fi`aoT=3ej[W:Q`\l
%/1F&\)slAA6tqtmNpID4FN#6nFVf!@YD#A#_'iIip*#l'#kYV=,^V71i+(;.AAD?Wddp'fgU@HhBI)g<Ou#f+8uRhOG+p%sG@tWR
%HW=;H_XKP?*N(e'PhQ8UG7R-DpSjdb2@!5]%!+mLl:l<U.IMQTBiTGJZp24os8,%YoUGNArqGOC`;uL+<;6#'+YKWNK4?=tqU!J*
%:);p_,_4nRD)N)/^Guq#muEgQI7,ZeC:X"h!d`DX=/d#spX.]rT"Ds$W)nl>2H1BH8`n0-/>#0NS`s.U[b\h^CABBZXAa0@iZh\*
%5B=%FQ5d8?OZf5gT[?!Z-WQ.a-$*AQ_kLlPL(be,q32/Tm-ok%-:N3Es2FqKm!'oc7,A"VW49e=MI3ddAQEB#(a&-l)n(b+E**#-
%@%%VtcU]LIgiL*XVGT]N]LDUYbLnWarQo_;r#cbbqC`gKmW"fWTaHW"6\#4';BJ"GmPu?4ReumM%4f2h%PNB_YQkpg2X42VFEE9n
%)@&KI25tB387#F&#Klp7]'fo*fSR@o)O?ZG8R9kPp&"GR,C#hm3!VF$V`"XFU6O@j!CW4<h7IUMkS';=qhV24H(i@n(Uqrh>9K)L
%1?=h&V]E)ijq0m__js*6Td(VM.Q5i!?^3(h]5(Th9.LA_*huF4KAgfMZ#jbB;>HluSp1B8UIRRZZ95`:""LEC0;`eoU;7O`/Ql4X
%!K.AJJ<R,2k+K1E-^gEs9<@`-4c4t>MgQG`@+DIW(5D5T.9Th>T*+*eP4J$ATi`8SfcOl?YY5N61@%P@rR3oQ;P^/8VH7p8YftA4
%L+1!K@7Ga98=i2IA[F/C]QHo`9F\OmnClseh?;?Qj]1Krk>:*0GJEka'ie,)D73;K(X)Vj/h4$khTp=nBk&Kae0jLrR,tri]/Mrt
%(m?9LIl?V?3S!!\#NjU_q_I'@F=$5L/>CfS\kG,_oeAo'?:f92?;,L(K227%2U4H#<B"]=^%:]*CF$B(>Jq91B4iLUVMb:/lT4"!
%h'VK'!aTWEXANE1Lo'"BP"kqY<rD:Mh<d5<F<^aJa1@+.dt"&`49R.9cHL_G.NS+k_&DR.$)XLA5@*j=o6GPZ7ZU`H_ej`X&Q9m#
%]`f:US>0pdTMD\1+mro6CP\8pG".rFI^h=*6kHHHpW3RUBqc961EmpkrS-C<e7*jDc"mAa><UTA/iWprZaUnf\pT]Z-Esui;ptsc
%$:sRI&IZ;S*0+b(F''OTG581[U3SnNIK+d[IdQ;7\kJK!nV2t8EL!g+55@=&(1^-).,<MK/@np[).js=J3dGRIqDi"=WgdRVc!"!
%l;iIg3QoKN,=0#MC8dY+b2%.?!F,6LTP3A6lNp*_PN5DubG/I1WkGjO(T.?L'Ye'l6#%D77=^VLEgO.1`ZLoI\_X;5c'=2/]&WnJ
%e&Ng$%JOT2\X#ZQ*N5n/'2F7"5%[=O`)'Bj"4#T_>,DmPIEqgXP5-4"^TpNI8*5t"&RWL),Fr2\BU2IAfPpM*Q%]b'J7tT,ZX9VG
%NOCV((r.=YeBK<)7T;.C<(T>aD6;A&rEIj,']rU^U1e*dA=pRj$q5$QNaSung@$Sm_dNOGhm_:#n#HR/@8oICeB*>YUSa;@>Ed$3
%q%R)XN`V(]T(tlij;c-<"c&q_\L-q;=rX>dh4A-H?W2n-Jh;8G9A>T+@-[#D$_1*g#!^oIPuG!r[J^]udn7%lGnoHQa/Ds!WADV[
%mCV+dU]G+2c#G)9,SOeO[-q4.4Cdu?jOZu]eBo90+Gl1+W'Z(R08Ec'i4]jgo0_L;L\U?hV3<"0e!'E+6#=P6IgjQUeS+Wm.'!q6
%88Z5m+q_N[B:mnIbXatPd,%TPI573:p=Vcu<W06k/@!P#Y6'#6\[uUEV0D<8;r<^3,4+L?,EIc>#dp*@OW`QKWuYS:&p^gQW`]23
%$`?;sq4njT1=XOA1P;mpnDH<23CtLSN)i&jG.do`8G?$%*,M"tUe%$,/I-,9XTjfZh8[m1T7V2S0E*6EK]plXRg7c5@U:_[V/<[h
%mepIqC)9Xeb::/WIn)D&.Dk;[@JLF@cTTZ-?T?A#^+YC$;;p4*St(tQc'>1_G/%EHZOFfP\8uITb-'B79ER(R3Hu#S>?bPYh3`+i
%nG8Y5dTL'ul&6pIq0loEO`qkUapie,o[$SgA22;_5<XI5EgNRD#sF+*D88V5007&3.a!VEiDLaf!'-'9X'j8Jh>ERh.]<$)j8qB$
%Y^apcF%d=M'Vu$6+:dWuM51j,l_I7a0WL2uC'rR&olEu1Nj0f8K8ZT.!TcOu`Ph]oB/`(-6PsLO9[TBE?X-^J4*WtkgL4+=a[M#]
%gu&/mjMN>s;gU';X@DuFDXRD^mGqmHJJO3j_2fqG[jR"8S+4q%>aQ->jbHb:6>`BAftMC,(;KLZ9kcjdX+6L<fI-6%e]`?L&`-*P
%0:HMCgn%4_+&X(rC%>`+_JLC\_e7s%/-Ae]=o,%(mWX9+U!7A4&Y?:fC43kjgkV\^b&!758$I,gC_)pIlf.n0jn-Z42Shc$i*:t;
%9k"NXYYJh#d-c-/&bkZi`3$AVa7n'0jrdnK[Et3BP7EAPQK_do%sF&#</c#819@mcfdlCN'!@-V?r"[fJa0fr8&>Za/t-$K3Bi&@
%qqd?^6\V?!TT0;iJua2CiYghB(\ppBf3ZDqprnI\c\G-b]7V2b+kTQZHeL<k*eU,">.Wmd9hH*.X+HJ->6I/h`Bp%d^lH@uTTl@q
%>KEB+YCV_-',:Mdm]KPL`,5Wo"GWN\O]#[co2T@g0P!scYc9=YI'cE<8;%MCE>ECEZ5O=$;Npml")C1pkb2[Z/BDUW1">;rHrT2D
%JD\:W9a\lTOd+it@G_17Dh;huXET[Ma<BNNgJef+R2DcK_Z+]L]UA-S@&jg6S15aB%Gk>m:9Jug4s]jo_]")+21M9^MT7<P$@$k#
%ROD>f\;!E4k4J*)1?@pq&-T1f?!"e@i6`sfOW)h'*PqD2Vgl$tQROCHJq:t!Qu^Ju00no9<)*YIE%0_G)OTqF\r#G#D9B/=V=eR1
%WZ\r9kP0)!]U=`=g'Mu;6mZu]H!j+=TR`/s7>d$3#Rtg,'GX12^io)ng4O?RL(f7_d"PLjD1c>IrYYiW:B_&t%o1;L.7j/X+i7jQ
%$rgX(eCbD3mj>G_>1G[3,]Pf/IN30:g2QXHeO8>#2&M9PqIJ[jSB<aZY("%P6!F;O$..pHYe"NcmfeIiOJHF>,QB@8&0LguD@T:?
%pf5Pq*jTOf%pqaG%W*"SQ]!KB_*2FMWt,CnZRe'0gG(iQZ!Q50$ejG\Nhst)\X]M;=_KO54]fB0/7$jmCPORom>8nG=.QJu2`52:
%A-YM%rVA#:Ud=s^J^XE?'=sTVCbDPDhc<kdHW@n^5O+ru['Nc3T&<f.;Dlh^YQ7OcB+pmdF]gPlp!Y]*)Ka%NE]d*eh];'t/!&R\
%M0,59hBT@&qk<qW*_S//gtgel&F+pfE)q`Cdc#n(F33);>l)QcQFC/lVHhtUEYaV;j)`dV"h30<juGD11K)\\6GX^-1KN\c`N-?S
%D*1k^gJ?.uJr>W556b'a92HTJ2&Q_&goego!cY`5T8B^:_ctQgh>X>CTOAF<pW\i6m7Bk8"A[>+"mn#?=!_!P4X()?8)8C$e,"&d
%D+r0#(nC7j;W>'[aofmc(/*Tl]']E*:csOhS9oT*5AUGa;+1t"T7_J(F([P/cD)HnWKYY,?'m+=S7=D3k++_GXsn(0T<VB*q(*=@
%B?*tg75b=nL/9"AWY@:TW/lJ<C;))C0P<05&K%sE:Gf*=n@>ikk3obi_5A@EYC5Ibg<IBUV17l;J*@7u2%.3*7sk]`]RmO<a$4]9
%3UHUq>sLlrku:*B2p&+&d+rn8Y,8=Jk@F,8dKdJ-'IR:RC2Yr-93X@d^t2TGm50V\gF9i.H'clU)#tWc\,P."Skt-!r34Im'qE+O
%gPaUV,n;!:Lq[qk^Z!gT15:L],Xu:r[7%21>EGQ0UIu1b>.FWcQ'sq\b&ds?H&\:='4rRg*Bm=Y[F$rjB*\&U1p=_%Hi3U$7,jDL
%ZO**Bh-gulYA0D\M].\`g7ASEC+^rl$U[><]JE[$i*&\jHIZ;fro^<r't=L@B7Dq/q)O8VUB;EV+:*t6F]XntaK@E\?"<BRib#8I
%eEZ+!0*BDZPN7YFpBbo]g0O[`/SOC<G6c62Pd/YK?)EGkPmMbl^.`fC?E#Kc..U<u9,G()o!DQdG1O=9SYOAkD)jm(`jP\2Ek_Ts
%O;2ss"6/%H=rXKmUgrN9.A#o/,rni'`;=Z),?:X(l%:jQRg>.*n82q3e,spNgmLtX4*4eT)KIbrOr1f7l[5<uB>9J2$BPg'fg_m2
%/Y_6Y#K#+o-`mnHPUWiY7/4YVftVp'8T.ZG;6]XM[2YEbD)Kp44gUX,FYV;iQuV<.QmI7RbLA2_Vq']?"RBqUi%dH[oZFHe\=D2e
%krM>Sm;W>3p%o]2A^'(ga5Hn15O:$Ze4:4YS^geDg6(!_<i_l4m3:dsc`^I+`H`:ue]XbM-A#_Bbdh4fk,627Jhqq@K^j#L;2_7<
%.iG,&3N#BdO8a>p=*bhFLfafD!#d\DeEfa2$8.MR/X[=E-%T:l`ZnMk@^#P84m^4_/gd&_P24W\D[+5m;;uFP5NJ*:<W0(4<h[0[
%MHcqrb'c'HmP_)qI^6P%90BOqkSuMlT6-bZ:AknA6L>[[a\dcM^._@bZ1'gH/ksR*=B*q(qTG0@16SYsbVo:oJ\3uR@''Jjq.;U(
%"mKY'&?n_oYLb8BQn)>F2_QhIV?jFUP,l[@EZ9R<MJJUe!_t6)ilPpj"qcu8;'>N1poJ`LOP89XhMj;Ge"!fEE6Hg4%WcofI&n>m
%rTX"c,pF%>06U=A9:S307n]s.)+<U*WD1KgXf6!TH_oe)G,q=t3E'S):3rtd;JJk%:97-L%4r2#NVXfr"pHTik?9.s`usE6J0\#J
%Ell8L[@So%Z1!9O.B$mhdf%F`Vd*4.MS[GX"YU&7QGlP?<)>f\JeGt9nS=F-WsFl*l#7q!K*:#QL\VL8SK?W'>\acl7o8^6*nY:m
%##'/?3P5A!i(hYklC)";aBFh"(G#%*c@r"T=*ZM:(Y9eQC)Q-O>LZ^9du_>7(o3s6.X'/&mto"N<=Pr^3L.=8ZP'_bUoKb+:X`W(
%lhI$72"fWi_C]>5*Cc!\+pZ_%Sbt3TP^RS*>4,mQF4r$sEEB/C=GRs/Dh^Z6Dmi6joYH)!5ph#->s&YkSAY`4<SX(4:N#%AJHtnn
%h@?"%FB\l&'hmHCCi=&k;+pHq;9lnRbESsOpE:'iUguk7Q-L.ZH8<mS4fmlgO4NPIbAn#QV$/1EIf*E`NIZ1>1'=+G7nBqCebZBg
%^RB'47Xc_F/TN_c`aeW6WAZ9-ZOJpPgiVGd)q42lB[C'K[8e>[PL]6E"/&L>[@a'k4;pSbL?9Z\UCXSe`+:7B^J?`[(/RW1>3:6+
%^X#kb>0bQJQ>9+IE<[\c;\^g.2i=K",+MJD?b.o)?WoP`1&C('Zp]R$&B"&%*mh#h!1Gp7,KFj,4nj2g^aNtV(D-?/hA`K$MhoG\
%<ufR26KLn>T:Eg4b_iOTSQ,>p&]rG>1Ig0uGA_b"3c\$(G4obLUiXV*9u2.b)mN7U]sRu^P&!bVTW@ijZ8\Wdn6u<:'R?+nQPgaE
%@Jn%D1.nODbYu/"S-5n)H#tdB&<*qrIJZU!76_9MR],0i.WV4Jh>YKO"`<EkbF$fn$H,j_=b`R`+Fuh4bJMagJn2rL82.j=en^/!
%p*rDL[O4sg?8L\G]WiENkY!pe<csUF25Qj0=_%f9h1lrHXJt_\'J*[(Bs-=bHCVadQ/\*QId5gnRjOp6g];_`EZBQ+R.<h!86+M*
%+/f7]mOe`;>TU8>q4b?^,mVJA-D;'=KNQXRn<n62F@.M"&@!Lc`=YO(mP['Le^sl3UadiTFS92Gf;6E0>U&,VR'cVo0;jW+('U24
%LD%?.Z&Y&*+tE#]q[S#o>aJY*!5I4?$mZ2UWXJJZ_4V^_oo8g/h=GELK&9fI8pbR/d[8YU8mtp2Y)h5H-?^IYrk.O_9d][n\?S2_
%;SbZm2OfSC+gb/"VsPiD*h0>W0<(6m;OKQVUfpB.0cH/o6cNqK%,85D3`B`<]GtZ[g2[HqhT"#+d,e[Gl^P"Vp*8HKjBfPPnIj?V
%cSo)^EtYq93.t)61GUHjC%O>GUY$f]AVU_JlY810jG\to/=3R$;$cG8A,]=!bGlcBc+C**cT1I*SlIoc2`^!$Z"_n?1Q>&aH>KYU
%mIB]7Q[X=-*@$n<$"JZX/VE<9\(Oai'*U<UU"HWm>C29X#%/q&k;U"&fYU'-]POt,5b0KE2dl[Jk&SY3,pj)-b6>r>)@HWWr]OAi
%bTR8%DRasu44;\Fo>`RMm"Ct\>@Eg;A@PrE-'>aXQ7"81YAD"FE@b_k]uB/#.l+7B,["OLDQ6BjYqPel2Zhjsq326&(1BX9%12"C
%Yc6k%cpcIei)Q'bWn5R9\\Y)JAoQ^5]HM[3R1b_liqMG<Z.nX#I4G"PeZ1YGDp*YL-`&FoW&82ko]4d[RiQL/>[uEZ>dKm&0kEk$
%]\6%=qIWMG3.u!$G/ps<fk0ZCn"'+pF]fk:D=o_A1%UU!'8IqZY5&DF45=2[[R`/:O)'U-5"sGji+9(opNiflROlN[G2dj>moqmY
%#Z<OEbXj%";i_9Li6e[+-R.W)+M:-,L7:?G`U)1CAY(".(1JcB(1k+n\!XeV(mi&bOdXX0'#u=bfeBs=B4aML6D>&:.C^tLm+bZt
%'@`3>aXU/Md%J1^4bsF4C?[lm1cg2oeKD:3iDsl5H"5*8h;*DGk*U#d0sUXFE>L1PX,q]N2%0OmEaR/UB6?@>IWS>!"IEWm*SdLp
%';/O>)6=hXc4W>/[bHg;&W)Kl*mMn=K!(M[X5![:e(e\IHeA0p2$DqY+KTGba5'UXZS!,oJ6Su^[Ss:]e5YV09nZ]f]8"bb_eFrO
%W^p";_,rd;'Ld_X?#;gu13)APP5kgc4F]WDX&QDh_GR4A`4>*$DqQ:aGMQQ\W9SRr9!b@>(_NZ5Ru6idNWN5%pkc#J'(Lq;pofVa
%\"CV@2`\F[i[F8Z[qn.l.=!2n_dVV9Ybj[,p(BgmoeH#:Z?Zdl4SElShpUiL_h[]A.H.C-Z(T_^Ia(YiLEIbH^*ZJqNYl(9PZnoE
%dR_QI'of2.2@/(4^1J(saD(X\"`HKP-AMH-eIFSj$W9iJnL1@@I9q/9QcBD5hO&#-psbf]:bc+']iq=5[4t83?F,F2,=S"pb1,03
%FsHO%fo0r"e*^,7MC1Wb(]AFsh5tiq^:Z#J\a42bU1c^G"4LgOdD`f)XFHgQ7iWi+;kLU]2F#$[ntZj"%-FVa0(XlfQ"X`9e]Nms
%W\YA:aS'I?0!F!fhbNWrX[RTcpF(fRcCQCh1QR?WD.(:c:"4?\k#I"mht#>gFA(rIiJ+7`.-c6UK!f-V&@=A=d/`?0/Pl*9g-0pt
%qNSu+F$!-sMri3+\3m$C<5+\iZ#nVrhh%FY$R=8+1XBYjWU7qt8<k_pn"[\JO\]KSEmNN28AtjmpZe8f+&f?oU/DZsPQ#@-=O:k"
%-L,"En8bE!1fuD$*#$hun5uT$L^[VYUQN*sBcLj12qe#JAmi/5CW%qf5'#ce_I\QPU7[d^K8-(7;sS"=URjj-@.?JqEcWe_FurTM
%]]3Sh)2+r/ZrGeuh5<)LJ=nI`jP&@/C-MA@5jCHGoT(^UT5l[Y;Jjsb>'&E6>K,Te"i09BK!]I(2)ISk4`a-aRpL#9Y'K'3V.c=W
%hWHU0]=C6(@b1fd^Y9[1%,$%G+05*'`U4U<\=RQ,cPHD8f-0X9o$oe5i<e?mWF((0b#_^TV=fMD/oAoXbfN?8_aKP1_I/YXDeB#f
%?5'ONX+?Df_e*`[rt@QN[MU=<mV_K-!CT5F'=YY>9AZ]Am*2Qn2Y+Gr81o=r#c'PYKHom,r3.KI,WX$R(e(L4X./rph4]0hK*D5?
%f>[-=MZ[,NZ&mHGDTHNXi5).KOepGNdJLo=a$m7t8mid-+n<]YP(Dq&b-Z(h,+;=a"g9NaB4QWJ&@,k\B?Efj^Ur%>m`dP35O'XX
%Mh>W`3j=ke@W`jTB&!`I`NQ4@5_:5`8db!3oO8[gAC9*>rL=Znb-m`,rFp4jk:T6_j_0psJ^(,meD>'*9>ASY7_:_"/u1u^il1f_
%YPgr8,je1.`%dgR5:rcKS_opUW8;uijsAs1c4FL\!Ank$DN7Il1EJAab\5c;QJ'>s.FUU[+\8S*R8'q$>0lYW`RUS?oXZjZ7l`(5
%iaoQ*=(kmcGM:,*9$H,K.VhBN3jq>&la"g_l4q:iZK+*E0.B26RS(:6T4js:B'R!V#)>nZLUW?_ollZ@K@TqO"('3uUH=Cjm;&L6
%l<,Snk(4c0bI>.2IZ6uZc10q0AB$S3VN@sZ4bX^*H);7Nr4Z=@2kB"&Ljc[ELFCF7[G(^CZI!sGj4a*c]6_&=eF_?C93f^TNVW(,
%$Has<Dk,YiQm6C6/d\MYBA1M,F7_%%'k;DGjXp&-I@Ubtk@YE?S*#r+0>?0b<dg(2@:t.U)m<QBe])kh7],<j`t[%8fj$TDjDH+f
%L:)$U=gBfqg"<`82GFl-A.F1iYg#na'sTn-TpU*um,CTeYIXB=72Ja7U9`T,6"h6IbS.90ZTiEQ:Rl^GAdtP&XlbtLVW?+<c"t5^
%OJ5LV=aNZAg'f!U[a0L^I4<]&fH]W7P<6OSDpqU)>4*#_%2A&N>Q$.A"7f=SZi+J06s4Q-_Gic94Z5'k4AR@,>qgEon"g'Iih^m%
%-57*g2DQ@S/oU=<fr'75%AX>hI.=U\[Z)#]h"Eh&nIU&^=l!KS2p<S6[\aXK;S6RJ'!\B;C<>7Dgjo)C[S^ebTTFhSEo."PdsJDd
%*_*R.?5p#Pq.rQOf)88I2bU4bNI<FH&X^$uo5/@]1<pNm^<`dXP&)3'(;l7%N:c7PSjkH10s0Vi,$(uG_g:mSe`5&TZR,Q+'l&)+
%odUj$NS5GY,Z3lt(-O#Ran=U`ER<$H*q]OigJeH$9MSp@e7ln1)Fk\P]IjWE$ck48U:V<LG$F1J+A9V8[\;<?2R7b?Lk;nYA+,'O
%)mFa["b!5[2YcG8O[tDD&S#9E@[pV?'/s*%\@Mt1@!3QBZ,\-Bj@C]u5"rjL`VXs!RYYF0VB`@=CD/0qE7Kk/f6UV>.AF4BOZi/*
%s7!sEq4o`Tk'$S24$q\fDgL(lDi^qRbB0??Z#u.Dnn^'9>gc$qm(QC(f8K?bq^p]8HIrCpgkVT[L3rk;6n:]S3UrfbYiT"-*Hh?k
%0AaTqjCLG:Q!<'7Ahe/lRpK*ms-/Zi;<;W?/Z&-CpXM;V+1IceBmR.`qi07#o%0Fl6)=``9mG_"c2e@.hLehb<`Ldda[Bbk\(96g
%j2/JsqD-rQb[+-r3GBk<[\4L8k?IS[Qee8)m<@\Dc9;]c(V=M>jGi-Nm-`K"Ls=="]hWAN*,g.iK)",e+.u!I/JH'044<#0fWE7b
%K[<;dmB#j"9VH;bDsc\1%^2)g\lb1DfcoC8m>0'AFE2gYZuoufXL>ZtLPq1]e@Y%X'ge\nc-:a9mR^tkJ0o^!MW(PKAKRW@N#D>$
%mYK$0A<WGh.3H%T10;`@=U)e.a?9O)Tb8.NcFhs'BAZM"$gp'@"KBFZrcYCQ3;fsT83+9kZ%n'0r\r_t_dlbM-TWNkpT(p7[kD6+
%0jF,`AqG:d_eVC,KHbg,CHCTCDdO^6d\ELC;k$2;c1T:Z</Z?d710a/4DY=#6b>QPg9^J.Qe4BiU_^<Xb/nO_Gr4.%Hj_jH5#qrY
%HP(7C_AV*?qOfKE"_;*5!9JEmqRi:9^b;$((<OL(h[h&/].,hQ=7]X*HXc^Sd&/H^M\PI>]OkHqfApd@k7tQmAHM0U5A0KkWM-9m
%IEW(\Dk?%;pS!L5:M.-cn*&`K/&YY1;7aG(Iht3D4k=1^Z%_nUlWp[:p;La;hmJC@er++kHIjidrLf1N/$,<p3fj/D_?_i(;q'^O
%oBppJ_J_']#:d"(rK\5?Hs(k0-0tVW47ql*8*X^Z6uR/_?K;_ET(G=NEQN`>%$LM%ktN>l2iBR"m+-&FNQAl>9nQPRiftl27^@No
%%\o?tlUIF.Z7$dQ7AuL?lllN&bcdN4Uc'YJJ5j5%_CJY15ZuX#IHIcF\mgRZG,6,sE[Cj>>h[9=,)b5mPhkO?=1bL[fY"'mO:m9O
%?,gbl4WX:H?%I8^D&]id<-pOE%HV5@h=B29Ba=\\;'a]>4\ib;aVW!DUc11mO<H!,*nJ47,)!;l4R;NAfu8be[4(sk8`9KbN/'mO
%r%U^`Dqti6.^lJNNr*p4)WZ(]\huanSqC`42S]!RTf&hm-STj@8\hm2?Sl8fSSr?9NRV"]r+jK2qh)9)l2ngA$2m>e3EDfP.jDs4
%*ERM5qKN'FalQja_TE.r*9Uof0\3=M6u5Ri=>0>l6'S16.Uq,@64A#K8U1?q6Hm<a5,?u*V(eGJlqh#c%Z/chT4[NQr0A8ID#0SI
%hqp$@PH7-1#A@-4;/!utZr"l_jNP?,n;rYG6'koVWkEi++p<;hQ@&67aL\DK&>NPH]:*Y>0iR]a74Ca"FqE)q:m93;GhIP#d^=$O
%6M4>J:T$)BkATn"X-)QVq-(HDX6ke;9*7@=\u*0=pC`26E8/Y76`CQ4ZU6GO,2.(<\cT\rVkUZ_e"kn;cWU,d+lQpLrn=YKqV'AP
%*ZDHZ"\S_)(f3]Ym.DL(Fdda01k$]RlD'b^bT:@,:\DR[h;;kondrjZE"9"1W.a\eX)]:e,3F\@3%N/)>sha`TkWdGp)O&U.DEQ9
%n?`#)qs6VEnI<N+IB.C2]m""0YEGj*QF",dNMEhCiep>#mZCI>*9IOW'(ju`_O)q*__,kl!Y+MI(:+_mP9tSfTcj$r.]BFW'pYgK
%Ucc+Y,%OB/L:h9WTlq;-c/(%a2MSBC**k5Qgeg_rB01$/m3TQancKjWmi=1G'etdlXg'E`JM2nlZ=F1!lVDlA2mW^j6W;SBVS>/a
%<,naB?HNbZS?-l7i3Q5d=D6Hf_oHnWXqJ9oX_rpajl.o=g[Fis?WDS%O,`Iuca8]BheB>X>c1k4=r-!g&Q$5d$f3bb^@Jd%1(h2t
%b71PqqA4V$lOU_>/O-ap,P?1b!,u7-4.C;>i&.]&e[GOp>25g]AdD2i*F0q"eE*^(A4agRKd?L;'EVhPP55++Du;s%P\)BV+/_OQ
%hp+.[qRoZ@e7Ta8lhe=ebpc*5f+6NW%mKS`'V2X!qod$N?[JSSk"G2BV!WmY`p]u:/EtcMaPi4sruC<:aN[X0T!L?c%XbU0SCSYl
%:@W.Y`2UjPCdurb;pl!>:]Ofm7[f'f'LPMS53coum/LU@WJh:4[=?<XbtS_oe5nM1g)p89/[:tQX;5QdT''L5hg0;*hd4@Sq1r?!
%jG*u3aU.so20Z!E1B(kW\3sNeojr=A?#>^(CY\p>=i)`<g.a_<LK^u(_[,J"*q.tVoNm*JKL?dQidW?fc&Xi1@22YG2mHD#Xl1"F
%B:-udE=m\qMkBP%JZdS0=s#&WG#)^\\oFa4JLI0j8O!f@7'AmRCB$3'SugMt9@%COWF6b\:X<a6[i=$"d6i@#$l:/N#=FDJpmN^q
%`sP")X*s]AO80U,eIQqO2X^-F&c/pMrNYc!PN<1tbm3RrlQ:qiZ#Ibu^dJLikIV*taUhW4lmZH[5;5!pQBi7^_-5$2+VcWTq&t-d
%Z?iT:9H7ERh;"lc7,tmbX$5Vi(HKZ]Eq>_&]k0ki)-,+d:W_55dEbD<74*5Lnm/)H(]!)kU3Vl`?KA4ig!W;iFcguUk@aq@[/]1A
%K)cGo1\VRK6>.k,4]Tguj39c^gHF!.WPXJ,VdGhTVKo$Kk@$[om\ujHN#/YloG]'@Vu73&B^;@nEo!jj7+Shoj+fJ%a5H8cE\&H8
%D1Qk%p?YpLKs**Ol`Ju3!/;arC"YIG\2hU8=H9*`.I!AaG2F.?WZ=&`p/ip0s%6?5QBH:0c9Cj@[i!Q;5$(UPZeg)G>KtAipLCV9
%6=ch_YFt(A-Z!9c7T4ZF=:Gp,m;R/C5DeT!4%$kc90Khei^4Qh\;\=,\6"n/.T@^:*GSD=#g'W[=%:'pLuq[]P1*YB?dEgL'0ts7
%jQ(W4=STq[mJ6Vi\+8-fs,::F#Hp_;F0>&%P"_5)cbY,1/!:_?n:-Z1?"H]2)uN?8GEMj;Ul!2D4J)qc/NY]ipP8A3O'hS=e%X)&
%o2BgYOi./H62[7u>i\$!q^/]1,p0(s?!BX&=8P+f4brE:8O6W5\-P%1ib7BfWijHW?Rn!.]bgL:beAdA()f\JE1Oq9Wj7FWZ`;EU
%a@7%ANTP)0'!iD2.B.hUNUDt(>-2!C%Y[M<QMJG]$!+oHdhodN:"i7@HmCs8X!X;K;/?-"9P_'&;2/R3aFQ[j'"MDfJUEhh3-cG<
%A_df_'GRl@r*R^K(<SP/DGpO%?mtJ=@C424UWmEr*pb'%<csMrn>$r!%`@'Vd(n]r<ig76,+ZSAh(D$+%$T97Qt9ruW*G_E&n;13
%_,Li3H55]7:toTo_=lYr93R7;3?di+o29j3O6)*i6Bt9U<;M6KlSA)3HouXVVn@OcTMXk[V53<jmGX6+&-]sdAU#>[2%+7gT5)al
%jBErbAle2=VNCX5ED36";/sUh]%<j]U6MRuh/N8l-i:s-r;ZZU=[As;Mer;KB>740YKd,$kCi.'"\A?LHr<p7[0sBALr>M!pnOV^
%-"_1KXB\%FQWVK?U2peB>[Tt'8CAgDFG3Coi)`tkbV`AkK'-A@-Hjlp5MWeXKO\?=K,DJ;;C"sk690G@A('`gKTgrad:72GhYt?j
%dC1[5Po[OP;[MDE@P`Ul<l,Gpi/#pZKG^;FFhl0o<eiJN@6@_(#f;kV%:*fi\siSjSej`/rMn[4WqL]ipSdBAlB?Se/GW!l.*6@<
%VcpJ`YHHVYp(/='ldL0YV1*Iq^S`#Y5L2e>?E>aX&+BLT),c6ed%-Zpk0K1\0)!QR.A$.5G_\>tiJNac<D!@Z_,2ArnpunX+`ofr
%S60b*jQQFeQQP8HlK,61bM;[D0P)3p^n[@A`M2nr;HJ,Bqt@K`rT:S=o:O)'pq&cg_sR3url^qJI_>u8qd4gP:VZh:5Q1S2rUV[l
%qWTs=oImuZ[pQlIrXXMRj.Ci$k?n5_rP-)Ee";*bQTtN?:VV;QQiHm%s$MGuST";jDu]7os3jcYq7e?6ecu~>
%AI9_PrivateDataEnd
